package proyectofinal.ctdoa.backend.analizador.c;

import java_cup.runtime.*;
import java.io.StringReader;
import proyectofinal.ctdoa.backend.analizador.java.*;
import proyectofinal.ctdoa.backend.analizador.visual_basic.*;
import proyectofinal.ctdoa.backend.analizador.python.*;
import proyectofinal.ctdoa.backend.objetos.*;
import proyectofinal.ctdoa.backend.manejadores.*;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import proyectofinal.ctdoa.frontend.gui.FrameCTDOA;

parser code {:

    public ManejadorSintacticoJP msJP = ManejadorSintacticoJP.getInstacia();
    public ManejadorArreglos ma = ManejadorArreglos.getInstancia();
    public ManejadorInstancias mi = ManejadorInstancias.getInstance();
    public ManejadorCuartetos mc = ManejadorCuartetos.getInstancia();
    public ManejadorConstantes manejadorConstantes = ManejadorConstantes.getInstancia();
    public ManejadorTablaPila mtp = ManejadorTablaPila.getInstancia();
    public FrameCTDOA frameCTDOA;

    public SintacticoC(LexicoC lexer) { 
        super(lexer);   
        msJP.nuevoAnalisis();
    }

    public void setFrameCTDOA(FrameCTDOA frameCTDOA) {
        this.frameCTDOA = frameCTDOA;
        this.msJP.setFrameCTDOA(frameCTDOA);
    }

    public void setAccion(String tipo, String mensaje, String accion){
        frameCTDOA.addErrores("ERROR Lexico Tipo: " + tipo + "\t Mensaje: " + mensaje + "\tAcci√≥n: ERROR\n");
    }

    @Override
    public void syntax_error(Symbol s){
        try {
            msJP.errorSintax(s.left, s.right, s.value, 
                "Uf, error sintactico cerca de la linea y columna indicada porfavor revisa que el token\n "
                        + "\t\tidicado corresponda a la declaracion de instruccion correspondiente. Vuelve a intentarlo."
            );
        } catch (Exception e) {
            System.out.println("Error " + e.toString());
        }
    }
:}
    

/* Terminales */

terminal String     COMENTARIO;
terminal            COD_VB, COD_PY, COD_JAVA;
terminal            GETCH;
terminal            INCLUDE;
terminal            LIBRERIA_CLASES, LIBRERIA_JAVA, LIBRERIA_PYTHON, LIBRERIA_VB, LIBRERIA_C;
terminal String     CARACTER;
terminal            VB, PY, JAVA;
terminal            INT, FLOAT, CHAR;
terminal            MAS, MENOS, POR, DIV, MOD, MAS_MAS, MENOS_MENOS;
terminal            IGUAL, CLRSCR, AMPERSAND;
terminal            IGUAL_IGUAL, DIFERENTE, MENOR, MAYOR, MENOR_IGUAL, MAYOR_IGUAL, NOT, AND, OR;
terminal            SCANF, LEER_INT, LEER_CHAR, LEER_FLOAT;
terminal            PROGRAMA, VOID, MAIN, CONST, IF, ELSE_IF, ELSE, SWITCH, CASE, DEFAULT, BREAK, FOR, WHILE, DO, PRINTF;
terminal            COMILLAS, PUNTO, COMA, PUNTO_COMA, DOS_PUNTOS, LLAVE_A, LLAVE_C, CORCHETE_A, CORCHETE_C, PARENTESIS_A, PARENTESIS_C;
terminal Integer    NUMERO;
terminal float      REAL;
terminal String     ID;
terminal String     ERROR;

/* No Terminales */ 

non terminal inicio, main;
non terminal estructura_principal, txt, dato_const;
non terminal cod_vb, cod_py, cod_java, ppa;
non terminal constante, cv_p, dato, texto_cadena;
non terminal tipo_dato, switch_p, do_while_p;
non terminal librerias, librerias_p, getch;
non terminal operaciones_aritmeticas, estruct_op;
non terminal operaciones_logicas, tipos_comparacion;
non terminal condicional, and, or, condicional_or, condicional_and, condicional_not;
non terminal declaracion_variables, declaracion_variables_g, lista_id_valores, lista_id_p, lista_ids;
non terminal asignacion_var, asignacion;
non terminal arreglo, dimension, while_n, while_p;
non terminal if, else, else_if, else_if_p, estructura_if;
non terminal switch, caso_default, cantidad_casos, caso;
non terminal while, do_while, for, var, vp, arreglo_const, dimension_const;
non terminal parametros, parametros_p, llamada_fp;
non terminal instancia_constructor, for_var, for_condicional, for_asignacion;
non terminal scanf, texto, texto_p, tipo_dato_almacenar;
non terminal printf, valores, ii, ie, ee, caso_p, est_const;
non terminal i_ins, instancia_p, instancia_pp, op_aritmetica_const;
non terminal estructuras, estructuras_p, operaciones_asignacion;

/* Prececencia */

precedence left MAS, MENOS, AMPERSAND;
precedence left POR, DIV, MOD;
precedence left PARENTESIS_A, PARENTESIS_C;
precedence left OR;
precedence left AND;
precedence left NOT;
precedence left CHAR;
precedence left INT;
precedence left FLOAT;
precedence left ELSE;
precedence left ELSE_IF;
precedence left IF;
precedence left GETCH;

/* Gramaticas */ 

start with inicio;

inicio ::=
    estructura_principal
    librerias_p
    {:parser.mtp.addP();:}
    cv_p 
    main
        estructuras_p
    CORCHETE_C 
    {:
        parser.mtp.addTamanio(); 
        parser.mc.finProcedimiento(false, false);
    :}
    | error:e
    {:parser.msJP.errorSintax(eleft, eright, e, "Error sintactico en la declaracion del programa. Se espera la estructura: << %%VB (Codigo Visual Basic) %%PY (Codigo Python) %%JAVA (Codigo Java) %%PROGRAMA (Codigo Programa)>>, vuelve a intentarlo.");:}
;

main ::=
    VOID MAIN PARENTESIS_A PARENTESIS_C CORCHETE_A      
;

ppa ::=
    PARENTESIS_A
    | error:x
    {:parser.msJP.errorSintax(xleft, xright, x, "Error sintactico la estructura del programa. Se esperaba el token: << ( >>");:}
;

/****************************** Estructura Principal **************************************/

estructura_principal ::=
    cod_vb
    cod_java
    cod_py
    PROGRAMA
;

/*********************** Estructura - Codigo - Librerias **********************************/

cod_vb ::=
    COD_VB:e 
    {:        
        try {
            parser.msJP.setContadorLineas(0);
            LexicoVisualBasic lexicoVisualBasic = new LexicoVisualBasic(new StringReader(e.toString().replaceAll("%%VB", "")));
            lexicoVisualBasic.setFrameCTDOA(parser.frameCTDOA);
            SintacticoVisualBasic sintacticoVisualBasic = new SintacticoVisualBasic(lexicoVisualBasic);
            sintacticoVisualBasic.setFrameCTDOA(parser.frameCTDOA);
            sintacticoVisualBasic.parse();
            parser.msJP.setContadorLineas(0);
        } catch (Exception ex) {    
            parser.msJP.setContadorLineas(0);
            //ex.printStackTrace();
            System.out.println(ex.toString());
            JOptionPane.showMessageDialog(null, "Errores, analizando el codigo de Visual Basic.", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    :}
    | error:x COD_VB:e 
    {:  
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la declaracion del programa. Se esperaba el token: << %%VB >>, no el token indicado.");
        try {
            parser.msJP.setContadorLineas(0);
            LexicoVisualBasic lexicoVisualBasic = new LexicoVisualBasic(new StringReader(e.toString().replaceAll("%%VB", "")));
            lexicoVisualBasic.setFrameCTDOA(parser.frameCTDOA);
            SintacticoVisualBasic sintacticoVisualBasic = new SintacticoVisualBasic(lexicoVisualBasic);
            sintacticoVisualBasic.setFrameCTDOA(parser.frameCTDOA);
            sintacticoVisualBasic.parse();
            parser.msJP.setContadorLineas(0);
        } catch (Exception ex) {    
            parser.msJP.setContadorLineas(0);
            //ex.printStackTrace();
            System.out.println(ex.toString());
            JOptionPane.showMessageDialog(null, "Errores, analizando el codigo de Visual Basic.", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    :}
    | error:x
    {:parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la declaracion del programa. Se esperaba el token: << %%VB >>, no el token indicado.");:}
;

cod_py ::=
    COD_PY:e 
    {:
        try {
            LexicoPython lexicoPython = new LexicoPython(new StringReader(e.toString().replaceAll("%%PY", "")));
            lexicoPython.setFrameCTDOA(parser.frameCTDOA); 
            SintacticoPython sintacticoPython = new SintacticoPython(lexicoPython);
            sintacticoPython.setContadorLineas(eright);
            sintacticoPython.setFrameCTDOA(parser.frameCTDOA);
            sintacticoPython.setContadorLineas(eright);
            sintacticoPython.parse();
        } catch( Exception ex) {
            //ex.printStackTrace();
            System.out.println(ex.toString());
            JOptionPane.showMessageDialog(null, "Errores, analizando el codigo de Python.", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
        parser.msJP.setContadorLineas(0);
    :}
    | error:x COD_PY:e 
    {:
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la declaracion del programa. Se esperaba el token: << %%PY >>, no el token indicado.");
        try {
            LexicoPython lexicoPython = new LexicoPython(new StringReader(e.toString().replaceAll("%%PY", "")));
            lexicoPython.setFrameCTDOA(parser.frameCTDOA); 
            SintacticoPython sintacticoPython = new SintacticoPython(lexicoPython);
            sintacticoPython.setContadorLineas(eright);
            sintacticoPython.setFrameCTDOA(parser.frameCTDOA);
            sintacticoPython.setContadorLineas(eright);
            sintacticoPython.parse();
        } catch( Exception ex) {
            //ex.printStackTrace();
            System.out.println(ex.toString());
            JOptionPane.showMessageDialog(null, "Errores, analizando el codigo de Python.", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
        parser.msJP.setContadorLineas(0);
    :}
    | error:x
    {:parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la declaracion del programa. Se esperaba el token: << %%PY >>, no el token indicado.");:}
;

cod_java ::=
    COD_JAVA:e  
    {:
        try {
            parser.msJP.setContadorLineas(0);
            LexicoJava lj = new LexicoJava(new StringReader((e.toString().replaceAll("%%JAVA", ""))));
            lj.setFrameCTDOA(parser.frameCTDOA);
            SintacticoJava sintacticoj = new SintacticoJava(lj);
            sintacticoj.setContadorLineas(eright);
            sintacticoj.setFrameCTDOA(parser.frameCTDOA);
            sintacticoj.parse();
        } catch( Exception ex) { 
            //ex.printStackTrace();
            parser.msJP.setContadorLineas(0);
            System.out.println(ex.toString());
            JOptionPane.showMessageDialog(null, "Errores, analizando el codigo de Java.", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
        parser.msJP.nuevoAnalisis();
        parser.msJP.setContadorLineas(0);
        ManejadorHeap mh = ManejadorHeap.getInstancia();
        mh.setPrincipal(false);
    :}
    | error:x COD_JAVA:e  
    {:
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la declaracion del programa. Se esperaba el token: << %%JAVA >>, no el token indicado.");
        try {
            parser.msJP.setContadorLineas(0);
            LexicoJava lj = new LexicoJava(new StringReader((e.toString().replaceAll("%%JAVA", ""))));
            lj.setFrameCTDOA(parser.frameCTDOA);
            SintacticoJava sintacticoj = new SintacticoJava(lj);
            sintacticoj.setContadorLineas(eright);
            sintacticoj.setFrameCTDOA(parser.frameCTDOA);
            sintacticoj.parse();
        } catch( Exception ex) { 
            //ex.printStackTrace();
            parser.msJP.setContadorLineas(0);
            System.out.println(ex.toString());
            JOptionPane.showMessageDialog(null, "Errores, analizando el codigo de Java.", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
        parser.msJP.nuevoAnalisis();
        parser.msJP.setContadorLineas(0);
        ManejadorHeap mh = ManejadorHeap.getInstancia();
        mh.setPrincipal(false);
    :}
    | error:x
    {:parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la declaracion del programa. Se esperaba el token: << %%JAVA >>, no el token indicado.");:}
;

/********************************** Constantes ********************************************/

constante ::=
    CONST tipo_dato:e ID:a IGUAL dato_const:i PUNTO_COMA                {:RESULT = parser.manejadorConstantes.declaracionConstante(new Simbolo((Tipo) e, i, a), eleft, eright);:}
    | CONST tipo_dato:e ID:a IGUAL dato_const:i error:x PUNTO_COMA        
    {:
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion declaracion de constantes. Se esperaba el token: << ; >>, no el token indicado.");
        RESULT = parser.manejadorConstantes.declaracionConstante(new Simbolo((Tipo) e, i, a), eleft, eright);
    :}
    | CONST tipo_dato:e ID:a IGUAL error:x PUNTO_COMA        
    {:parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion declaracion de constantes. Se esperaba el token: << Entero | Decimal | Operacion Aritmetica >>, no el token indicado.");:}
    | CONST tipo_dato:e ID:a IGUAL dato_const:i error:x                   
    {:  
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion declaracion de constantes. Se esperaba el token: << ; >>, no el token indicado.");
        RESULT = parser.manejadorConstantes.declaracionConstante(new Simbolo((Tipo) e, i, a), eleft, eright);
    :}
    | error:x CONST tipo_dato:e ID:a IGUAL dato_const:i PUNTO_COMA        
    {:
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en el bloque de instrucciones de declaracion de constantes. Se esperaba la declaracion de una constante.");
        RESULT = parser.manejadorConstantes.declaracionConstante(new Simbolo((Tipo) e, i, a), eleft, eright);
    :}
    | declaracion_variables_g:e PUNTO_COMA                      {:RESULT = e;:}
    | error:x COMENTARIO
    {:parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en el bloque de instrucciones. Se a recuperado jaste el token: << Comentario >>.");:}
    | tipo_dato:a arreglo_const:e PUNTO_COMA                    {:RESULT = parser.msJP.declararArreglo(e, eleft, eright, (Tipo) a);:}
    | error:x instancia_constructor PUNTO_COMA                            
    {:parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion declaracion de instancias. Se esperaba el token: << JAVA >>, no el token indicado.");:}
    | instancia_constructor error:x                                       
    {:parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion declaracion de instancias. Se esperaba el token: << ; >>, no el token indicado.");:}
    | instancia_constructor error:x PUNTO_COMA                            
    {:parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion declaracion de instancias. Se esperaba el token: << ; >>, no el token indicado.");:}
    | instancia_constructor PUNTO_COMA                                  {:/* Ignore */:}
    | error:e PUNTO_COMA                                        
    {:parser.msJP.errorSintax(eleft, eright, e, "Error sintactico en la declaracion de la constante o variable, se esperaba: << COMENTARIO || VARIABLE || CONSTANTES >> en el area de variables y constantes.");:}
;

cv_p ::=
    constante:e cv_p:a              {:RESULT = parser.msJP.lista(a, e);:}
    |
;

dato ::=
    CARACTER:e                                          {:RESULT = new Simbolo(Constantes.CHAR_VAR_PJ, e);:}
    | operaciones_aritmeticas:e                         {:RESULT = e;:}
    | error:e
    {:parser.msJP.errorSintax(eleft, eright, e, "Error sintactico en los datos que se asignaran. Se esperaba token: << ID | Operacion Aritmetica | Entero | Decimal >>");:}
;

dato_const ::=
     CARACTER:e                                         {:RESULT = new Simbolo(Constantes.CHAR_VAR_PJ, e);:}
    | op_aritmetica_const:e                             {:RESULT = e;:}
;

/********************************** Tipo de Datos *****************************************/

tipo_dato ::=
    INT                 {:RESULT = Constantes.INT_VAR_PJ;:}
    | FLOAT             {:RESULT = Constantes.FLOAT_VAR_PJ;:}
    | CHAR              {:RESULT = Constantes.CHAR_VAR_PJ;:}
    | error:e                   
    {:  
        RESULT = Constantes.INT_VAR_PJ;
        parser.msJP.errorSintax(eleft, eright, e, "Error sintactico en la instruccion tipo de dato de una variable. Se esperaba el token: << int | char | float >>");
    :}
;

/*********************************** Librerias ********************************************/

librerias ::=
    INCLUDE LIBRERIA_VB:a                   {:parser.msJP.agregarLibreria(a.toString(), aleft, aright, 1);:}
    | INCLUDE LIBRERIA_JAVA:a               {:parser.msJP.agregarLibreria(a.toString(), aleft, aright, 5);:}
    | INCLUDE LIBRERIA_CLASES:a             {:parser.msJP.agregarLibreria(a.toString(), aleft, aright, 2);:}
    | INCLUDE LIBRERIA_PYTHON:a             {:parser.msJP.agregarLibreria(a.toString(), aleft, aright, 3);:}
    | INCLUDE LIBRERIA_C:a                  {:RESULT = parser.msJP.agregarLibreria(a.toString(), aleft, aright, 4);:}
;

librerias_p ::=
    librerias:e librerias_p:a       {:RESULT = parser.msJP.lista(a, e);:}
    |
;

/******************************* Operaciones Aritmeticas ******************************/

op_aritmetica_const ::=
    op_aritmetica_const:a MAS op_aritmetica_const:e                     {:RESULT = parser.manejadorConstantes.realizarOperaciones(a, e, aleft, aright, eleft, eright, 1);:}
    | op_aritmetica_const:a MENOS op_aritmetica_const:e                 {:RESULT = parser.manejadorConstantes.realizarOperaciones(a, e, aleft, aright, eleft, eright, 2);:}
    | op_aritmetica_const:a POR op_aritmetica_const:e                   {:RESULT = parser.manejadorConstantes.realizarOperaciones(a, e, aleft, aright, eleft, eright, 3);:}
    | op_aritmetica_const:a DIV op_aritmetica_const:e                   {:RESULT = parser.manejadorConstantes.realizarOperaciones(a, e, aleft, aright, eleft, eright, 4);:}
    | op_aritmetica_const:a MOD op_aritmetica_const:e                   {:RESULT = parser.manejadorConstantes.realizarOperaciones(a, e, aleft, aright, eleft, eright, 5);:}
    | MENOS est_const:e                                                         {:RESULT = parser.manejadorConstantes.realizarOperaciones(e, e, eleft, eright, eleft, eright, 6);:}
    | est_const:e                                                               {:RESULT = e;:}
;

est_const ::=
    PARENTESIS_A op_aritmetica_const:e PARENTESIS_C                 {:RESULT = e;:}
    | ID:e                                                          {:RESULT = parser.manejadorConstantes.isConstante(e.toString(), eleft, eright);:}
    | NUMERO:e                                                      {:RESULT = new Simbolo(Constantes.INT_VAR_VB_PY, e);:}
    | REAL:e                                                        {:RESULT = new Simbolo(Constantes.FLOAT_VAR_VB_PY, e);:}
    | error:x est_const:e
    {:parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion operacion aritmetica o valores. Se esperaba el token: << ID | Entero | Decimal >>, no el token indicado."); RESULT = e;:}
;

operaciones_aritmeticas ::= 
    operaciones_aritmeticas:a MAS operaciones_aritmeticas:e                     {:RESULT = parser.msJP.realizarOperaciones(a, e, aleft, aright, eleft, eright, 1);:}
    | operaciones_aritmeticas:a MENOS operaciones_aritmeticas:e                 {:RESULT = parser.msJP.realizarOperaciones(a, e, aleft, aright, eleft, eright, 2);:}
    | operaciones_aritmeticas:a POR operaciones_aritmeticas:e                   {:RESULT = parser.msJP.realizarOperaciones(a, e, aleft, aright, eleft, eright, 3);:}
    | operaciones_aritmeticas:a DIV operaciones_aritmeticas:e                   {:RESULT = parser.msJP.realizarOperaciones(a, e, aleft, aright, eleft, eright, 4);:}
    | operaciones_aritmeticas:a MOD operaciones_aritmeticas:e                   {:RESULT = parser.msJP.realizarOperaciones(a, e, aleft, aright, eleft, eright, 5);:}
    | MENOS estruct_op:e                                                        {:RESULT = parser.msJP.modificarVariables(e, eleft, eright);:}
    | estruct_op:e                                                              {:RESULT = e;:}
;

estruct_op ::=
    PARENTESIS_A operaciones_aritmeticas:e PARENTESIS_C             {:RESULT = e;:}
    | ID:e                                                          {:RESULT = parser.msJP.metodoBuscarID(e.toString(), eleft, eright);:}
    | NUMERO:e                                                      {:RESULT = new Simbolo(Constantes.INT_VAR_VB_PY, e);:}
    | REAL:e                                                        {:RESULT = new Simbolo(Constantes.FLOAT_VAR_VB_PY, e);:}
    | arreglo:e                                                     {:RESULT = parser.msJP.buscarArreglo(e, eleft, eright);:}
;

/***************************** Operaciones Logicas ************************************/

operaciones_logicas ::=
    tipos_comparacion:a IGUAL_IGUAL:c tipos_comparacion:e                       {:RESULT = parser.msJP.comprobarOperacionesLogicas(a, e, 1, cleft, cright);:}
    | tipos_comparacion:a DIFERENTE:c tipos_comparacion:e                       {:RESULT = parser.msJP.comprobarOperacionesLogicas(a, e, 2, cleft, cright);:} 
    | tipos_comparacion:a MENOR:c tipos_comparacion:e                           {:RESULT = parser.msJP.comprobarOperacionesLogicas(a, e, 3, cleft, cright);:} 
    | tipos_comparacion:a MENOR_IGUAL:c tipos_comparacion:e                     {:RESULT = parser.msJP.comprobarOperacionesLogicas(a, e, 4, cleft, cright);:}
    | tipos_comparacion:a MAYOR:c tipos_comparacion:e                           {:RESULT = parser.msJP.comprobarOperacionesLogicas(a, e, 5, cleft, cright);:}
    | tipos_comparacion:a MAYOR_IGUAL:c tipos_comparacion:e                     {:RESULT = parser.msJP.comprobarOperacionesLogicas(a, e, 6, cleft, cright);:}
    | tipos_comparacion error:x tipos_comparacion                     
    {:parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion operaciones de comaparacion. Se esperaba el token: << < | > | <= | >= | != >>, no el token indicado.");:}
;

tipos_comparacion ::=
    operaciones_aritmeticas:a               {:RESULT = a;:}
    | CARACTER:a                            {:RESULT = new Simbolo(Constantes.CHAR_VAR_PJ, a);:}
    | error:x operaciones_aritmeticas:a               
    {:parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion operacion de comparacion. Se esperaba el token: << ID | Entero | Decimal | Operacion Aritmetica | Caracter >>, no el token indicado."); RESULT = a;:}
    | error:x CARACTER:a                            
    {:parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion operacion de comparacion. Se esperaba el token: << ID | Entero | Decimal | Operacion Aritmetica | Caracter >>, no el token indicado."); RESULT = new Simbolo(Constantes.CHAR_VAR_PJ, a);:}
    | error:x
    {:parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion operacion de comparacion. Se esperaba el token: << ID | Entero | Decimal | Operacion Aritmetica | Caracter >>, no el token indicado.");:}
;

/********************************** Condicionales *************************************/

condicional ::=
    condicional_or:e                                        {:parser.mc.nuevoAnalisisBoolean(); RESULT = e;:}
    | error:e CORCHETE_C
    {:
        parser.mc.nuevoAnalisisBoolean();  
        parser.msJP.errorSintax(eleft, eright, e, "Error sintactico en las operacionaciones logicas, de la intruccion condicional. Se esperaba la estructura: << Op1 (&& , ||) Op2 >>");
    :}
;

and ::=
    AND             {:parser.mc.and(); parser.mc.condicionalAND(); parser.mc.escribirEtiqueta();:}
;

or ::=
    OR              {:parser.mc.or(); parser.mc.condicionalOR(); if (!parser.mc.ultimoAgregadorEtiqueta()) { parser.mc.escribirEtiqueta();}:}
;

condicional_or ::=
    condicional_or:a or:c condicional_or:e                      {:RESULT = parser.msJP.comprobacionCondicional(a, e, 2, cleft, cright);:}
    | condicional_and:a                                         {:RESULT = a;:}
    | error:e
    {:parser.msJP.errorSintax(eleft, eright, e, "Error sintactico en las operacionaciones logicas, de la intruccion condicional. Se esperaba la estructura: << Op1 (&&, ||) Op2 >>");:}
;

condicional_and ::= 
    condicional_and:a and:c condicional_and:e                   {:RESULT = parser.msJP.comprobacionCondicional(a, e, 1, cleft, cright);:}
    | condicional_not:a                                         {:RESULT = a;:}
;

condicional_not ::=
    NOT ppa operaciones_logicas:a PARENTESIS_C         {:RESULT = parser.msJP.comprobacionCondicional(a, true, 3, aleft, aright);:}
    | NOT ppa:x PARENTESIS_A operaciones_logicas:a PARENTESIS_C         
    {:  
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion operacion logica. No se esperaba el token: << " + ((Symbol) x).value + " >>."); 
        RESULT = parser.msJP.comprobacionCondicional(a, true, 3, aleft, aright);
    :}
    | NOT ppa operaciones_logicas:a error:x PARENTESIS_C         
    {:
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion operacion logica. Se esperaba el token: << ) >>, no el token indicado."); 
        RESULT = parser.msJP.comprobacionCondicional(a, true, 3, aleft, aright);
    :}
    | NOT ppa operaciones_logicas:a error:x                       
    {:
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion operacion logica. Se esperaba el token: << ) >>, no el token indicado."); 
        RESULT = parser.msJP.comprobacionCondicional(a, true, 3, aleft, aright);
    :}
    | operaciones_logicas:e                                     {:parser.mc.gotoEscribir(); RESULT = e;:}
;

/***************************** Declaracion de Variables *******************************/

declaracion_variables_g ::=
    tipo_dato:a lista_ids:e                     {:RESULT = parser.msJP.declararVariablesGlobales(new Simbolo((Tipo)a, e), aleft, aright);:}       
;

declaracion_variables ::=                       
    tipo_dato:a lista_ids:e                     {:RESULT = parser.msJP.declararVariables(new Simbolo((Tipo)a, e), aleft, aright);:}
    | tipo_dato:a arreglo_const:e               {:RESULT = parser.msJP.declararArreglo(e, eleft, eright, (Tipo) a);:}
;

lista_id_valores ::=
    ID:a IGUAL asignacion:e
    {:
        if(e != null) {        
            RESULT = new Simbolo(((Simbolo) e).getTipo(), ((Simbolo) e), a);
        } else { 
            RESULT = e;
        }
    :}
    | ID:e                          {:RESULT = new Simbolo(null, null, e.toString());:}
    | error:x ID:a IGUAL asignacion:e
    {:
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en el bloque de instrucciones. Se a recuperado hasta el token: << Identificador >>."); 
        if(e != null) {        
            RESULT = new Simbolo(((Simbolo) e).getTipo(), ((Simbolo) e), a);
        } else { 
            RESULT = e;
        }
    :}
    | ID:a error:x IGUAL asignacion:e
    {:
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion asignacion de valores. Se recupero haste el token: << = >>."); 
        if(e != null) {        
            RESULT = new Simbolo(((Simbolo) e).getTipo(), ((Simbolo) e), a);
        } else { 
            RESULT = e;
        }
    :}
    | error:x ID:e                          
    {:
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en el bloque de instrucciones. Se a recuperado hasta el token: << Identificador >>."); 
        RESULT = new Simbolo(null, null, e.toString());
    :}
    | error:e
    {:
        parser.msJP.errorSintax(eleft, eright, e, "Error sintactico en la declaracion de variables, no se esperaba el token indicado. Se esperaba la estructura << ID = ( Operacion Aritmetica | Entero | Decimal | Caracter) | ID >>");
    :}
;

lista_ids ::=
    lista_id_valores:a lista_id_p:e         {:RESULT = parser.msJP.lista(a, e);:}
    | lista_id_valores:e                    {:RESULT = e;:} 
;

lista_id_p ::=
    COMA lista_id_valores:e                     {:RESULT = e;:}
    | lista_id_p:a COMA lista_id_valores:e      {:RESULT = parser.msJP.lista(a, e);:}
;

/***************************** Asignacion de Variables ********************************/

asignacion_var ::= 
    ID:a IGUAL asignacion:e            
    {:
        if(e != null) {      
            parser.msJP.asignacionVariables(new Simbolo(((Simbolo) e).getTipo(), ((Simbolo) e), a), aleft, aright);
        } else { 
            parser.msJP.asignacionVariables(null, aleft, aright);
        }
    :}
    | arreglo:a IGUAL asignacion:e
    {:
        if(e != null) { 
            parser.msJP.asignacionArreglos(a, aleft, aright, (Simbolo) e);
        } else { 
            parser.msJP.asignacionArreglos(null, aleft, aright, null);
        }
    :}
;

asignacion ::=
    dato:e                  {:RESULT = e;:}
    | llamada_fp:a          
    {: 
        if(a != null) {
            Tipo tipo = ((Simbolo) a).getTipoFuncion();
            if(tipo != null && tipo.getNombre().equals("Funcion")) {
                RESULT = a;
            } else {
                parser.msJP.errorSemantico(aleft, aright, "Asignacion", "Error, la instancia es un metodo y no puede asignarse.");
                RESULT = null;
            }
        }
    :}
    | error:x llamada_fp:a          
    {: 
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion llamada a un procedimiento. Se recupero hasta el token: << Identificador >>."); 
        if(a != null) {
            Tipo tipo = ((Simbolo) a).getTipoFuncion();
            if(tipo != null && tipo.getNombre().equals("Funcion")) {
                RESULT = a;
            } else {
                parser.msJP.errorSemantico(aleft, aright, "Asignacion", "Error, la instancia es un metodo y no puede asignarse.");
                RESULT = null;
            }
        }
    :}
;

/************************************* Arreglos ****************************************/

arreglo_const ::=
    ID:a dimension_const:e              
    {:
        if(e == null) {
            RESULT = null;
        } else {
            RESULT = new Simbolo(null, e, a);
        }   
    :}
    | error:x arreglo_const:e
    {:parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion de arreglo. Se recupero hasta el token: << Identificador >>.");  RESULT = e;:}
;

dimension_const ::=
    LLAVE_A op_aritmetica_const:e LLAVE_C                               {:RESULT = e;:}
    | LLAVE_A op_aritmetica_const:e LLAVE_C dimension_const:a         {:RESULT = parser.ma.listaDimensiones(a, e, eleft, eright);:}
    | error:x dimension_const
    {:parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion de arreglo. Se esperaba la estructura: << [ ID | Entero | Decimal | Operacion Aritmetica ]... >>, no el token indicado."); :}
    | error:e
    {:parser.msJP.errorSintax(eleft, eright, e, "Error sintactico en la instruccion en la declaracion de arreglos. Se esperaba la estructura: << [ ID | Entero | Decimal | Operacion Aritmetica ]... >>.");:}
;

arreglo ::=
    ID:a dimension:e                  
    {:
        if(e == null) {
            RESULT = null;
        } else {
            RESULT = new Simbolo(null, e, a);
        }   
    :} 
;   

dimension ::=
    LLAVE_A operaciones_aritmeticas:e LLAVE_C                       
    {:
        if(e != null) {
            if (((Simbolo) e).getTipo() != Constantes.CHAR_VAR_PJ && 
                Constantes.FLOAT_VAR_PJ.isFatherOf(((Simbolo) e).getTipo().getSymbol())) {  
                RESULT = ((Simbolo) e);
            } else {
                parser.msJP.errorSemantico(eleft, eright, "Arreglo", "Error, comprobacion de tipos en la dimension de arreglos.");
            }
        } else { 
            RESULT = null;
        }
    :}
    | LLAVE_A operaciones_aritmeticas:e LLAVE_C dimension:a         {:RESULT = parser.ma.listaDimensiones(a, e, eleft, eright);:}
;

/****************************** estructuras if ****************************************/

ii ::=
    IF ppa condicional:e PARENTESIS_C CORCHETE_A
    {:parser.mc.escribirEtiquetasInicio(false); parser.mc.escribirEtiquetaFin(); parser.mc.nuevoAnalisisBoolean(); RESULT = e;:}
    | IF ppa:x PARENTESIS_A condicional:e PARENTESIS_C CORCHETE_A
    {:
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion if. Se recupero hasta el token: << ( >>."); 
        parser.mc.escribirEtiquetasInicio(false); parser.mc.escribirEtiquetaFin(); parser.mc.nuevoAnalisisBoolean(); RESULT = e;
    :}
    | IF ppa condicional:e PARENTESIS_C error:x CORCHETE_A
    {:
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion if. Se esperaba el token: << { >>, no el token indicado."); 
        parser.mc.escribirEtiquetasInicio(false); parser.mc.escribirEtiquetaFin(); parser.mc.nuevoAnalisisBoolean(); RESULT = e;
    :}
    | error:x IF ppa condicional:e PARENTESIS_C CORCHETE_A
    {:
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en el bloque de instrucciones. Se a recuperado hasta el token: << if >>."); 
        parser.mc.escribirEtiquetasInicio(false); parser.mc.escribirEtiquetaFin(); parser.mc.nuevoAnalisisBoolean(); RESULT = e;
    :}
    
;
  
ie ::=
    ELSE_IF ppa condicional:e PARENTESIS_C CORCHETE_A
    {:parser.mc.escribirEtiquetasInicio(false); parser.mc.escribirEtiquetaFin(); parser.mc.nuevoAnalisisBoolean(); RESULT = e;:}
    | ELSE_IF ppa:x PARENTESIS_A condicional:e PARENTESIS_C CORCHETE_A
    {:  
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion else if. Se esperaba el token: << ( >>, no el token indicado."); 
        parser.mc.escribirEtiquetasInicio(false); parser.mc.escribirEtiquetaFin(); parser.mc.nuevoAnalisisBoolean(); RESULT = e;
    :}
    | ELSE_IF ppa PARENTESIS_A condicional:e PARENTESIS_C error:x CORCHETE_A
    {:
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion else if. Se esperaba el token: << { >>, no el token indicado."); 
        parser.mc.escribirEtiquetasInicio(false); parser.mc.escribirEtiquetaFin(); parser.mc.nuevoAnalisisBoolean(); RESULT = e;
    :}
;

ee ::=
    ELSE CORCHETE_A
    {:parser.mc.escribirEtiquetasInicio(false); parser.mc.escribirEtiquetaFin(); parser.mc.nuevoAnalisisBoolean(); :}
    | ELSE error:x CORCHETE_A
    {:
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion else. Se esperaba el token: << { >>, no el token indicado."); 
        parser.mc.escribirEtiquetasInicio(false); parser.mc.escribirEtiquetaFin(); parser.mc.nuevoAnalisisBoolean(); 
    :}
;

/************************************ if **********************************************/

if ::=
    ii:a
        estructuras_p:e
    CORCHETE_C                                                      
    {:RESULT = parser.msJP.crearEstructuraCondicional(e, a, 1); parser.mc.imprimirResto();:}
;

/*********************************** else *********************************************/

else ::=
    ee
        estructuras_p:e
    CORCHETE_C                                                      
    {:RESULT = parser.msJP.crearEstructuraCondicional(e, false, 3); parser.mc.imprimirResto();:}   
;

/********************************* else if ********************************************/

else_if ::=
    ie:a
        estructuras_p:e
    CORCHETE_C                                                      
    {:RESULT = parser.msJP.crearEstructuraCondicional(e, a, 2); parser.mc.imprimirResto();:}
;

else_if_p ::=
    else_if:e else_if_p:a                   {:RESULT = parser.msJP.lista(a, e);:}
    | 
;

/************************** estructura condicional if *********************************/

estructura_if ::=
    if:a else_if_p:e                        {:RESULT = parser.msJP.construirCondicionalIf(a, e, null);:}
    | if:a else_if_p:e else:i               {:RESULT = parser.msJP.construirCondicionalIf(a, e, i);:}
;

/********************************** switch ********************************************/

switch_p ::=
    SWITCH ppa dato:a PARENTESIS_C CORCHETE_A      {:parser.mc.setEtiquetaSwitch((Simbolo) a); RESULT = a;:}
    | SWITCH ppa dato:a error:x PARENTESIS_C CORCHETE_A      
    {:
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion switch. Se esperaba el token: << ) >>, no el token indicado."); 
        parser.mc.setEtiquetaSwitch((Simbolo) a); RESULT = a;
    :}
    | SWITCH ppa dato:a error:x CORCHETE_A      
    {:
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion switch. Se esperaba el token: << ) >>, no el token indicado."); 
        parser.mc.setEtiquetaSwitch((Simbolo) a); RESULT = a;
    :}
    | error:x SWITCH ppa dato:a PARENTESIS_C CORCHETE_A      
    {:
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en el bloque de instrucciones. Se a recuperado hasta el token: << switch >>."); 
        parser.mc.setEtiquetaSwitch((Simbolo) a); RESULT = a;
    :}
;

switch ::=
    switch_p:a
        cantidad_casos:e 
        caso_default:i 
    CORCHETE_C                                              
    {:
        RESULT = parser.msJP.crearCase(e, i, a, eleft, eright);
        parser.mc.etqFinTurno();
    :}
;

caso_default ::=
    DEFAULT DOS_PUNTOS
        estructuras_p:a
        BREAK PUNTO_COMA                
    {:  
        parser.mc.etiquetaGoto();
        RESULT = parser.msJP.crearEstructuraCases(null, a, aleft, aright, true);
    :}
    | DEFAULT error:x DOS_PUNTOS
        estructuras_p:a
        BREAK PUNTO_COMA                
    {:  
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion de la estructura switch. Se recupero hasta el token: << : >>, no el token indicado."); 
        parser.mc.etiquetaGoto();
        RESULT = parser.msJP.crearEstructuraCases(null, a, aleft, aright, true);
    :}
    | DEFAULT error:x
        estructuras_p:a
        BREAK PUNTO_COMA                
    {:  
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion de la estructura switch. Se recupero hasta el token: << : >>, no el token indicado."); 
        parser.mc.etiquetaGoto();
        RESULT = parser.msJP.crearEstructuraCases(null, a, aleft, aright, true);
    :}
    |   {:parser.mc.etiquetaGoto();:}
;

cantidad_casos ::=
    caso:e                      {:RESULT = e;:} 
    | caso:e  
    cantidad_casos:a            {:RESULT = parser.msJP.lista(a, e);:} 
;

caso_p ::= 
    CASE dato:a DOS_PUNTOS           {:parser.mc.condicional((Simbolo) a); RESULT = a;:}
    | CASE error:x dato:a DOS_PUNTOS           
    {:      
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion de la estructura switch - case. Se esperaba el token: << : >>, no el token indicado."); 
        parser.mc.condicional((Simbolo) a); RESULT = a;
    :}
;

caso ::= 
    caso_p:a
        estructuras_p:e
        BREAK PUNTO_COMA
    {:
        RESULT = parser.msJP.crearEstructuraCases(a, e, aleft, aright, false);
        parser.mc.finCadaCaso();
    :}
    | caso_p:a
        estructuras_p:e
        BREAK error:x PUNTO_COMA
    {:
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion de la estructura switch - case. Se recupero hasta el token: << ; >>, no el token indicado."); 
        RESULT = parser.msJP.crearEstructuraCases(a, e, aleft, aright, false);
        parser.mc.finCadaCaso();
    :}
    | caso_p:a
        estructuras_p:e
    {:
        RESULT = parser.msJP.crearEstructuraCases(a, e, aleft, aright, false);
        parser.mc.finCadaCaso();
    :}
;

/************************************* While ******************************************/

while_n ::=
    WHILE                               {:RESULT = new While(parser.mc.addWhile(), null);:}
    | error:x WHILE                               
    {:
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico el bloque de instrucciones. Se a recuperado hasta el token: << while >>."); 
        RESULT = new While(parser.mc.addWhile(), null);
    :}
;

while_p ::=
    while_n:w ppa condicional:a PARENTESIS_C CORCHETE_A
    {:
        parser.mc.nuevoAnalisisBoolean();
        parser.mc.escribirEtiquetasInicio(false);
        parser.mc.addEtiquetasEstructuras();
        ((While) w).setA(a);
        RESULT = w;
    :}
    | while_n:w ppa:x PARENTESIS_A condicional:a PARENTESIS_C CORCHETE_A
    {:
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion de la estructura while. Se recupero hasta el token: << ( >>, no el token indicado."); 
        parser.mc.nuevoAnalisisBoolean();
        parser.mc.escribirEtiquetasInicio(false);
        parser.mc.addEtiquetasEstructuras();
        ((While) w).setA(a);
        RESULT = w;
    :}
    | while_n:w ppa condicional:a PARENTESIS_C error:x CORCHETE_A
    {:
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion de la estructura while. Se recupero hasta el token: << { >>, no el token indicado."); 
        parser.mc.nuevoAnalisisBoolean();
        parser.mc.escribirEtiquetasInicio(false);
        parser.mc.addEtiquetasEstructuras();
        ((While) w).setA(a);
        RESULT = w;
    :}
;

while ::= 
    while_p:a
        estructuras_p:e
    CORCHETE_C                      
    {:
        RESULT = parser.msJP.contruirEstructuraCiloDW(e, ((While) a).getA(), 1);
        parser.mc.finWhile(((While) a).getIdEtiqueta());
        parser.mc.imprimirResto();
    :}
;

/*********************************** Do While *****************************************/

do_while_p ::=
    DO CORCHETE_A
    {:
        RESULT = parser.mc.addDoWhile();
        parser.mc.nuevoAnalisisBoolean();
    :}
    | error:x DO CORCHETE_A
    {:
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en el bloque de instrucciones. Se a recuperado hasta el token: << do >>."); 
        RESULT = parser.mc.addDoWhile();
        parser.mc.nuevoAnalisisBoolean();
    :}
;

do_while ::=
    do_while_p:i
        estructuras_p:e
    CORCHETE_C WHILE ppa condicional:a PARENTESIS_C PUNTO_COMA  
    {:
        RESULT = parser.msJP.contruirEstructuraCiloDW(e, a, 2);
        parser.mc.escribirEtiquetasInicio(false);
        parser.mc.escribirEtiquetaFin();
        parser.mc.finDoWhile((String) i);
        parser.mc.imprimirResto();
    :}
    | do_while_p:i
        estructuras_p:e
    CORCHETE_C WHILE ppa condicional:a PARENTESIS_C error:x PUNTO_COMA  
    {:
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion de la estructura do while. Se recupero hasta el token: << ; >>."); 
        RESULT = parser.msJP.contruirEstructuraCiloDW(e, a, 2);
        parser.mc.escribirEtiquetasInicio(false);
        parser.mc.escribirEtiquetaFin();
        parser.mc.finDoWhile((String) i);
        parser.mc.imprimirResto();
    :}
    | do_while_p:i
        estructuras_p:e
    CORCHETE_C WHILE ppa condicional:a PARENTESIS_C error:x
    {:
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion de la estructura do while. Se esperaba el token: << ; >>, no el token indicado."); 
        RESULT = parser.msJP.contruirEstructuraCiloDW(e, a, 2);
        parser.mc.escribirEtiquetasInicio(false);
        parser.mc.escribirEtiquetaFin();
        parser.mc.finDoWhile((String) i);
        parser.mc.imprimirResto();
    :}
    | do_while_p:i
        estructuras_p:e
    CORCHETE_C error:x WHILE ppa condicional:a PARENTESIS_C PUNTO_COMA  
    {:
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion de la estructura do while. Se recupero hasta el token: << while >>."); 
        RESULT = parser.msJP.contruirEstructuraCiloDW(e, a, 2);
        parser.mc.escribirEtiquetasInicio(false);
        parser.mc.escribirEtiquetaFin();
        parser.mc.finDoWhile((String) i);
        parser.mc.imprimirResto();
    :}
    | do_while_p:i
        estructuras_p:e
    CORCHETE_C error:x ppa condicional:a PARENTESIS_C PUNTO_COMA  
    {:
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion de la estructura do while. Se esperaba el token: << while >>, no el token indicado."); 
        RESULT = parser.msJP.contruirEstructuraCiloDW(e, a, 2);
        parser.mc.escribirEtiquetasInicio(false);
        parser.mc.escribirEtiquetaFin();
        parser.mc.finDoWhile((String) i);
        parser.mc.imprimirResto();
    :}
;

/************************************* For ********************************************/

for_var ::=
    FOR ppa var:a PUNTO_COMA           {:RESULT = new For(a, parser.mc.addForJPV((Simbolo) a));:}
    | error:x FOR ppa var:a PUNTO_COMA           
    {:
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en el bloque de instrucciones. Se a recuperado hasta el token: << for >>."); 
        RESULT = new For(a, parser.mc.addForJPV((Simbolo) a));
    :}
    | FOR ppa var:a error:x PUNTO_COMA           
    {:
        RESULT = new For(a, parser.mc.addForJPV((Simbolo) a));
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion de la estructura for. Se recupero hasta el token: << ; >>."); 
    :}
    | FOR ppa var:a error:x                      
    {:
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion de la estructura for. Se esperaba el token: << ; >>, no el token indicado."); 
        RESULT = new For(a, parser.mc.addForJPV((Simbolo) a));
    :}
;

for_condicional ::=
    for_var:a condicional:e PUNTO_COMA 
    {: 
        ((For) a).setE(e);
        parser.mc.etiqueta();
        RESULT = a;
    :}
;

for_asignacion ::=
    for_condicional:a operaciones_asignacion:i PARENTESIS_C CORCHETE_A
    {:
        For f = (For) a;
        f.setI(i);
        RESULT = parser.mc.addForJPA(f, (Simbolo) i);
    :}
    | for_condicional:a operaciones_asignacion:i error:x PARENTESIS_C CORCHETE_A
    {:
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion de la estructura for. Se recupero hasta el token: << ) >>."); 
        For f = (For) a;
        f.setI(i);
        RESULT = parser.mc.addForJPA(f, (Simbolo) i);
    :}
    | for_condicional:a operaciones_asignacion:i PARENTESIS_C error:x CORCHETE_A
    {:
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion de la estructura for. Se recupero hasta el token: << { >>."); 
        For f = (For) a;
        f.setI(i);
        RESULT = parser.mc.addForJPA(f, (Simbolo) i);
    :}
    | for_condicional:a operaciones_asignacion:i error:x CORCHETE_A
    {:
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion de la estructura for. Se esperaba el token: << ) >>, no el token indicado."); 
        For f = (For) a;
        f.setI(i);
        RESULT = parser.mc.addForJPA(f, (Simbolo) i);
    :}
;

for ::=
    for_asignacion:a
        estructuras_p:o
    CORCHETE_C
    {:
        if(((For) a).getA() != null && ((For) a).getE() != null && ((For) a).getI() != null) {
            RESULT = parser.msJP.contruirEstructuraCiloDW(o, true, 3);
        } else {
            RESULT = parser.msJP.contruirEstructuraCiloDW(o, null, 3);;
        }
        parser.mc.actualizar();
        parser.mc.imprimirResto();
        parser.msJP.removerCualquierSimbolo(((For) a).getA());
    :}
;

var ::=
    ID:a IGUAL operaciones_aritmeticas:e            {:RESULT = parser.msJP.comprobarAsignacionFor(e, a, aleft, aright, null);:}
    | tipo_dato:a ID:e IGUAL dato:i                 {:RESULT = parser.msJP.comprobarAsignacionFor(i, e, eleft, eright, (Tipo) a);:}    
    | error:e
    {:parser.msJP.errorSintax(eleft, eright, e, "Error sintactico en la declaracion de datos, de la instruccion for. Se esperaba el token: << Identificador >>.");:}
;

/************************** Operaciones de Asignacion *********************************/

operaciones_asignacion ::=
    ID:a IGUAL operaciones_aritmeticas:e            
     {:
        Simbolo nuevo;
        if(e != null) {
            nuevo = new Simbolo(((Simbolo) e).getTipo(), e, a);
        } else { 
            nuevo = null;
        }
        RESULT = nuevo;
    :}
    | ID:a MAS_MAS                  {:RESULT = (new Simbolo(Constantes.INT_VAR_PJ, -1, a));:}
    | ID:a MENOS_MENOS              {:RESULT = (new Simbolo(Constantes.INT_VAR_PJ, -2, a));:}
    | error:x ID:a IGUAL operaciones_aritmeticas:e            
     {:
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion de incremento en la estructura for. Se recupero hasta el token: << ID >>."); 
        Simbolo nuevo;
        if(e != null) {
            nuevo = new Simbolo(((Simbolo) e).getTipo(), e, a);
        } else { 
            nuevo = null;
        }
        RESULT = nuevo;
    :}
    | ID:a error:x operaciones_aritmeticas:e            
     {:
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion incremento de la estructura for. Se recupero hasta el token: << = >>."); 
        Simbolo nuevo;
        if(e != null) {
            nuevo = new Simbolo(((Simbolo) e).getTipo(), e, a);
        } else { 
            nuevo = null;
        }
        RESULT = nuevo;
    :}
    | error:x ID:a MAS_MAS                  
    {:
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion incremento de la estructura for. Se recupero hasta el token: << ID >>."); 
        RESULT = (new Simbolo(Constantes.INT_VAR_PJ, -1, a));
    :}
    | error:x ID:a MENOS_MENOS              
    {:
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion incremento de la estructura for. Se recupero hasta el token: << ID >>, no el token indicado."); 
        RESULT = (new Simbolo(Constantes.INT_VAR_PJ, -2, a));
    :}
    | error:e
    {:parser.msJP.errorSintax(eleft, eright, e, "Error sintactico en la asignacion de incremento en la estructura for. Se espera la estructura: << ID = (Entero | Decimal | Operacion Aritmetica) | ID++ | ID-->>");:}
;

/********************************* Parametros *****************************************/

parametros ::=
    operaciones_aritmeticas:e parametros_p:a                
    {:
        List<Simbolo> lista = new ArrayList<>();
        if (e != null) {
            if (e instanceof Simbolo) { 
                lista.add((Simbolo) e);
            }
        }
        if (a != null) {
            if (a instanceof Simbolo) { 
                lista.add((Simbolo) a);
            } else  {   
                lista.addAll((List<Simbolo>) a);
            }
        }
        RESULT = lista;
    :}
    | operaciones_aritmeticas:e                             {:RESULT = parser.msJP.lista(null, e);:} 
    | 
;

parametros_p ::=
    COMA operaciones_aritmeticas:e                              {:RESULT = parser.msJP.lista(null, e);:} 
    | parametros_p:a COMA operaciones_aritmeticas:e             {:RESULT = parser.msJP.lista(a, e);:}
    | error:e
    {: 
        RESULT = new ArrayList<>();
        parser.msJP.errorSintax(eleft, eright, e, "Error sintactico en la instruccion de llamada a una funcion, no se esperaba el token indicado para el reconocimiento de parametros. Se esperaba: << Param | Param, Param ... >>");
    :}
;

/************************ Llamado de Funciones - Metodos *******************************/

llamada_fp ::=
    PY PUNTO ID:a ppa parametros:e PARENTESIS_C                    {:RESULT = parser.mi.searchSimbolo(null, a, 3, aleft, aright, e, "");:}
    | VB PUNTO ID:a ppa parametros:e PARENTESIS_C                  {:RESULT = parser.mi.searchSimbolo(null, a, 1, aleft, aright, e, "");:}
    | JAVA PUNTO ID:a PUNTO ID:e PARENTESIS_A parametros:i PARENTESIS_C     {:RESULT = parser.mi.buscarInstancia(e, a, aleft, aright, i, "");:}
;

/****************************** Instancia de Clses ************************************/

instancia_constructor ::=
    JAVA PUNTO ID:a instancia_p:e           
    {:
        RESULT = parser.msJP.agregarInstancias((List<Simbolo>) e, a, aleft, aright);
    :}
;

instancia_p ::=
    i_ins:e                                 {:RESULT = parser.msJP.lista(null, e);:}
    | i_ins:e instancia_pp:a                {:RESULT = parser.msJP.lista(a, e);:}
;

instancia_pp ::=
    COMA i_ins:a                    {:RESULT = parser.msJP.lista(null, a);:}
    | COMA i_ins:e instancia_pp:a   {:RESULT = parser.msJP.lista(a, e);:}
;

i_ins ::=
    ID:e                                {:RESULT =  new Simbolo(null, new ArrayList<>(), e);:}
    | ID:e PARENTESIS_A PARENTESIS_C    {:RESULT =  new Simbolo(null, new ArrayList<>(), e);:}
    | ID:e PARENTESIS_A parametros:a PARENTESIS_C       
    {:
        if(a != null) {
            RESULT =  new Simbolo(null, a, e);
        } 
    :}
    | error:x ID:e                                {:RESULT =  new Simbolo(null, new ArrayList<>(), e);:}
    | error:x ID:e PARENTESIS_A PARENTESIS_C    
    {:
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion instancia de objetos. Se esperaba el token: << ID >>, no el token indicado."); 
        RESULT =  new Simbolo(null, new ArrayList<>(), e);
    :}
    | error:x ID:e PARENTESIS_A parametros:a PARENTESIS_C       
    {:
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion instancia de objetos. Se esperaba el token: << ID >>, no el token indicado."); 
        if(a != null) {
            RESULT =  new Simbolo(null, a, e);
        } 
    :}
    | error:e
    {:parser.msJP.errorSintax(eleft, eright, e, "Error sintactico en la declaracion de un objeto, no se esperaba el token indicado. Estructura esperada: << ID | ID ( params ) | ID () >>");:}
;

/*********************************** Scanf ********************************************/

scanf ::=
    SCANF ppa COMILLAS texto_cadena:i tipo_dato_almacenar:a COMILLAS COMA AMPERSAND ID:e PARENTESIS_C
    {:
        parser.mc.imprimir(new Simbolo(null, "\"" + i + "\""));
        Simbolo s = parser.msJP.metodoBuscarID(e, eleft, eright);
        if(s != null) {
            parser.mc.imprimirScanf((int) a, s);
        } 
        RESULT = s;   
    :}
    | SCANF ppa COMILLAS tipo_dato_almacenar:a COMILLAS COMA AMPERSAND ID:e PARENTESIS_C
    {:
        Simbolo s = parser.msJP.metodoBuscarID(e, eleft, eright);
        if(s != null) {
            parser.mc.imprimirScanf((int)a, s);
        } 
        RESULT = s;   
    :}
    | SCANF ppa COMILLAS texto_cadena:i tipo_dato_almacenar:a COMILLAS COMA ID:e PARENTESIS_C
    {:
        parser.mc.imprimir(new Simbolo(null, "\"" + i + "\""));
        Simbolo s = parser.msJP.metodoBuscarID(e, eleft, eright);
        if(s != null) {
            parser.mc.imprimirScanf((int)a, s);
        } 
        RESULT = s;   
    :}
    | SCANF ppa COMILLAS tipo_dato_almacenar:a COMILLAS COMA ID:e PARENTESIS_C
    {:
        Simbolo s = parser.msJP.metodoBuscarID(e, eleft, eright);
        if(s != null) {
            parser.mc.imprimirScanf((int)a, s);
        } 
        RESULT = s;   
    :}
    | error:x SCANF ppa COMILLAS texto_cadena:i tipo_dato_almacenar:a COMILLAS COMA AMPERSAND ID:e PARENTESIS_C
    {:
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion scanf. Se esperaba el token: << scanf >>, no el token indicado."); 
        parser.mc.imprimir(new Simbolo(null, "\"" + i + "\""));
        Simbolo s = parser.msJP.metodoBuscarID(e, eleft, eright);
        if(s != null) {
            parser.mc.imprimirScanf((int)a, s);
        } 
        RESULT = s;   
    :}
    | error:x SCANF ppa COMILLAS tipo_dato_almacenar:a COMILLAS COMA AMPERSAND ID:e PARENTESIS_C
    {:
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion scanf. Se esperaba el token: << scanf >>, no el token indicado."); 
        Simbolo s = parser.msJP.metodoBuscarID(e, eleft, eright);
        if(s != null) {
            parser.mc.imprimirScanf((int)a, s);
        } 
        RESULT = s;   
    :}
    | error:x SCANF ppa COMILLAS texto_cadena:i tipo_dato_almacenar:a COMILLAS COMA ID:e PARENTESIS_C
    {:
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion scanf. Se esperaba el token: << scanf >>, no el token indicado."); 
        parser.mc.imprimir(new Simbolo(null, "\"" + i + "\""));
        Simbolo s = parser.msJP.metodoBuscarID(e, eleft, eright);
        if(s != null) {
            parser.mc.imprimirScanf((int)a, s);
        } 
        RESULT = s;   
    :}
    | error:x SCANF ppa COMILLAS tipo_dato_almacenar:a COMILLAS COMA ID:e PARENTESIS_C
    {:
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion scanf. Se esperaba el token: << scanf >>, no el token indicado."); 
        Simbolo s = parser.msJP.metodoBuscarID(e, eleft, eright);
        if(s != null) {
            parser.mc.imprimirScanf((int)a, s);
        } 
        RESULT = s;   
    :}
;

texto_p ::=
    texto_p:a txt:e         {:RESULT = parser.msJP.listaNumeros(a, e);:}
    | txt:a                 {:RESULT = a;:}
;

txt ::=
    texto_cadena:a tipo_dato_almacenar:e                            {:RESULT = new SimboloPrint((int )e, a.toString());:}
    | tipo_dato_almacenar:e                                         {:RESULT = new SimboloPrint((int )e, null);:}
;

tipo_dato_almacenar ::=
    LEER_INT            {:RESULT = 1;:}
    | LEER_CHAR         {:RESULT = 3;:}
    | LEER_FLOAT        {:RESULT = 2;:}
;

/*********************************** Printf ********************************************/

printf ::=
    PRINTF PARENTESIS_A COMILLAS texto_p:a COMILLAS COMA valores:e PARENTESIS_C 
    {:
        RESULT = parser.msJP.comprobarPrint(a, e, eleft, eright);
    :}
    | PRINTF PARENTESIS_A COMILLAS texto_cadena:e COMILLAS PARENTESIS_C 
    {:
        parser.mc.imprimir(new Simbolo(null, "\"" + e + "\""));
    :}
    | PRINTF PARENTESIS_A COMILLAS COMILLAS PARENTESIS_C 
    {:
        parser.mc.imprimir(new Simbolo(null, "\"\""));
    :}
;

valores ::=
    asignacion:e                            {:RESULT = e;:}
    | asignacion:e vp:a                     {:RESULT = parser.msJP.listaPrintfVal(a, e);:}
    | AMPERSAND asignacion:e                {:RESULT = e;:}
    | AMPERSAND asignacion:e vp:a           {:RESULT = parser.msJP.listaPrintfVal(a, e);:}
;

vp ::=
    COMA ID:e                       {:RESULT = parser.msJP.metodoBuscarID(e, eleft, eright);:}
    | vp:a COMA ID:e                {:RESULT = parser.msJP.listaPrintf(a, parser.msJP.metodoBuscarID(e, eleft, eright));:}    
    | COMA error:x ID:e                       
    {:
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion id, de la estructura printf. Se esperaba el token: << ID | &ID >>, no el token indicado."); 
        RESULT = parser.msJP.metodoBuscarID(e, eleft, eright);
    :}
    | vp:a COMA error:x ID:e                
    {:
        RESULT = parser.msJP.listaPrintf(a, parser.msJP.metodoBuscarID(e, eleft, eright));
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion id, de la estructura printf. Se esperaba el token: << ID | &ID >>, no el token indicado."); 
    :}    
    | COMA AMPERSAND ID:e           {:RESULT = parser.msJP.metodoBuscarID(e, eleft, eright);:}
    | vp:a COMA AMPERSAND ID:e      {:RESULT = parser.msJP.listaPrintf(a, parser.msJP.metodoBuscarID(e, eleft, eright));:}    
    | error:e
    {:parser.msJP.errorSintax(eleft, eright, e, "Error sintactico, en las intrucciones de variables print, no se esperaba el token indicado. Se esperaba el token: << ID | &ID >>");:}
    | COMA error:x
    {:parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion id, de la estructura printf. Se esperaba el token: << ID | &ID >>, no el token indicado."); :}
;

/*********************************  Estructura ******************************************/

estructuras ::=
    scanf PUNTO_COMA                                {:/* Ignore */:}
    | while:e                                       {:RESULT = e;:}
    | do_while:e                                    {:RESULT = e;:}
    | for:e                                         {:RESULT = e;:}
    | switch:e                                      {:RESULT = e;:}
    | asignacion_var PUNTO_COMA                     {:/* Ignore */:}
    | getch                                         {:/* Ignore */:}
    | error:x CLRSCR PARENTESIS_A PARENTESIS_C PUNTO_COMA   
    {:parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en el bloque de instrucciones clrsrc. Se esperaba el token: << clrsrc >>"); parser.mc.addCLRSCR();:}
    | CLRSCR PARENTESIS_A PARENTESIS_C PUNTO_COMA   {:parser.mc.addCLRSCR();:}
    | CLRSCR PARENTESIS_A PARENTESIS_C error:x PUNTO_COMA   
    {:parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en el bloque de instrucciones clrsrc. Se esperaba el token: << ; >>"); parser.mc.addCLRSCR();:}
    | CLRSCR PARENTESIS_A PARENTESIS_C error:x        
    {:parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en el bloque de instrucciones clrsrc. Se esperaba el token: << ; >>"); parser.mc.addCLRSCR();:}
    | CLRSCR error:x PARENTESIS_C PUNTO_COMA   
    {:parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en el bloque de instrucciones clrsrc. Se esperaba el token: << ( >>"); parser.mc.addCLRSCR();:}
    | CLRSCR PARENTESIS_A error:x PUNTO_COMA        
    {:parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en el bloque de instrucciones clrsrc. Se esperaba el token: << ) >>"); parser.mc.addCLRSCR();:}
    | CLRSCR error:x PUNTO_COMA   
    {:parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en el bloque de instrucciones clrsrc. Se esperaba el token: << () >>"); parser.mc.addCLRSCR();:}
    | estructura_if:e                               {:RESULT = e;:}
    | declaracion_variables:e PUNTO_COMA            {:RESULT = e;:}
    | instancia_constructor PUNTO_COMA              {:/* Ignore */:}
    | printf PUNTO_COMA                             {:/* Ignore */:}
    | llamada_fp PUNTO_COMA                         
    {:
        Object as = null;
        parser.mc.addYRemovePuntero(as, false);
    :}
    | COMENTARIO                                    {:/* Ignore */:}
    | error:e PUNTO_COMA                   
    {:parser.msJP.errorSintax(eleft, eright, e, "Error en el bloque de instrucciones de la estructura, por favor revisa la entrada en la linea y columna indicada. \nSe esperaba: << Declaracion variable || Asignacion de variable || if || switch || while || do || scanf || printf >>, recuperado hasta: << ; >>");:}
    | error:e CORCHETE_C                    
    {:parser.msJP.errorSintax(eleft, eright, e, "Error en el bloque de instrucciones de la estructura, por favor revisa la entrada en la linea y columna indicada. \nSe esperaba: << Declaracion variable || Asignacion de variable || if || switch || while || do || scanf || printf >>, recuperado hasta: << } >>");:}
;

getch ::=
    GETCH ppa PARENTESIS_C PUNTO_COMA                          {:parser.mc.addGetch(null);:}
    | tipo_dato:t ID:a IGUAL GETCH ppa PARENTESIS_C PUNTO_COMA          
    {:
        if (!(((Tipo) t).equals(Constantes.FLOAT_VAR_PJ))) {
            Object resultado = parser.msJP.declararVariables(new Simbolo((Tipo) t, new Simbolo(null, null, (String) a)), aleft, aright);
            if (resultado != null) {
                if (resultado instanceof Simbolo) {
                    parser.mc.addGetch((Simbolo) resultado);
                }  
            } 
        }
    
    :}
    | ID:a IGUAL GETCH ppa PARENTESIS_C PUNTO_COMA    
    {:
        Simbolo s = parser.msJP.metodoBuscarID((String) a, aleft, aright);
        if (s != null) {
            parser.mc.addGetch(s);
        }
    :}
    | GETCH error:x PUNTO_COMA                          
    {:
        parser.msJP.errorSintax(xleft, xright, x, "Error en el bloque de instrucciones de la estructura getch, por favor revisa la entrada en la linea y columna indicada. Se esperaba el token: << ( >>");
        parser.mc.addGetch(null);
    :}
    | tipo_dato:t ID:a IGUAL GETCH error:x PUNTO_COMA          
    {:
        parser.msJP.errorSintax(xleft, xright, x, "Error en el bloque de instrucciones de la estructura getch, por favor revisa la entrada en la linea y columna indicada. Se esperaba el token: << ( >>");
        if (!(((Tipo) t).equals(Constantes.FLOAT_VAR_PJ))) {
            Object resultado = parser.msJP.declararVariables(new Simbolo((Tipo) t, new Simbolo(null, null, (String) a)), aleft, aright);
            if (resultado != null) {
                if (resultado instanceof Simbolo) {
                    parser.mc.addGetch((Simbolo) resultado);
                }  
            } 
        }
    
    :}
    | ID:a IGUAL GETCH error:x PUNTO_COMA    
    {:
        parser.msJP.errorSintax(xleft, xright, x, "Error en el bloque de instrucciones de la estructura getch, por favor revisa la entrada en la linea y columna indicada. Se esperaba el token: << ( >>");
        Simbolo s = parser.msJP.metodoBuscarID((String) a, aleft, aright);
        if (s != null) {
            parser.mc.addGetch(s);
        }
    :}
    | GETCH error:x                               
    {:
        parser.msJP.errorSintax(xleft, xright, x, "Error en el bloque de instrucciones de la estructura getch, por favor revisa la entrada en la linea y columna indicada. Se esperaba el token: << ( >>");
        parser.mc.addGetch(null);
    :}
    | tipo_dato:t ID:a IGUAL GETCH error:x
    {:
        parser.msJP.errorSintax(xleft, xright, x, "Error en el bloque de instrucciones de la estructura getch, por favor revisa la entrada en la linea y columna indicada. Se esperaba el token: << ( >>");
        if (!(((Tipo) t).equals(Constantes.FLOAT_VAR_PJ))) {
            Object resultado = parser.msJP.declararVariables(new Simbolo((Tipo) t, new Simbolo(null, null, (String) a)), aleft, aright);
            if (resultado != null) {
                if (resultado instanceof Simbolo) {
                    parser.mc.addGetch((Simbolo) resultado);
                }  
            } 
        }
    
    :}
    | ID:a IGUAL GETCH error:x 
    {:
        parser.msJP.errorSintax(xleft, xright, x, "Error en el bloque de instrucciones de la estructura getch, por favor revisa la entrada en la linea y columna indicada. Se esperaba el token: << ( >>");
        Simbolo s = parser.msJP.metodoBuscarID((String) a, aleft, aright);
        if (s != null) {
            parser.mc.addGetch(s);
        }
    :}
    | GETCH ppa PARENTESIS_C error:x                               
    {:
        parser.msJP.errorSintax(xleft, xright, x, "Error en el bloque de instrucciones de la estructura getch, por favor revisa la entrada en la linea y columna indicada. Se esperaba el token: << ; >>");
        parser.mc.addGetch(null);
    :}
    | tipo_dato:t ID:a IGUAL GETCH ppa PARENTESIS_C error:x
    {:
        parser.msJP.errorSintax(xleft, xright, x, "Error en el bloque de instrucciones de la estructura getch, por favor revisa la entrada en la linea y columna indicada. Se esperaba el token: << ; >>");
        if (!(((Tipo) t).equals(Constantes.FLOAT_VAR_PJ))) {
            Object resultado = parser.msJP.declararVariables(new Simbolo((Tipo) t, new Simbolo(null, null, (String) a)), aleft, aright);
            if (resultado != null) {
                if (resultado instanceof Simbolo) {
                    parser.mc.addGetch((Simbolo) resultado);
                }  
            } 
        }
    
    :}
    | ID:a IGUAL GETCH ppa PARENTESIS_C error:x 
    {:
        parser.msJP.errorSintax(xleft, xright, x, "Error en el bloque de instrucciones de la estructura getch, por favor revisa la entrada en la linea y columna indicada. Se esperaba el token: << ; >>");
        Simbolo s = parser.msJP.metodoBuscarID((String) a, aleft, aright);
        if (s != null) {
            parser.mc.addGetch(s);
        }
    :}
;

estructuras_p ::=
    estructuras estructuras_p  
    |
;

texto_cadena ::= 
    texto_cadena:a texto:e          
    {:
        if(a.toString() == "") {
            RESULT = new String(e.toString()); 
        } else {
            RESULT = new String(a.toString()  + " " + e.toString());
        }
    :}
    | texto:e                       {:RESULT = e;:}
;

texto ::= 
    VB:e                    {:RESULT = e;:}
    | PY:e                  {:RESULT = e;:}
    | JAVA:e                {:RESULT = e;:}
    | INT:e                 {:RESULT = e;:}
    | FLOAT:e               {:RESULT = e;:}
    | CHAR:e                {:RESULT = e;:}
    | GETCH:e               {:RESULT = e;:}
    | CLRSCR:e              {:RESULT = e;:}
    | MAS:e                 {:RESULT = e;:}
    | MENOS:e               {:RESULT = e;:}
    | POR:e                 {:RESULT = e;:}
    | DIV:e                 {:RESULT = e;:}
    | IGUAL:e               {:RESULT = e;:}
    | IGUAL_IGUAL:e         {:RESULT = e;:}
    | DIFERENTE:e           {:RESULT = e;:}
    | MENOR:e               {:RESULT = e;:}
    | MAYOR:e               {:RESULT = e;:}
    | MENOR_IGUAL:e         {:RESULT = e;:}
    | MAYOR_IGUAL:e         {:RESULT = e;:}
    | NOT:e                 {:RESULT = e;:}
    | AND:e                 {:RESULT = e;:}
    | OR:e                  {:RESULT = e;:}
    | SCANF:e               {:RESULT = e;:}
    | PROGRAMA:e            {:RESULT = e;:}
    | VOID:e                {:RESULT = e;:}
    | MAIN:e                {:RESULT = e;:}
    | CONST:e               {:RESULT = e;:}
    | IF:e                  {:RESULT = e;:}
    | ELSE_IF:e             {:RESULT = e;:}
    | ELSE:e                {:RESULT = e;:}
    | SWITCH:e              {:RESULT = e;:}
    | CASE:e                {:RESULT = e;:}
    | DEFAULT:e             {:RESULT = e;:}
    | BREAK:e               {:RESULT = e;:}
    | FOR:e                 {:RESULT = e;:}
    | WHILE:e               {:RESULT = e;:}
    | DO:e                  {:RESULT = e;:}
    | PRINTF:e              {:RESULT = e;:}
    | PUNTO:e               {:RESULT = e;:}
    | PUNTO_COMA:e          {:RESULT = e;:}
    | DOS_PUNTOS:e          {:RESULT = e;:}
    | LLAVE_A:e             {:RESULT = e;:}
    | LLAVE_C:e             {:RESULT = e;:}
    | CORCHETE_A:e          {:RESULT = e;:}
    | CORCHETE_C:e          {:RESULT = e;:}
    | PARENTESIS_A:e        {:RESULT = e;:}
    | PARENTESIS_C:e        {:RESULT = e;:}
    | NUMERO:e              {:RESULT = e;:}
    | REAL:e                {:RESULT = e;:}
    | ID:e                  {:RESULT = e;:}
    | ERROR:e               {:RESULT = e;:}
;