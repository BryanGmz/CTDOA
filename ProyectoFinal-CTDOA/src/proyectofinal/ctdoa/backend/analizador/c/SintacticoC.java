
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Nov 10 02:55:10 CST 2020
//----------------------------------------------------

package proyectofinal.ctdoa.backend.analizador.c;

import java_cup.runtime.*;
import java.io.StringReader;
import proyectofinal.ctdoa.backend.analizador.java.*;
import proyectofinal.ctdoa.backend.analizador.visual_basic.*;
import proyectofinal.ctdoa.backend.analizador.python.*;
import proyectofinal.ctdoa.backend.objetos.*;
import proyectofinal.ctdoa.backend.manejadores.*;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import proyectofinal.ctdoa.frontend.gui.FrameCTDOA;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Nov 10 02:55:10 CST 2020
  */
public class SintacticoC extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SintacticoC() {super();}

  /** Constructor which sets the default scanner. */
  public SintacticoC(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoC(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\371\000\002\002\004\000\002\122\002\000\002\002" +
    "\011\000\002\002\003\000\002\003\007\000\002\004\006" +
    "\000\002\007\003\000\002\010\003\000\002\011\003\000" +
    "\002\012\010\000\002\012\004\000\002\012\003\000\002" +
    "\012\005\000\002\012\004\000\002\012\004\000\002\013" +
    "\004\000\002\013\002\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\006\003\000\002\006\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\021\004\000\002\021\004\000\002\021" +
    "\004\000\002\021\004\000\002\021\004\000\002\022\004" +
    "\000\002\022\002\000\002\116\005\000\002\116\005\000" +
    "\002\116\005\000\002\116\005\000\002\116\005\000\002" +
    "\116\004\000\002\116\003\000\002\112\005\000\002\112" +
    "\003\000\002\112\003\000\002\112\003\000\002\024\005" +
    "\000\002\024\005\000\002\024\005\000\002\024\005\000" +
    "\002\024\005\000\002\024\004\000\002\024\003\000\002" +
    "\025\005\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\026\005\000\002\026\005" +
    "\000\002\026\005\000\002\026\005\000\002\026\005\000" +
    "\002\026\005\000\002\027\003\000\002\027\003\000\002" +
    "\030\003\000\002\030\004\000\002\031\003\000\002\032" +
    "\003\000\002\033\005\000\002\033\003\000\002\033\003" +
    "\000\002\034\005\000\002\034\003\000\002\035\006\000" +
    "\002\035\003\000\002\037\004\000\002\036\004\000\002" +
    "\036\004\000\002\040\005\000\002\040\003\000\002\040" +
    "\003\000\002\042\004\000\002\042\003\000\002\041\004" +
    "\000\002\041\005\000\002\043\005\000\002\043\005\000" +
    "\002\044\003\000\002\044\003\000\002\067\004\000\002" +
    "\070\005\000\002\070\006\000\002\070\003\000\002\045" +
    "\004\000\002\046\005\000\002\046\006\000\002\106\007" +
    "\000\002\107\007\000\002\110\004\000\002\051\005\000" +
    "\002\052\005\000\002\053\005\000\002\054\004\000\002" +
    "\054\002\000\002\055\004\000\002\055\005\000\002\017" +
    "\007\000\002\056\006\000\002\057\007\000\002\057\002" +
    "\000\002\060\003\000\002\060\004\000\002\111\005\000" +
    "\002\061\006\000\002\061\004\000\002\047\003\000\002" +
    "\050\007\000\002\062\005\000\002\020\004\000\002\063" +
    "\012\000\002\075\006\000\002\076\005\000\002\077\006" +
    "\000\002\064\005\000\002\065\005\000\002\065\006\000" +
    "\002\065\003\000\002\121\005\000\002\121\004\000\002" +
    "\121\004\000\002\121\003\000\002\071\004\000\002\071" +
    "\003\000\002\071\002\000\002\072\004\000\002\072\005" +
    "\000\002\072\003\000\002\073\010\000\002\073\010\000" +
    "\002\073\012\000\002\074\006\000\002\114\003\000\002" +
    "\114\004\000\002\115\004\000\002\115\005\000\002\113" +
    "\003\000\002\113\005\000\002\113\006\000\002\113\003" +
    "\000\002\100\014\000\002\100\013\000\002\100\013\000" +
    "\002\100\012\000\002\102\004\000\002\102\003\000\002" +
    "\005\004\000\002\005\003\000\002\103\003\000\002\103" +
    "\003\000\002\103\003\000\002\104\012\000\002\104\010" +
    "\000\002\104\007\000\002\105\002\000\002\105\003\000" +
    "\002\105\003\000\002\105\004\000\002\105\004\000\002" +
    "\105\005\000\002\066\004\000\002\066\004\000\002\066" +
    "\005\000\002\066\005\000\002\066\006\000\002\066\003" +
    "\000\002\117\004\000\002\117\003\000\002\117\003\000" +
    "\002\117\003\000\002\117\003\000\002\117\004\000\002" +
    "\117\003\000\002\117\006\000\002\117\003\000\002\117" +
    "\004\000\002\117\004\000\002\117\004\000\002\117\004" +
    "\000\002\117\003\000\002\117\004\000\002\117\004\000" +
    "\002\023\006\000\002\023\011\000\002\023\010\000\002" +
    "\120\004\000\002\120\002\000\002\015\004\000\002\015" +
    "\003\000\002\101\003\000\002\101\003\000\002\101\003" +
    "\000\002\101\003\000\002\101\003\000\002\101\003\000" +
    "\002\101\003\000\002\101\003\000\002\101\003\000\002" +
    "\101\003\000\002\101\003\000\002\101\003\000\002\101" +
    "\003\000\002\101\003\000\002\101\003\000\002\101\003" +
    "\000\002\101\003\000\002\101\003\000\002\101\003\000" +
    "\002\101\003\000\002\101\003\000\002\101\003\000\002" +
    "\101\003\000\002\101\003\000\002\101\003\000\002\101" +
    "\003\000\002\101\003\000\002\101\003\000\002\101\003" +
    "\000\002\101\003\000\002\101\003\000\002\101\003\000" +
    "\002\101\003\000\002\101\003\000\002\101\003\000\002" +
    "\101\003\000\002\101\003\000\002\101\003\000\002\101" +
    "\003\000\002\101\003\000\002\101\003\000\002\101\003" +
    "\000\002\101\003\000\002\101\003\000\002\101\003\000" +
    "\002\101\003\000\002\101\003\000\002\101\003\000\002" +
    "\101\003\000\002\101\003\000\002\101\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01c8\000\006\003\004\005\006\001\002\000\004\002" +
    "\ufffe\001\002\000\004\007\u01c7\001\002\000\004\007\ufffb" +
    "\001\002\000\024\003\uffe1\004\uffe1\011\014\022\uffe1\023" +
    "\uffe1\024\uffe1\025\uffe1\056\uffe1\060\uffe1\001\002\000\004" +
    "\002\011\001\002\000\004\002\001\001\002\000\022\003" +
    "\000\004\000\022\000\023\000\024\000\025\000\056\000" +
    "\060\000\001\002\000\024\003\uffe1\004\uffe1\011\014\022" +
    "\uffe1\023\uffe1\024\uffe1\025\uffe1\056\uffe1\060\uffe1\001\002" +
    "\000\014\012\017\013\021\014\020\015\015\016\016\001" +
    "\002\000\024\003\uffe7\004\uffe7\011\uffe7\022\uffe7\023\uffe7" +
    "\024\uffe7\025\uffe7\056\uffe7\060\uffe7\001\002\000\024\003" +
    "\uffe3\004\uffe3\011\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3" +
    "\056\uffe3\060\uffe3\001\002\000\024\003\uffe5\004\uffe5\011" +
    "\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5\056\uffe5\060\uffe5" +
    "\001\002\000\024\003\uffe4\004\uffe4\011\uffe4\022\uffe4\023" +
    "\uffe4\024\uffe4\025\uffe4\056\uffe4\060\uffe4\001\002\000\024" +
    "\003\uffe6\004\uffe6\011\uffe6\022\uffe6\023\uffe6\024\uffe6\025" +
    "\uffe6\056\uffe6\060\uffe6\001\002\000\022\003\uffe2\004\uffe2" +
    "\022\uffe2\023\uffe2\024\uffe2\025\uffe2\056\uffe2\060\uffe2\001" +
    "\002\000\022\003\031\004\034\022\025\023\024\024\035" +
    "\025\037\056\ufff1\060\036\001\002\000\006\003\uffeb\111" +
    "\uffeb\001\002\000\004\075\u01c4\001\002\000\004\077\u01c3" +
    "\001\002\000\004\077\u01c2\001\002\000\022\003\031\004" +
    "\034\022\025\023\024\024\035\025\037\056\ufff1\060\036" +
    "\001\002\000\010\003\uffe8\077\u01c0\111\uffe8\001\002\000" +
    "\006\003\u01a7\111\u01bd\001\002\000\004\056\074\001\002" +
    "\000\022\003\ufff6\004\ufff6\022\ufff6\023\ufff6\024\ufff6\025" +
    "\ufff6\056\ufff6\060\ufff6\001\002\000\006\003\uffea\111\uffea" +
    "\001\002\000\012\003\040\023\024\024\035\025\037\001" +
    "\002\000\006\003\uffe9\111\uffe9\001\002\000\004\111\uffe8" +
    "\001\002\000\004\111\042\001\002\000\004\035\043\001" +
    "\002\000\016\017\054\027\044\105\052\107\047\110\051" +
    "\111\050\001\002\000\012\105\052\107\047\110\051\111" +
    "\050\001\002\000\022\026\uffda\027\uffda\030\uffda\031\uffda" +
    "\032\uffda\077\uffda\102\uffda\106\uffda\001\002\000\016\026" +
    "\060\027\062\030\064\031\063\032\057\077\uffec\001\002" +
    "\000\022\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7\077" +
    "\uffd7\102\uffd7\106\uffd7\001\002\000\022\026\uffd8\027\uffd8" +
    "\030\uffd8\031\uffd8\032\uffd8\077\uffd8\102\uffd8\106\uffd8\001" +
    "\002\000\022\026\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6" +
    "\077\uffd6\102\uffd6\106\uffd6\001\002\000\014\027\044\105" +
    "\052\107\047\110\051\111\050\001\002\000\004\077\055" +
    "\001\002\000\004\077\uffed\001\002\000\022\003\ufff8\004" +
    "\ufff8\022\ufff8\023\ufff8\024\ufff8\025\ufff8\056\ufff8\060\ufff8" +
    "\001\002\000\016\026\060\027\062\030\064\031\063\032" +
    "\057\106\061\001\002\000\014\027\044\105\052\107\047" +
    "\110\051\111\050\001\002\000\014\027\044\105\052\107" +
    "\047\110\051\111\050\001\002\000\022\026\uffd9\027\uffd9" +
    "\030\uffd9\031\uffd9\032\uffd9\077\uffd9\102\uffd9\106\uffd9\001" +
    "\002\000\014\027\044\105\052\107\047\110\051\111\050" +
    "\001\002\000\014\027\044\105\052\107\047\110\051\111" +
    "\050\001\002\000\014\027\044\105\052\107\047\110\051" +
    "\111\050\001\002\000\022\026\uffde\027\uffde\030\uffde\031" +
    "\uffde\032\uffde\077\uffde\102\uffde\106\uffde\001\002\000\022" +
    "\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd\077\uffdd\102" +
    "\uffdd\106\uffdd\001\002\000\022\026\uffdf\027\uffdf\030\064" +
    "\031\063\032\057\077\uffdf\102\uffdf\106\uffdf\001\002\000" +
    "\022\026\uffe0\027\uffe0\030\064\031\063\032\057\077\uffe0" +
    "\102\uffe0\106\uffe0\001\002\000\022\026\uffdc\027\uffdc\030" +
    "\uffdc\031\uffdc\032\uffdc\077\uffdc\102\uffdc\106\uffdc\001\002" +
    "\000\022\026\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\077" +
    "\uffdb\102\uffdb\106\uffdb\001\002\000\050\003\124\004\126" +
    "\010\125\020\114\021\145\022\110\023\024\024\035\025" +
    "\037\036\107\051\106\061\120\064\132\070\115\071\141" +
    "\072\147\073\130\104\uff3e\111\122\001\002\000\004\057" +
    "\075\001\002\000\004\105\076\001\002\000\004\106\077" +
    "\001\002\000\004\103\100\001\002\000\050\003\ufffd\004" +
    "\ufffd\010\ufffd\020\ufffd\021\ufffd\022\ufffd\023\ufffd\024\ufffd" +
    "\025\ufffd\036\ufffd\051\ufffd\061\ufffd\064\ufffd\070\ufffd\071" +
    "\ufffd\072\ufffd\073\ufffd\104\ufffd\111\ufffd\001\002\000\006" +
    "\003\u01a7\111\u01a5\001\002\000\004\077\u01a3\001\002\000" +
    "\050\003\124\004\126\010\125\020\114\021\145\022\110" +
    "\023\024\024\035\025\037\036\107\051\106\061\120\064" +
    "\132\070\115\071\141\072\147\073\130\104\uff3e\111\122" +
    "\001\002\000\056\003\uff4e\004\uff4e\010\uff4e\020\uff4e\021" +
    "\uff4e\022\uff4e\023\uff4e\024\uff4e\025\uff4e\036\uff4e\051\uff4e" +
    "\061\uff4e\064\uff4e\065\uff4e\066\uff4e\067\uff4e\070\uff4e\071" +
    "\uff4e\072\uff4e\073\uff4e\104\uff4e\111\uff4e\001\002\000\006" +
    "\003\u0199\111\u0198\001\002\000\004\105\u0185\001\002\000" +
    "\004\105\u0182\001\002\000\004\075\u0174\001\002\000\004" +
    "\065\u0166\001\002\000\050\003\124\004\126\010\125\020" +
    "\114\021\145\022\110\023\024\024\035\025\037\036\107" +
    "\051\106\061\120\064\132\070\115\071\141\072\147\073" +
    "\130\104\uff3e\111\122\001\002\000\004\077\u015b\001\002" +
    "\000\004\075\u0156\001\002\000\004\105\u014b\001\002\000" +
    "\004\077\u014a\001\002\000\004\077\u0149\001\002\000\004" +
    "\105\u0145\001\002\000\056\003\uff4c\004\uff4c\010\uff4c\020" +
    "\uff4c\021\uff4c\022\uff4c\023\uff4c\024\uff4c\025\uff4c\036\uff4c" +
    "\051\uff4c\061\uff4c\064\uff4c\065\uff4c\066\uff4c\067\uff4c\070" +
    "\uff4c\071\uff4c\072\uff4c\073\uff4c\104\uff4c\111\uff4c\001\002" +
    "\000\006\035\u013f\101\205\001\002\000\004\104\u013e\001" +
    "\002\000\012\003\uffe8\077\u013c\104\u013d\111\uffe8\001\002" +
    "\000\004\105\u0139\001\002\000\056\003\uff45\004\uff45\010" +
    "\uff45\020\uff45\021\uff45\022\uff45\023\uff45\024\uff45\025\uff45" +
    "\036\uff45\051\uff45\061\uff45\064\uff45\065\uff45\066\uff45\067" +
    "\uff45\070\uff45\071\uff45\072\uff45\073\uff45\104\uff45\111\uff45" +
    "\001\002\000\050\003\124\004\126\010\125\020\114\021" +
    "\145\022\110\023\024\024\035\025\037\036\107\051\106" +
    "\061\120\064\132\070\115\071\141\072\147\073\130\104" +
    "\uff3e\111\122\001\002\000\004\105\336\001\002\000\056" +
    "\003\uff4a\004\uff4a\010\uff4a\020\uff4a\021\uff4a\022\uff4a\023" +
    "\uff4a\024\uff4a\025\uff4a\036\uff4a\051\uff4a\061\uff4a\064\uff4a" +
    "\065\uff4a\066\uff4a\067\uff4a\070\uff4a\071\uff4a\072\uff4a\073" +
    "\uff4a\104\uff4a\111\uff4a\001\002\000\004\105\332\001\002" +
    "\000\056\003\uff51\004\uff51\010\uff51\020\uff51\021\uff51\022" +
    "\uff51\023\uff51\024\uff51\025\uff51\036\uff51\051\uff51\061\uff51" +
    "\064\uff51\065\uff51\066\uff51\067\uff51\070\uff51\071\uff51\072" +
    "\uff51\073\uff51\104\uff51\111\uff51\001\002\000\062\003\uff9a" +
    "\004\uff9a\010\uff9a\020\uff9a\021\uff9a\022\uff9a\023\uff9a\024" +
    "\uff9a\025\uff9a\036\uff9a\051\uff9a\061\uff9a\062\311\063\uff9a" +
    "\064\uff9a\065\uff9a\066\uff9a\067\uff9a\070\uff9a\071\uff9a\072" +
    "\uff9a\073\uff9a\104\uff9a\111\uff9a\001\002\000\050\003\124" +
    "\004\126\010\125\020\114\021\145\022\110\023\024\024" +
    "\035\025\037\036\107\051\106\061\120\064\132\070\115" +
    "\071\141\072\147\073\130\104\uff3e\111\122\001\002\000" +
    "\004\105\303\001\002\000\004\077\302\001\002\000\056" +
    "\003\uff4f\004\uff4f\010\uff4f\020\uff4f\021\uff4f\022\uff4f\023" +
    "\uff4f\024\uff4f\025\uff4f\036\uff4f\051\uff4f\061\uff4f\064\uff4f" +
    "\065\uff4f\066\uff4f\067\uff4f\070\uff4f\071\uff4f\072\uff4f\073" +
    "\uff4f\104\uff4f\111\uff4f\001\002\000\004\105\uff8e\001\002" +
    "\000\056\003\uff50\004\uff50\010\uff50\020\uff50\021\uff50\022" +
    "\uff50\023\uff50\024\uff50\025\uff50\036\uff50\051\uff50\061\uff50" +
    "\064\uff50\065\uff50\066\uff50\067\uff50\070\uff50\071\uff50\072" +
    "\uff50\073\uff50\104\uff50\111\uff50\001\002\000\022\003\245" +
    "\017\251\027\153\046\247\105\165\107\160\110\162\111" +
    "\161\001\002\000\056\003\124\004\126\010\125\020\114" +
    "\021\145\022\110\023\024\024\035\025\037\036\107\051" +
    "\106\061\120\064\132\065\uff3e\066\uff3e\067\uff3e\070\115" +
    "\071\141\072\147\073\130\104\uff3e\111\122\001\002\000" +
    "\004\075\232\001\002\000\004\077\231\001\002\000\004" +
    "\103\230\001\002\000\004\035\151\001\002\000\026\003" +
    "\163\017\167\020\114\021\145\022\152\027\153\105\165" +
    "\107\160\110\162\111\161\001\002\000\004\075\212\001" +
    "\002\000\012\105\165\107\160\110\162\111\161\001\002" +
    "\000\050\003\uffca\026\uffca\027\uffca\030\uffca\031\uffca\032" +
    "\uffca\040\uffca\041\uffca\042\uffca\043\uffca\044\uffca\045\uffca" +
    "\047\uffca\050\uffca\076\uffca\077\uffca\100\uffca\102\uffca\106" +
    "\uffca\001\002\000\050\003\uffcf\026\uffcf\027\uffcf\030\uffcf" +
    "\031\uffcf\032\uffcf\040\uffcf\041\uffcf\042\uffcf\043\uffcf\044" +
    "\uffcf\045\uffcf\047\uffcf\050\uffcf\076\uffcf\077\uffcf\100\uffcf" +
    "\102\uffcf\106\uffcf\001\002\000\024\026\172\027\174\030" +
    "\176\031\175\032\171\076\uffef\077\uffef\100\uffef\106\uffef" +
    "\001\002\000\004\077\uffab\001\002\000\050\003\uffcc\026" +
    "\uffcc\027\uffcc\030\uffcc\031\uffcc\032\uffcc\040\uffcc\041\uffcc" +
    "\042\uffcc\043\uffcc\044\uffcc\045\uffcc\047\uffcc\050\uffcc\076" +
    "\uffcc\077\uffcc\100\uffcc\102\uffcc\106\uffcc\001\002\000\052" +
    "\003\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd\032\uffcd\040" +
    "\uffcd\041\uffcd\042\uffcd\043\uffcd\044\uffcd\045\uffcd\047\uffcd" +
    "\050\uffcd\076\uffcd\077\uffcd\100\uffcd\101\205\102\uffcd\106" +
    "\uffcd\001\002\000\050\003\uffcb\026\uffcb\027\uffcb\030\uffcb" +
    "\031\uffcb\032\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb\044" +
    "\uffcb\045\uffcb\047\uffcb\050\uffcb\076\uffcb\077\uffcb\100\uffcb" +
    "\102\uffcb\106\uffcb\001\002\000\012\076\uffee\077\uffee\100" +
    "\uffee\106\uffee\001\002\000\006\076\uffaa\077\uffaa\001\002" +
    "\000\014\027\153\105\165\107\160\110\162\111\161\001" +
    "\002\000\006\076\uffa9\077\uffa9\001\002\000\012\076\ufff0" +
    "\077\ufff0\100\ufff0\106\ufff0\001\002\000\016\026\172\027" +
    "\174\030\176\031\175\032\171\106\173\001\002\000\014" +
    "\027\153\105\165\107\160\110\162\111\161\001\002\000" +
    "\014\027\153\105\165\107\160\110\162\111\161\001\002" +
    "\000\050\003\uffce\026\uffce\027\uffce\030\uffce\031\uffce\032" +
    "\uffce\040\uffce\041\uffce\042\uffce\043\uffce\044\uffce\045\uffce" +
    "\047\uffce\050\uffce\076\uffce\077\uffce\100\uffce\102\uffce\106" +
    "\uffce\001\002\000\014\027\153\105\165\107\160\110\162" +
    "\111\161\001\002\000\014\027\153\105\165\107\160\110" +
    "\162\111\161\001\002\000\014\027\153\105\165\107\160" +
    "\110\162\111\161\001\002\000\050\003\uffd3\026\uffd3\027" +
    "\uffd3\030\uffd3\031\uffd3\032\uffd3\040\uffd3\041\uffd3\042\uffd3" +
    "\043\uffd3\044\uffd3\045\uffd3\047\uffd3\050\uffd3\076\uffd3\077" +
    "\uffd3\100\uffd3\102\uffd3\106\uffd3\001\002\000\050\003\uffd2" +
    "\026\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2\040\uffd2\041" +
    "\uffd2\042\uffd2\043\uffd2\044\uffd2\045\uffd2\047\uffd2\050\uffd2" +
    "\076\uffd2\077\uffd2\100\uffd2\102\uffd2\106\uffd2\001\002\000" +
    "\050\003\uffd4\026\uffd4\027\uffd4\030\176\031\175\032\171" +
    "\040\uffd4\041\uffd4\042\uffd4\043\uffd4\044\uffd4\045\uffd4\047" +
    "\uffd4\050\uffd4\076\uffd4\077\uffd4\100\uffd4\102\uffd4\106\uffd4" +
    "\001\002\000\050\003\uffd5\026\uffd5\027\uffd5\030\176\031" +
    "\175\032\171\040\uffd5\041\uffd5\042\uffd5\043\uffd5\044\uffd5" +
    "\045\uffd5\047\uffd5\050\uffd5\076\uffd5\077\uffd5\100\uffd5\102" +
    "\uffd5\106\uffd5\001\002\000\050\003\uffd1\026\uffd1\027\uffd1" +
    "\030\uffd1\031\uffd1\032\uffd1\040\uffd1\041\uffd1\042\uffd1\043" +
    "\uffd1\044\uffd1\045\uffd1\047\uffd1\050\uffd1\076\uffd1\077\uffd1" +
    "\100\uffd1\102\uffd1\106\uffd1\001\002\000\052\003\uffa4\026" +
    "\uffa4\027\uffa4\030\uffa4\031\uffa4\032\uffa4\035\uffa4\040\uffa4" +
    "\041\uffa4\042\uffa4\043\uffa4\044\uffa4\045\uffa4\047\uffa4\050" +
    "\uffa4\076\uffa4\077\uffa4\100\uffa4\102\uffa4\106\uffa4\001\002" +
    "\000\014\027\153\105\165\107\160\110\162\111\161\001" +
    "\002\000\016\026\172\027\174\030\176\031\175\032\171" +
    "\102\207\001\002\000\054\003\uffa3\026\uffa3\027\uffa3\030" +
    "\uffa3\031\uffa3\032\uffa3\035\uffa3\040\uffa3\041\uffa3\042\uffa3" +
    "\043\uffa3\044\uffa3\045\uffa3\047\uffa3\050\uffa3\076\uffa3\077" +
    "\uffa3\100\uffa3\101\205\102\uffa3\106\uffa3\001\002\000\052" +
    "\003\uffa2\026\uffa2\027\uffa2\030\uffa2\031\uffa2\032\uffa2\035" +
    "\uffa2\040\uffa2\041\uffa2\042\uffa2\043\uffa2\044\uffa2\045\uffa2" +
    "\047\uffa2\050\uffa2\076\uffa2\077\uffa2\100\uffa2\102\uffa2\106" +
    "\uffa2\001\002\000\050\003\uffd0\026\uffd0\027\uffd0\030\uffd0" +
    "\031\uffd0\032\uffd0\040\uffd0\041\uffd0\042\uffd0\043\uffd0\044" +
    "\uffd0\045\uffd0\047\uffd0\050\uffd0\076\uffd0\077\uffd0\100\uffd0" +
    "\102\uffd0\106\uffd0\001\002\000\004\111\213\001\002\000" +
    "\004\075\214\001\002\000\004\111\215\001\002\000\004" +
    "\105\216\001\002\000\016\027\153\105\165\106\uff7c\107" +
    "\160\110\162\111\161\001\002\000\022\003\223\026\172" +
    "\027\174\030\176\031\175\032\171\076\222\106\uff7d\001" +
    "\002\000\004\106\221\001\002\000\010\076\uff76\077\uff76" +
    "\106\uff76\001\002\000\014\027\153\105\165\107\160\110" +
    "\162\111\161\001\002\000\006\076\uff79\106\uff79\001\002" +
    "\000\006\076\225\106\uff7e\001\002\000\014\027\153\105" +
    "\165\107\160\110\162\111\161\001\002\000\020\026\172" +
    "\027\174\030\176\031\175\032\171\076\uff7a\106\uff7a\001" +
    "\002\000\020\026\172\027\174\030\176\031\175\032\171" +
    "\076\uff7b\106\uff7b\001\002\000\050\003\uff8b\004\uff8b\010" +
    "\uff8b\020\uff8b\021\uff8b\022\uff8b\023\uff8b\024\uff8b\025\uff8b" +
    "\036\uff8b\051\uff8b\061\uff8b\064\uff8b\070\uff8b\071\uff8b\072" +
    "\uff8b\073\uff8b\104\uff8b\111\uff8b\001\002\000\056\003\uff52" +
    "\004\uff52\010\uff52\020\uff52\021\uff52\022\uff52\023\uff52\024" +
    "\uff52\025\uff52\036\uff52\051\uff52\061\uff52\064\uff52\065\uff52" +
    "\066\uff52\067\uff52\070\uff52\071\uff52\072\uff52\073\uff52\104" +
    "\uff52\111\uff52\001\002\000\004\111\233\001\002\000\004" +
    "\105\234\001\002\000\016\027\153\105\165\106\uff7c\107" +
    "\160\110\162\111\161\001\002\000\004\106\236\001\002" +
    "\000\010\076\uff78\077\uff78\106\uff78\001\002\000\012\065" +
    "\uff3f\066\uff3f\067\uff3f\104\uff3f\001\002\000\004\077\301" +
    "\001\002\000\010\050\276\077\uffc1\106\uffc1\001\002\000" +
    "\040\026\172\027\174\030\176\031\175\032\171\040\uffc3" +
    "\041\uffc3\042\uffc3\043\uffc3\044\uffc3\045\uffc3\047\uffc3\050" +
    "\uffc3\077\uffc3\106\uffc3\001\002\000\012\047\uffb7\050\uffb7" +
    "\077\uffb7\106\uffb7\001\002\000\012\047\uffb9\050\uffb9\077" +
    "\uffb9\106\uffb9\001\002\000\012\050\uffbb\077\uffbb\104\274" +
    "\106\uffbb\001\002\000\016\040\260\041\261\042\262\043" +
    "\264\044\263\045\265\001\002\000\004\105\255\001\002" +
    "\000\012\047\252\050\uffbc\077\uffbc\106\uffbc\001\002\000" +
    "\026\040\uffc2\041\uffc2\042\uffc2\043\uffc2\044\uffc2\045\uffc2" +
    "\047\uffc2\050\uffc2\077\uffc2\106\uffc2\001\002\000\020\017" +
    "\uffbf\027\uffbf\046\uffbf\105\uffbf\107\uffbf\110\uffbf\111\uffbf" +
    "\001\002\000\020\017\251\027\153\046\247\105\165\107" +
    "\160\110\162\111\161\001\002\000\012\047\252\050\uffba" +
    "\077\uffba\106\uffba\001\002\000\016\017\251\027\153\105" +
    "\165\107\160\110\162\111\161\001\002\000\004\106\257" +
    "\001\002\000\012\047\uffb8\050\uffb8\077\uffb8\106\uffb8\001" +
    "\002\000\016\017\251\027\153\105\165\107\160\110\162" +
    "\111\161\001\002\000\016\017\251\027\153\105\165\107" +
    "\160\110\162\111\161\001\002\000\016\017\251\027\153" +
    "\105\165\107\160\110\162\111\161\001\002\000\016\017" +
    "\251\027\153\105\165\107\160\110\162\111\161\001\002" +
    "\000\016\017\251\027\153\105\165\107\160\110\162\111" +
    "\161\001\002\000\016\017\251\027\153\105\165\107\160" +
    "\110\162\111\161\001\002\000\012\047\uffc4\050\uffc4\077" +
    "\uffc4\106\uffc4\001\002\000\012\047\uffc5\050\uffc5\077\uffc5" +
    "\106\uffc5\001\002\000\012\047\uffc6\050\uffc6\077\uffc6\106" +
    "\uffc6\001\002\000\012\047\uffc7\050\uffc7\077\uffc7\106\uffc7" +
    "\001\002\000\012\047\uffc8\050\uffc8\077\uffc8\106\uffc8\001" +
    "\002\000\012\047\uffc9\050\uffc9\077\uffc9\106\uffc9\001\002" +
    "\000\006\077\uffc0\106\uffc0\001\002\000\022\003\300\017" +
    "\251\027\153\046\247\105\165\107\160\110\162\111\161" +
    "\001\002\000\022\003\uffbe\017\uffbe\027\uffbe\046\uffbe\105" +
    "\uffbe\107\uffbe\110\uffbe\111\uffbe\001\002\000\010\050\276" +
    "\077\uffbd\106\uffbd\001\002\000\010\050\uffbb\077\uffbb\106" +
    "\uffbb\001\002\000\006\003\uff88\111\uff88\001\002\000\056" +
    "\003\uff4d\004\uff4d\010\uff4d\020\uff4d\021\uff4d\022\uff4d\023" +
    "\uff4d\024\uff4d\025\uff4d\036\uff4d\051\uff4d\061\uff4d\064\uff4d" +
    "\065\uff4d\066\uff4d\067\uff4d\070\uff4d\071\uff4d\072\uff4d\073" +
    "\uff4d\104\uff4d\111\uff4d\001\002\000\022\003\245\017\251" +
    "\027\153\046\247\105\165\107\160\110\162\111\161\001" +
    "\002\000\004\106\305\001\002\000\004\103\306\001\002" +
    "\000\050\003\uff8d\004\uff8d\010\uff8d\020\uff8d\021\uff8d\022" +
    "\uff8d\023\uff8d\024\uff8d\025\uff8d\036\uff8d\051\uff8d\061\uff8d" +
    "\064\uff8d\070\uff8d\071\uff8d\072\uff8d\073\uff8d\104\uff8d\111" +
    "\uff8d\001\002\000\004\104\310\001\002\000\056\003\uff8c" +
    "\004\uff8c\010\uff8c\020\uff8c\021\uff8c\022\uff8c\023\uff8c\024" +
    "\uff8c\025\uff8c\036\uff8c\051\uff8c\061\uff8c\064\uff8c\065\uff8c" +
    "\066\uff8c\067\uff8c\070\uff8c\071\uff8c\072\uff8c\073\uff8c\104" +
    "\uff8c\111\uff8c\001\002\000\004\105\326\001\002\000\060" +
    "\003\uff99\004\uff99\010\uff99\020\uff99\021\uff99\022\uff99\023" +
    "\uff99\024\uff99\025\uff99\036\uff99\051\uff99\061\uff99\063\321" +
    "\064\uff99\065\uff99\066\uff99\067\uff99\070\uff99\071\uff99\072" +
    "\uff99\073\uff99\104\uff99\111\uff99\001\002\000\062\003\uff9a" +
    "\004\uff9a\010\uff9a\020\uff9a\021\uff9a\022\uff9a\023\uff9a\024" +
    "\uff9a\025\uff9a\036\uff9a\051\uff9a\061\uff9a\062\311\063\uff9a" +
    "\064\uff9a\065\uff9a\066\uff9a\067\uff9a\070\uff9a\071\uff9a\072" +
    "\uff9a\073\uff9a\104\uff9a\111\uff9a\001\002\000\050\003\124" +
    "\004\126\010\125\020\114\021\145\022\110\023\024\024" +
    "\035\025\037\036\107\051\106\061\120\064\132\070\115" +
    "\071\141\072\147\073\130\104\uff3e\111\122\001\002\000" +
    "\004\104\316\001\002\000\062\003\uff9c\004\uff9c\010\uff9c" +
    "\020\uff9c\021\uff9c\022\uff9c\023\uff9c\024\uff9c\025\uff9c\036" +
    "\uff9c\051\uff9c\061\uff9c\062\uff9c\063\uff9c\064\uff9c\065\uff9c" +
    "\066\uff9c\067\uff9c\070\uff9c\071\uff9c\072\uff9c\073\uff9c\104" +
    "\uff9c\111\uff9c\001\002\000\060\003\uff9b\004\uff9b\010\uff9b" +
    "\020\uff9b\021\uff9b\022\uff9b\023\uff9b\024\uff9b\025\uff9b\036" +
    "\uff9b\051\uff9b\061\uff9b\063\uff9b\064\uff9b\065\uff9b\066\uff9b" +
    "\067\uff9b\070\uff9b\071\uff9b\072\uff9b\073\uff9b\104\uff9b\111" +
    "\uff9b\001\002\000\050\003\124\004\126\010\125\020\114" +
    "\021\145\022\110\023\024\024\035\025\037\036\107\051" +
    "\106\061\120\064\132\070\115\071\141\072\147\073\130" +
    "\104\uff3e\111\122\001\002\000\004\103\323\001\002\000" +
    "\056\003\uff98\004\uff98\010\uff98\020\uff98\021\uff98\022\uff98" +
    "\023\uff98\024\uff98\025\uff98\036\uff98\051\uff98\061\uff98\064" +
    "\uff98\065\uff98\066\uff98\067\uff98\070\uff98\071\uff98\072\uff98" +
    "\073\uff98\104\uff98\111\uff98\001\002\000\050\003\uff9f\004" +
    "\uff9f\010\uff9f\020\uff9f\021\uff9f\022\uff9f\023\uff9f\024\uff9f" +
    "\025\uff9f\036\uff9f\051\uff9f\061\uff9f\064\uff9f\070\uff9f\071" +
    "\uff9f\072\uff9f\073\uff9f\104\uff9f\111\uff9f\001\002\000\004" +
    "\104\325\001\002\000\056\003\uff9d\004\uff9d\010\uff9d\020" +
    "\uff9d\021\uff9d\022\uff9d\023\uff9d\024\uff9d\025\uff9d\036\uff9d" +
    "\051\uff9d\061\uff9d\064\uff9d\065\uff9d\066\uff9d\067\uff9d\070" +
    "\uff9d\071\uff9d\072\uff9d\073\uff9d\104\uff9d\111\uff9d\001\002" +
    "\000\022\003\245\017\251\027\153\046\247\105\165\107" +
    "\160\110\162\111\161\001\002\000\004\106\330\001\002" +
    "\000\004\103\331\001\002\000\050\003\uffa0\004\uffa0\010" +
    "\uffa0\020\uffa0\021\uffa0\022\uffa0\023\uffa0\024\uffa0\025\uffa0" +
    "\036\uffa0\051\uffa0\061\uffa0\064\uffa0\070\uffa0\071\uffa0\072" +
    "\uffa0\073\uffa0\104\uffa0\111\uffa0\001\002\000\020\003\163" +
    "\017\167\027\153\105\165\107\160\110\162\111\161\001" +
    "\002\000\004\106\334\001\002\000\004\103\335\001\002" +
    "\000\004\065\uff97\001\002\000\004\074\337\001\002\000" +
    "\160\010\u0103\020\361\021\u0119\022\346\023\356\024\u0115" +
    "\025\344\026\u011b\027\u0104\030\343\031\371\035\366\036" +
    "\342\040\375\041\350\042\u0105\043\u010d\044\u0118\045\u0114" +
    "\046\364\047\365\050\370\051\341\052\u0100\053\367\054" +
    "\u0108\055\347\056\u0107\057\374\060\345\061\373\062\372" +
    "\063\u010e\064\u010b\065\351\066\u0113\067\u0106\070\363\071" +
    "\u0111\072\u011a\073\u0109\074\u0102\075\u010f\077\376\100\354" +
    "\101\362\102\360\103\357\104\355\105\u0112\106\u0110\107" +
    "\340\110\u010c\111\377\112\u010a\001\002\000\160\010\uff0c" +
    "\020\uff0c\021\uff0c\022\uff0c\023\uff0c\024\uff0c\025\uff0c\026" +
    "\uff0c\027\uff0c\030\uff0c\031\uff0c\035\uff0c\036\uff0c\040\uff0c" +
    "\041\uff0c\042\uff0c\043\uff0c\044\uff0c\045\uff0c\046\uff0c\047" +
    "\uff0c\050\uff0c\051\uff0c\052\uff0c\053\uff0c\054\uff0c\055\uff0c" +
    "\056\uff0c\057\uff0c\060\uff0c\061\uff0c\062\uff0c\063\uff0c\064" +
    "\uff0c\065\uff0c\066\uff0c\067\uff0c\070\uff0c\071\uff0c\072\uff0c" +
    "\073\uff0c\074\uff0c\075\uff0c\077\uff0c\100\uff0c\101\uff0c\102" +
    "\uff0c\103\uff0c\104\uff0c\105\uff0c\106\uff0c\107\uff0c\110\uff0c" +
    "\111\uff0c\112\uff0c\001\002\000\160\010\uff25\020\uff25\021" +
    "\uff25\022\uff25\023\uff25\024\uff25\025\uff25\026\uff25\027\uff25" +
    "\030\uff25\031\uff25\035\uff25\036\uff25\040\uff25\041\uff25\042" +
    "\uff25\043\uff25\044\uff25\045\uff25\046\uff25\047\uff25\050\uff25" +
    "\051\uff25\052\uff25\053\uff25\054\uff25\055\uff25\056\uff25\057" +
    "\uff25\060\uff25\061\uff25\062\uff25\063\uff25\064\uff25\065\uff25" +
    "\066\uff25\067\uff25\070\uff25\071\uff25\072\uff25\073\uff25\074" +
    "\uff25\075\uff25\077\uff25\100\uff25\101\uff25\102\uff25\103\uff25" +
    "\104\uff25\105\uff25\106\uff25\107\uff25\110\uff25\111\uff25\112" +
    "\uff25\001\002\000\160\010\uff34\020\uff34\021\uff34\022\uff34" +
    "\023\uff34\024\uff34\025\uff34\026\uff34\027\uff34\030\uff34\031" +
    "\uff34\035\uff34\036\uff34\040\uff34\041\uff34\042\uff34\043\uff34" +
    "\044\uff34\045\uff34\046\uff34\047\uff34\050\uff34\051\uff34\052" +
    "\uff34\053\uff34\054\uff34\055\uff34\056\uff34\057\uff34\060\uff34" +
    "\061\uff34\062\uff34\063\uff34\064\uff34\065\uff34\066\uff34\067" +
    "\uff34\070\uff34\071\uff34\072\uff34\073\uff34\074\uff34\075\uff34" +
    "\077\uff34\100\uff34\101\uff34\102\uff34\103\uff34\104\uff34\105" +
    "\uff34\106\uff34\107\uff34\110\uff34\111\uff34\112\uff34\001\002" +
    "\000\160\010\uff31\020\uff31\021\uff31\022\uff31\023\uff31\024" +
    "\uff31\025\uff31\026\uff31\027\uff31\030\uff31\031\uff31\035\uff31" +
    "\036\uff31\040\uff31\041\uff31\042\uff31\043\uff31\044\uff31\045" +
    "\uff31\046\uff31\047\uff31\050\uff31\051\uff31\052\uff31\053\uff31" +
    "\054\uff31\055\uff31\056\uff31\057\uff31\060\uff31\061\uff31\062" +
    "\uff31\063\uff31\064\uff31\065\uff31\066\uff31\067\uff31\070\uff31" +
    "\071\uff31\072\uff31\073\uff31\074\uff31\075\uff31\077\uff31\100" +
    "\uff31\101\uff31\102\uff31\103\uff31\104\uff31\105\uff31\106\uff31" +
    "\107\uff31\110\uff31\111\uff31\112\uff31\001\002\000\160\010" +
    "\uff36\020\uff36\021\uff36\022\uff36\023\uff36\024\uff36\025\uff36" +
    "\026\uff36\027\uff36\030\uff36\031\uff36\035\uff36\036\uff36\040" +
    "\uff36\041\uff36\042\uff36\043\uff36\044\uff36\045\uff36\046\uff36" +
    "\047\uff36\050\uff36\051\uff36\052\uff36\053\uff36\054\uff36\055" +
    "\uff36\056\uff36\057\uff36\060\uff36\061\uff36\062\uff36\063\uff36" +
    "\064\uff36\065\uff36\066\uff36\067\uff36\070\uff36\071\uff36\072" +
    "\uff36\073\uff36\074\uff36\075\uff36\077\uff36\100\uff36\101\uff36" +
    "\102\uff36\103\uff36\104\uff36\105\uff36\106\uff36\107\uff36\110" +
    "\uff36\111\uff36\112\uff36\001\002\000\160\010\uff21\020\uff21" +
    "\021\uff21\022\uff21\023\uff21\024\uff21\025\uff21\026\uff21\027" +
    "\uff21\030\uff21\031\uff21\035\uff21\036\uff21\040\uff21\041\uff21" +
    "\042\uff21\043\uff21\044\uff21\045\uff21\046\uff21\047\uff21\050" +
    "\uff21\051\uff21\052\uff21\053\uff21\054\uff21\055\uff21\056\uff21" +
    "\057\uff21\060\uff21\061\uff21\062\uff21\063\uff21\064\uff21\065" +
    "\uff21\066\uff21\067\uff21\070\uff21\071\uff21\072\uff21\073\uff21" +
    "\074\uff21\075\uff21\077\uff21\100\uff21\101\uff21\102\uff21\103" +
    "\uff21\104\uff21\105\uff21\106\uff21\107\uff21\110\uff21\111\uff21" +
    "\112\uff21\001\002\000\160\010\uff39\020\uff39\021\uff39\022" +
    "\uff39\023\uff39\024\uff39\025\uff39\026\uff39\027\uff39\030\uff39" +
    "\031\uff39\035\uff39\036\uff39\040\uff39\041\uff39\042\uff39\043" +
    "\uff39\044\uff39\045\uff39\046\uff39\047\uff39\050\uff39\051\uff39" +
    "\052\uff39\053\uff39\054\uff39\055\uff39\056\uff39\057\uff39\060" +
    "\uff39\061\uff39\062\uff39\063\uff39\064\uff39\065\uff39\066\uff39" +
    "\067\uff39\070\uff39\071\uff39\072\uff39\073\uff39\074\uff39\075" +
    "\uff39\077\uff39\100\uff39\101\uff39\102\uff39\103\uff39\104\uff39" +
    "\105\uff39\106\uff39\107\uff39\110\uff39\111\uff39\112\uff39\001" +
    "\002\000\160\010\uff24\020\uff24\021\uff24\022\uff24\023\uff24" +
    "\024\uff24\025\uff24\026\uff24\027\uff24\030\uff24\031\uff24\035" +
    "\uff24\036\uff24\040\uff24\041\uff24\042\uff24\043\uff24\044\uff24" +
    "\045\uff24\046\uff24\047\uff24\050\uff24\051\uff24\052\uff24\053" +
    "\uff24\054\uff24\055\uff24\056\uff24\057\uff24\060\uff24\061\uff24" +
    "\062\uff24\063\uff24\064\uff24\065\uff24\066\uff24\067\uff24\070" +
    "\uff24\071\uff24\072\uff24\073\uff24\074\uff24\075\uff24\077\uff24" +
    "\100\uff24\101\uff24\102\uff24\103\uff24\104\uff24\105\uff24\106" +
    "\uff24\107\uff24\110\uff24\111\uff24\112\uff24\001\002\000\160" +
    "\010\uff2d\020\uff2d\021\uff2d\022\uff2d\023\uff2d\024\uff2d\025" +
    "\uff2d\026\uff2d\027\uff2d\030\uff2d\031\uff2d\035\uff2d\036\uff2d" +
    "\040\uff2d\041\uff2d\042\uff2d\043\uff2d\044\uff2d\045\uff2d\046" +
    "\uff2d\047\uff2d\050\uff2d\051\uff2d\052\uff2d\053\uff2d\054\uff2d" +
    "\055\uff2d\056\uff2d\057\uff2d\060\uff2d\061\uff2d\062\uff2d\063" +
    "\uff2d\064\uff2d\065\uff2d\066\uff2d\067\uff2d\070\uff2d\071\uff2d" +
    "\072\uff2d\073\uff2d\074\uff2d\075\uff2d\077\uff2d\100\uff2d\101" +
    "\uff2d\102\uff2d\103\uff2d\104\uff2d\105\uff2d\106\uff2d\107\uff2d" +
    "\110\uff2d\111\uff2d\112\uff2d\001\002\000\160\010\uff1c\020" +
    "\uff1c\021\uff1c\022\uff1c\023\uff1c\024\uff1c\025\uff1c\026\uff1c" +
    "\027\uff1c\030\uff1c\031\uff1c\035\uff1c\036\uff1c\040\uff1c\041" +
    "\uff1c\042\uff1c\043\uff1c\044\uff1c\045\uff1c\046\uff1c\047\uff1c" +
    "\050\uff1c\051\uff1c\052\uff1c\053\uff1c\054\uff1c\055\uff1c\056" +
    "\uff1c\057\uff1c\060\uff1c\061\uff1c\062\uff1c\063\uff1c\064\uff1c" +
    "\065\uff1c\066\uff1c\067\uff1c\070\uff1c\071\uff1c\072\uff1c\073" +
    "\uff1c\074\uff1c\075\uff1c\077\uff1c\100\uff1c\101\uff1c\102\uff1c" +
    "\103\uff1c\104\uff1c\105\uff1c\106\uff1c\107\uff1c\110\uff1c\111" +
    "\uff1c\112\uff1c\001\002\000\160\010\u0103\020\361\021\u0119" +
    "\022\346\023\356\024\u0115\025\344\026\u011b\027\u0104\030" +
    "\343\031\371\035\366\036\342\040\375\041\350\042\u0105" +
    "\043\u010d\044\u0118\045\u0114\046\364\047\365\050\370\051" +
    "\341\052\u0100\053\367\054\u0108\055\347\056\u0107\057\374" +
    "\060\345\061\373\062\372\063\u010e\064\u010b\065\351\066" +
    "\u0113\067\u0106\070\363\071\u0111\072\u011a\073\u0109\074\u0122" +
    "\075\u010f\077\376\100\354\101\362\102\360\103\357\104" +
    "\355\105\u0112\106\u0110\107\340\110\u010c\111\377\112\u010a" +
    "\001\002\000\160\010\uff67\020\uff67\021\uff67\022\uff67\023" +
    "\uff67\024\uff67\025\uff67\026\uff67\027\uff67\030\uff67\031\uff67" +
    "\035\uff67\036\uff67\040\uff67\041\uff67\042\uff67\043\uff67\044" +
    "\uff67\045\uff67\046\uff67\047\uff67\050\uff67\051\uff67\052\uff67" +
    "\053\uff67\054\uff67\055\uff67\056\uff67\057\uff67\060\uff67\061" +
    "\uff67\062\uff67\063\uff67\064\uff67\065\uff67\066\uff67\067\uff67" +
    "\070\uff67\071\uff67\072\uff67\073\uff67\074\uff67\075\uff67\077" +
    "\uff67\100\uff67\101\uff67\102\uff67\103\uff67\104\uff67\105\uff67" +
    "\106\uff67\107\uff67\110\uff67\111\uff67\112\uff67\001\002\000" +
    "\160\010\uff13\020\uff13\021\uff13\022\uff13\023\uff13\024\uff13" +
    "\025\uff13\026\uff13\027\uff13\030\uff13\031\uff13\035\uff13\036" +
    "\uff13\040\uff13\041\uff13\042\uff13\043\uff13\044\uff13\045\uff13" +
    "\046\uff13\047\uff13\050\uff13\051\uff13\052\uff13\053\uff13\054" +
    "\uff13\055\uff13\056\uff13\057\uff13\060\uff13\061\uff13\062\uff13" +
    "\063\uff13\064\uff13\065\uff13\066\uff13\067\uff13\070\uff13\071" +
    "\uff13\072\uff13\073\uff13\074\uff13\075\uff13\077\uff13\100\uff13" +
    "\101\uff13\102\uff13\103\uff13\104\uff13\105\uff13\106\uff13\107" +
    "\uff13\110\uff13\111\uff13\112\uff13\001\002\000\160\010\uff0f" +
    "\020\uff0f\021\uff0f\022\uff0f\023\uff0f\024\uff0f\025\uff0f\026" +
    "\uff0f\027\uff0f\030\uff0f\031\uff0f\035\uff0f\036\uff0f\040\uff0f" +
    "\041\uff0f\042\uff0f\043\uff0f\044\uff0f\045\uff0f\046\uff0f\047" +
    "\uff0f\050\uff0f\051\uff0f\052\uff0f\053\uff0f\054\uff0f\055\uff0f" +
    "\056\uff0f\057\uff0f\060\uff0f\061\uff0f\062\uff0f\063\uff0f\064" +
    "\uff0f\065\uff0f\066\uff0f\067\uff0f\070\uff0f\071\uff0f\072\uff0f" +
    "\073\uff0f\074\uff0f\075\uff0f\077\uff0f\100\uff0f\101\uff0f\102" +
    "\uff0f\103\uff0f\104\uff0f\105\uff0f\106\uff0f\107\uff0f\110\uff0f" +
    "\111\uff0f\112\uff0f\001\002\000\160\010\uff38\020\uff38\021" +
    "\uff38\022\uff38\023\uff38\024\uff38\025\uff38\026\uff38\027\uff38" +
    "\030\uff38\031\uff38\035\uff38\036\uff38\040\uff38\041\uff38\042" +
    "\uff38\043\uff38\044\uff38\045\uff38\046\uff38\047\uff38\050\uff38" +
    "\051\uff38\052\uff38\053\uff38\054\uff38\055\uff38\056\uff38\057" +
    "\uff38\060\uff38\061\uff38\062\uff38\063\uff38\064\uff38\065\uff38" +
    "\066\uff38\067\uff38\070\uff38\071\uff38\072\uff38\073\uff38\074" +
    "\uff38\075\uff38\077\uff38\100\uff38\101\uff38\102\uff38\103\uff38" +
    "\104\uff38\105\uff38\106\uff38\107\uff38\110\uff38\111\uff38\112" +
    "\uff38\001\002\000\160\010\uff10\020\uff10\021\uff10\022\uff10" +
    "\023\uff10\024\uff10\025\uff10\026\uff10\027\uff10\030\uff10\031" +
    "\uff10\035\uff10\036\uff10\040\uff10\041\uff10\042\uff10\043\uff10" +
    "\044\uff10\045\uff10\046\uff10\047\uff10\050\uff10\051\uff10\052" +
    "\uff10\053\uff10\054\uff10\055\uff10\056\uff10\057\uff10\060\uff10" +
    "\061\uff10\062\uff10\063\uff10\064\uff10\065\uff10\066\uff10\067" +
    "\uff10\070\uff10\071\uff10\072\uff10\073\uff10\074\uff10\075\uff10" +
    "\077\uff10\100\uff10\101\uff10\102\uff10\103\uff10\104\uff10\105" +
    "\uff10\106\uff10\107\uff10\110\uff10\111\uff10\112\uff10\001\002" +
    "\000\160\010\uff11\020\uff11\021\uff11\022\uff11\023\uff11\024" +
    "\uff11\025\uff11\026\uff11\027\uff11\030\uff11\031\uff11\035\uff11" +
    "\036\uff11\040\uff11\041\uff11\042\uff11\043\uff11\044\uff11\045" +
    "\uff11\046\uff11\047\uff11\050\uff11\051\uff11\052\uff11\053\uff11" +
    "\054\uff11\055\uff11\056\uff11\057\uff11\060\uff11\061\uff11\062" +
    "\uff11\063\uff11\064\uff11\065\uff11\066\uff11\067\uff11\070\uff11" +
    "\071\uff11\072\uff11\073\uff11\074\uff11\075\uff11\077\uff11\100" +
    "\uff11\101\uff11\102\uff11\103\uff11\104\uff11\105\uff11\106\uff11" +
    "\107\uff11\110\uff11\111\uff11\112\uff11\001\002\000\160\010" +
    "\uff3b\020\uff3b\021\uff3b\022\uff3b\023\uff3b\024\uff3b\025\uff3b" +
    "\026\uff3b\027\uff3b\030\uff3b\031\uff3b\035\uff3b\036\uff3b\040" +
    "\uff3b\041\uff3b\042\uff3b\043\uff3b\044\uff3b\045\uff3b\046\uff3b" +
    "\047\uff3b\050\uff3b\051\uff3b\052\uff3b\053\uff3b\054\uff3b\055" +
    "\uff3b\056\uff3b\057\uff3b\060\uff3b\061\uff3b\062\uff3b\063\uff3b" +
    "\064\uff3b\065\uff3b\066\uff3b\067\uff3b\070\uff3b\071\uff3b\072" +
    "\uff3b\073\uff3b\074\uff3b\075\uff3b\077\uff3b\100\uff3b\101\uff3b" +
    "\102\uff3b\103\uff3b\104\uff3b\105\uff3b\106\uff3b\107\uff3b\110" +
    "\uff3b\111\uff3b\112\uff3b\001\002\000\160\010\uff12\020\uff12" +
    "\021\uff12\022\uff12\023\uff12\024\uff12\025\uff12\026\uff12\027" +
    "\uff12\030\uff12\031\uff12\035\uff12\036\uff12\040\uff12\041\uff12" +
    "\042\uff12\043\uff12\044\uff12\045\uff12\046\uff12\047\uff12\050" +
    "\uff12\051\uff12\052\uff12\053\uff12\054\uff12\055\uff12\056\uff12" +
    "\057\uff12\060\uff12\061\uff12\062\uff12\063\uff12\064\uff12\065" +
    "\uff12\066\uff12\067\uff12\070\uff12\071\uff12\072\uff12\073\uff12" +
    "\074\uff12\075\uff12\077\uff12\100\uff12\101\uff12\102\uff12\103" +
    "\uff12\104\uff12\105\uff12\106\uff12\107\uff12\110\uff12\111\uff12" +
    "\112\uff12\001\002\000\160\010\uff19\020\uff19\021\uff19\022" +
    "\uff19\023\uff19\024\uff19\025\uff19\026\uff19\027\uff19\030\uff19" +
    "\031\uff19\035\uff19\036\uff19\040\uff19\041\uff19\042\uff19\043" +
    "\uff19\044\uff19\045\uff19\046\uff19\047\uff19\050\uff19\051\uff19" +
    "\052\uff19\053\uff19\054\uff19\055\uff19\056\uff19\057\uff19\060" +
    "\uff19\061\uff19\062\uff19\063\uff19\064\uff19\065\uff19\066\uff19" +
    "\067\uff19\070\uff19\071\uff19\072\uff19\073\uff19\074\uff19\075" +
    "\uff19\077\uff19\100\uff19\101\uff19\102\uff19\103\uff19\104\uff19" +
    "\105\uff19\106\uff19\107\uff19\110\uff19\111\uff19\112\uff19\001" +
    "\002\000\160\010\uff28\020\uff28\021\uff28\022\uff28\023\uff28" +
    "\024\uff28\025\uff28\026\uff28\027\uff28\030\uff28\031\uff28\035" +
    "\uff28\036\uff28\040\uff28\041\uff28\042\uff28\043\uff28\044\uff28" +
    "\045\uff28\046\uff28\047\uff28\050\uff28\051\uff28\052\uff28\053" +
    "\uff28\054\uff28\055\uff28\056\uff28\057\uff28\060\uff28\061\uff28" +
    "\062\uff28\063\uff28\064\uff28\065\uff28\066\uff28\067\uff28\070" +
    "\uff28\071\uff28\072\uff28\073\uff28\074\uff28\075\uff28\077\uff28" +
    "\100\uff28\101\uff28\102\uff28\103\uff28\104\uff28\105\uff28\106" +
    "\uff28\107\uff28\110\uff28\111\uff28\112\uff28\001\002\000\160" +
    "\010\uff27\020\uff27\021\uff27\022\uff27\023\uff27\024\uff27\025" +
    "\uff27\026\uff27\027\uff27\030\uff27\031\uff27\035\uff27\036\uff27" +
    "\040\uff27\041\uff27\042\uff27\043\uff27\044\uff27\045\uff27\046" +
    "\uff27\047\uff27\050\uff27\051\uff27\052\uff27\053\uff27\054\uff27" +
    "\055\uff27\056\uff27\057\uff27\060\uff27\061\uff27\062\uff27\063" +
    "\uff27\064\uff27\065\uff27\066\uff27\067\uff27\070\uff27\071\uff27" +
    "\072\uff27\073\uff27\074\uff27\075\uff27\077\uff27\100\uff27\101" +
    "\uff27\102\uff27\103\uff27\104\uff27\105\uff27\106\uff27\107\uff27" +
    "\110\uff27\111\uff27\112\uff27\001\002\000\160\010\uff2f\020" +
    "\uff2f\021\uff2f\022\uff2f\023\uff2f\024\uff2f\025\uff2f\026\uff2f" +
    "\027\uff2f\030\uff2f\031\uff2f\035\uff2f\036\uff2f\040\uff2f\041" +
    "\uff2f\042\uff2f\043\uff2f\044\uff2f\045\uff2f\046\uff2f\047\uff2f" +
    "\050\uff2f\051\uff2f\052\uff2f\053\uff2f\054\uff2f\055\uff2f\056" +
    "\uff2f\057\uff2f\060\uff2f\061\uff2f\062\uff2f\063\uff2f\064\uff2f" +
    "\065\uff2f\066\uff2f\067\uff2f\070\uff2f\071\uff2f\072\uff2f\073" +
    "\uff2f\074\uff2f\075\uff2f\077\uff2f\100\uff2f\101\uff2f\102\uff2f" +
    "\103\uff2f\104\uff2f\105\uff2f\106\uff2f\107\uff2f\110\uff2f\111" +
    "\uff2f\112\uff2f\001\002\000\160\010\uff63\020\uff63\021\uff63" +
    "\022\uff63\023\uff63\024\uff63\025\uff63\026\uff63\027\uff63\030" +
    "\uff63\031\uff63\035\uff63\036\uff63\040\uff63\041\uff63\042\uff63" +
    "\043\uff63\044\uff63\045\uff63\046\uff63\047\uff63\050\uff63\051" +
    "\uff63\052\uff63\053\uff63\054\uff63\055\uff63\056\uff63\057\uff63" +
    "\060\uff63\061\uff63\062\uff63\063\uff63\064\uff63\065\uff63\066" +
    "\uff63\067\uff63\070\uff63\071\uff63\072\uff63\073\uff63\074\uff63" +
    "\075\uff63\077\uff63\100\uff63\101\uff63\102\uff63\103\uff63\104" +
    "\uff63\105\uff63\106\uff63\107\uff63\110\uff63\111\uff63\112\uff63" +
    "\001\002\000\160\010\uff26\020\uff26\021\uff26\022\uff26\023" +
    "\uff26\024\uff26\025\uff26\026\uff26\027\uff26\030\uff26\031\uff26" +
    "\035\uff26\036\uff26\040\uff26\041\uff26\042\uff26\043\uff26\044" +
    "\uff26\045\uff26\046\uff26\047\uff26\050\uff26\051\uff26\052\uff26" +
    "\053\uff26\054\uff26\055\uff26\056\uff26\057\uff26\060\uff26\061" +
    "\uff26\062\uff26\063\uff26\064\uff26\065\uff26\066\uff26\067\uff26" +
    "\070\uff26\071\uff26\072\uff26\073\uff26\074\uff26\075\uff26\077" +
    "\uff26\100\uff26\101\uff26\102\uff26\103\uff26\104\uff26\105\uff26" +
    "\106\uff26\107\uff26\110\uff26\111\uff26\112\uff26\001\002\000" +
    "\160\010\uff30\020\uff30\021\uff30\022\uff30\023\uff30\024\uff30" +
    "\025\uff30\026\uff30\027\uff30\030\uff30\031\uff30\035\uff30\036" +
    "\uff30\040\uff30\041\uff30\042\uff30\043\uff30\044\uff30\045\uff30" +
    "\046\uff30\047\uff30\050\uff30\051\uff30\052\uff30\053\uff30\054" +
    "\uff30\055\uff30\056\uff30\057\uff30\060\uff30\061\uff30\062\uff30" +
    "\063\uff30\064\uff30\065\uff30\066\uff30\067\uff30\070\uff30\071" +
    "\uff30\072\uff30\073\uff30\074\uff30\075\uff30\077\uff30\100\uff30" +
    "\101\uff30\102\uff30\103\uff30\104\uff30\105\uff30\106\uff30\107" +
    "\uff30\110\uff30\111\uff30\112\uff30\001\002\000\160\010\uff1f" +
    "\020\uff1f\021\uff1f\022\uff1f\023\uff1f\024\uff1f\025\uff1f\026" +
    "\uff1f\027\uff1f\030\uff1f\031\uff1f\035\uff1f\036\uff1f\040\uff1f" +
    "\041\uff1f\042\uff1f\043\uff1f\044\uff1f\045\uff1f\046\uff1f\047" +
    "\uff1f\050\uff1f\051\uff1f\052\uff1f\053\uff1f\054\uff1f\055\uff1f" +
    "\056\uff1f\057\uff1f\060\uff1f\061\uff1f\062\uff1f\063\uff1f\064" +
    "\uff1f\065\uff1f\066\uff1f\067\uff1f\070\uff1f\071\uff1f\072\uff1f" +
    "\073\uff1f\074\uff1f\075\uff1f\077\uff1f\100\uff1f\101\uff1f\102" +
    "\uff1f\103\uff1f\104\uff1f\105\uff1f\106\uff1f\107\uff1f\110\uff1f" +
    "\111\uff1f\112\uff1f\001\002\000\160\010\uff20\020\uff20\021" +
    "\uff20\022\uff20\023\uff20\024\uff20\025\uff20\026\uff20\027\uff20" +
    "\030\uff20\031\uff20\035\uff20\036\uff20\040\uff20\041\uff20\042" +
    "\uff20\043\uff20\044\uff20\045\uff20\046\uff20\047\uff20\050\uff20" +
    "\051\uff20\052\uff20\053\uff20\054\uff20\055\uff20\056\uff20\057" +
    "\uff20\060\uff20\061\uff20\062\uff20\063\uff20\064\uff20\065\uff20" +
    "\066\uff20\067\uff20\070\uff20\071\uff20\072\uff20\073\uff20\074" +
    "\uff20\075\uff20\077\uff20\100\uff20\101\uff20\102\uff20\103\uff20" +
    "\104\uff20\105\uff20\106\uff20\107\uff20\110\uff20\111\uff20\112" +
    "\uff20\001\002\000\160\010\uff22\020\uff22\021\uff22\022\uff22" +
    "\023\uff22\024\uff22\025\uff22\026\uff22\027\uff22\030\uff22\031" +
    "\uff22\035\uff22\036\uff22\040\uff22\041\uff22\042\uff22\043\uff22" +
    "\044\uff22\045\uff22\046\uff22\047\uff22\050\uff22\051\uff22\052" +
    "\uff22\053\uff22\054\uff22\055\uff22\056\uff22\057\uff22\060\uff22" +
    "\061\uff22\062\uff22\063\uff22\064\uff22\065\uff22\066\uff22\067" +
    "\uff22\070\uff22\071\uff22\072\uff22\073\uff22\074\uff22\075\uff22" +
    "\077\uff22\100\uff22\101\uff22\102\uff22\103\uff22\104\uff22\105" +
    "\uff22\106\uff22\107\uff22\110\uff22\111\uff22\112\uff22\001\002" +
    "\000\160\010\uff2e\020\uff2e\021\uff2e\022\uff2e\023\uff2e\024" +
    "\uff2e\025\uff2e\026\uff2e\027\uff2e\030\uff2e\031\uff2e\035\uff2e" +
    "\036\uff2e\040\uff2e\041\uff2e\042\uff2e\043\uff2e\044\uff2e\045" +
    "\uff2e\046\uff2e\047\uff2e\050\uff2e\051\uff2e\052\uff2e\053\uff2e" +
    "\054\uff2e\055\uff2e\056\uff2e\057\uff2e\060\uff2e\061\uff2e\062" +
    "\uff2e\063\uff2e\064\uff2e\065\uff2e\066\uff2e\067\uff2e\070\uff2e" +
    "\071\uff2e\072\uff2e\073\uff2e\074\uff2e\075\uff2e\077\uff2e\100" +
    "\uff2e\101\uff2e\102\uff2e\103\uff2e\104\uff2e\105\uff2e\106\uff2e" +
    "\107\uff2e\110\uff2e\111\uff2e\112\uff2e\001\002\000\160\010" +
    "\uff14\020\uff14\021\uff14\022\uff14\023\uff14\024\uff14\025\uff14" +
    "\026\uff14\027\uff14\030\uff14\031\uff14\035\uff14\036\uff14\040" +
    "\uff14\041\uff14\042\uff14\043\uff14\044\uff14\045\uff14\046\uff14" +
    "\047\uff14\050\uff14\051\uff14\052\uff14\053\uff14\054\uff14\055" +
    "\uff14\056\uff14\057\uff14\060\uff14\061\uff14\062\uff14\063\uff14" +
    "\064\uff14\065\uff14\066\uff14\067\uff14\070\uff14\071\uff14\072" +
    "\uff14\073\uff14\074\uff14\075\uff14\077\uff14\100\uff14\101\uff14" +
    "\102\uff14\103\uff14\104\uff14\105\uff14\106\uff14\107\uff14\110" +
    "\uff14\111\uff14\112\uff14\001\002\000\160\010\uff0a\020\uff0a" +
    "\021\uff0a\022\uff0a\023\uff0a\024\uff0a\025\uff0a\026\uff0a\027" +
    "\uff0a\030\uff0a\031\uff0a\035\uff0a\036\uff0a\040\uff0a\041\uff0a" +
    "\042\uff0a\043\uff0a\044\uff0a\045\uff0a\046\uff0a\047\uff0a\050" +
    "\uff0a\051\uff0a\052\uff0a\053\uff0a\054\uff0a\055\uff0a\056\uff0a" +
    "\057\uff0a\060\uff0a\061\uff0a\062\uff0a\063\uff0a\064\uff0a\065" +
    "\uff0a\066\uff0a\067\uff0a\070\uff0a\071\uff0a\072\uff0a\073\uff0a" +
    "\074\uff0a\075\uff0a\077\uff0a\100\uff0a\101\uff0a\102\uff0a\103" +
    "\uff0a\104\uff0a\105\uff0a\106\uff0a\107\uff0a\110\uff0a\111\uff0a" +
    "\112\uff0a\001\002\000\160\010\uff64\020\uff64\021\uff64\022" +
    "\uff64\023\uff64\024\uff64\025\uff64\026\uff64\027\uff64\030\uff64" +
    "\031\uff64\035\uff64\036\uff64\040\uff64\041\uff64\042\uff64\043" +
    "\uff64\044\uff64\045\uff64\046\uff64\047\uff64\050\uff64\051\uff64" +
    "\052\uff64\053\uff64\054\uff64\055\uff64\056\uff64\057\uff64\060" +
    "\uff64\061\uff64\062\uff64\063\uff64\064\uff64\065\uff64\066\uff64" +
    "\067\uff64\070\uff64\071\uff64\072\uff64\073\uff64\074\uff64\075" +
    "\uff64\077\uff64\100\uff64\101\uff64\102\uff64\103\uff64\104\uff64" +
    "\105\uff64\106\uff64\107\uff64\110\uff64\111\uff64\112\uff64\001" +
    "\002\000\160\010\uff65\020\uff65\021\uff65\022\uff65\023\uff65" +
    "\024\uff65\025\uff65\026\uff65\027\uff65\030\uff65\031\uff65\035" +
    "\uff65\036\uff65\040\uff65\041\uff65\042\uff65\043\uff65\044\uff65" +
    "\045\uff65\046\uff65\047\uff65\050\uff65\051\uff65\052\uff65\053" +
    "\uff65\054\uff65\055\uff65\056\uff65\057\uff65\060\uff65\061\uff65" +
    "\062\uff65\063\uff65\064\uff65\065\uff65\066\uff65\067\uff65\070" +
    "\uff65\071\uff65\072\uff65\073\uff65\074\uff65\075\uff65\077\uff65" +
    "\100\uff65\101\uff65\102\uff65\103\uff65\104\uff65\105\uff65\106" +
    "\uff65\107\uff65\110\uff65\111\uff65\112\uff65\001\002\000\004" +
    "\106\u0120\001\002\000\160\010\uff35\020\uff35\021\uff35\022" +
    "\uff35\023\uff35\024\uff35\025\uff35\026\uff35\027\uff35\030\uff35" +
    "\031\uff35\035\uff35\036\uff35\040\uff35\041\uff35\042\uff35\043" +
    "\uff35\044\uff35\045\uff35\046\uff35\047\uff35\050\uff35\051\uff35" +
    "\052\uff35\053\uff35\054\uff35\055\uff35\056\uff35\057\uff35\060" +
    "\uff35\061\uff35\062\uff35\063\uff35\064\uff35\065\uff35\066\uff35" +
    "\067\uff35\070\uff35\071\uff35\072\uff35\073\uff35\074\uff35\075" +
    "\uff35\077\uff35\100\uff35\101\uff35\102\uff35\103\uff35\104\uff35" +
    "\105\uff35\106\uff35\107\uff35\110\uff35\111\uff35\112\uff35\001" +
    "\002\000\160\010\uff32\020\uff32\021\uff32\022\uff32\023\uff32" +
    "\024\uff32\025\uff32\026\uff32\027\uff32\030\uff32\031\uff32\035" +
    "\uff32\036\uff32\040\uff32\041\uff32\042\uff32\043\uff32\044\uff32" +
    "\045\uff32\046\uff32\047\uff32\050\uff32\051\uff32\052\uff32\053" +
    "\uff32\054\uff32\055\uff32\056\uff32\057\uff32\060\uff32\061\uff32" +
    "\062\uff32\063\uff32\064\uff32\065\uff32\066\uff32\067\uff32\070" +
    "\uff32\071\uff32\072\uff32\073\uff32\074\uff32\075\uff32\077\uff32" +
    "\100\uff32\101\uff32\102\uff32\103\uff32\104\uff32\105\uff32\106" +
    "\uff32\107\uff32\110\uff32\111\uff32\112\uff32\001\002\000\160" +
    "\010\uff2c\020\uff2c\021\uff2c\022\uff2c\023\uff2c\024\uff2c\025" +
    "\uff2c\026\uff2c\027\uff2c\030\uff2c\031\uff2c\035\uff2c\036\uff2c" +
    "\040\uff2c\041\uff2c\042\uff2c\043\uff2c\044\uff2c\045\uff2c\046" +
    "\uff2c\047\uff2c\050\uff2c\051\uff2c\052\uff2c\053\uff2c\054\uff2c" +
    "\055\uff2c\056\uff2c\057\uff2c\060\uff2c\061\uff2c\062\uff2c\063" +
    "\uff2c\064\uff2c\065\uff2c\066\uff2c\067\uff2c\070\uff2c\071\uff2c" +
    "\072\uff2c\073\uff2c\074\uff2c\075\uff2c\077\uff2c\100\uff2c\101" +
    "\uff2c\102\uff2c\103\uff2c\104\uff2c\105\uff2c\106\uff2c\107\uff2c" +
    "\110\uff2c\111\uff2c\112\uff2c\001\002\000\160\010\uff1a\020" +
    "\uff1a\021\uff1a\022\uff1a\023\uff1a\024\uff1a\025\uff1a\026\uff1a" +
    "\027\uff1a\030\uff1a\031\uff1a\035\uff1a\036\uff1a\040\uff1a\041" +
    "\uff1a\042\uff1a\043\uff1a\044\uff1a\045\uff1a\046\uff1a\047\uff1a" +
    "\050\uff1a\051\uff1a\052\uff1a\053\uff1a\054\uff1a\055\uff1a\056" +
    "\uff1a\057\uff1a\060\uff1a\061\uff1a\062\uff1a\063\uff1a\064\uff1a" +
    "\065\uff1a\066\uff1a\067\uff1a\070\uff1a\071\uff1a\072\uff1a\073" +
    "\uff1a\074\uff1a\075\uff1a\077\uff1a\100\uff1a\101\uff1a\102\uff1a" +
    "\103\uff1a\104\uff1a\105\uff1a\106\uff1a\107\uff1a\110\uff1a\111" +
    "\uff1a\112\uff1a\001\002\000\160\010\uff23\020\uff23\021\uff23" +
    "\022\uff23\023\uff23\024\uff23\025\uff23\026\uff23\027\uff23\030" +
    "\uff23\031\uff23\035\uff23\036\uff23\040\uff23\041\uff23\042\uff23" +
    "\043\uff23\044\uff23\045\uff23\046\uff23\047\uff23\050\uff23\051" +
    "\uff23\052\uff23\053\uff23\054\uff23\055\uff23\056\uff23\057\uff23" +
    "\060\uff23\061\uff23\062\uff23\063\uff23\064\uff23\065\uff23\066" +
    "\uff23\067\uff23\070\uff23\071\uff23\072\uff23\073\uff23\074\uff23" +
    "\075\uff23\077\uff23\100\uff23\101\uff23\102\uff23\103\uff23\104" +
    "\uff23\105\uff23\106\uff23\107\uff23\110\uff23\111\uff23\112\uff23" +
    "\001\002\000\160\010\uff62\020\uff62\021\uff62\022\uff62\023" +
    "\uff62\024\uff62\025\uff62\026\uff62\027\uff62\030\uff62\031\uff62" +
    "\035\uff62\036\uff62\040\uff62\041\uff62\042\uff62\043\uff62\044" +
    "\uff62\045\uff62\046\uff62\047\uff62\050\uff62\051\uff62\052\uff62" +
    "\053\uff62\054\uff62\055\uff62\056\uff62\057\uff62\060\uff62\061" +
    "\uff62\062\uff62\063\uff62\064\uff62\065\uff62\066\uff62\067\uff62" +
    "\070\uff62\071\uff62\072\uff62\073\uff62\074\uff62\075\uff62\077" +
    "\uff62\100\uff62\101\uff62\102\uff62\103\uff62\104\uff62\105\uff62" +
    "\106\uff62\107\uff62\110\uff62\111\uff62\112\uff62\001\002\000" +
    "\160\010\uff16\020\uff16\021\uff16\022\uff16\023\uff16\024\uff16" +
    "\025\uff16\026\uff16\027\uff16\030\uff16\031\uff16\035\uff16\036" +
    "\uff16\040\uff16\041\uff16\042\uff16\043\uff16\044\uff16\045\uff16" +
    "\046\uff16\047\uff16\050\uff16\051\uff16\052\uff16\053\uff16\054" +
    "\uff16\055\uff16\056\uff16\057\uff16\060\uff16\061\uff16\062\uff16" +
    "\063\uff16\064\uff16\065\uff16\066\uff16\067\uff16\070\uff16\071" +
    "\uff16\072\uff16\073\uff16\074\uff16\075\uff16\077\uff16\100\uff16" +
    "\101\uff16\102\uff16\103\uff16\104\uff16\105\uff16\106\uff16\107" +
    "\uff16\110\uff16\111\uff16\112\uff16\001\002\000\160\010\uff09" +
    "\020\uff09\021\uff09\022\uff09\023\uff09\024\uff09\025\uff09\026" +
    "\uff09\027\uff09\030\uff09\031\uff09\035\uff09\036\uff09\040\uff09" +
    "\041\uff09\042\uff09\043\uff09\044\uff09\045\uff09\046\uff09\047" +
    "\uff09\050\uff09\051\uff09\052\uff09\053\uff09\054\uff09\055\uff09" +
    "\056\uff09\057\uff09\060\uff09\061\uff09\062\uff09\063\uff09\064" +
    "\uff09\065\uff09\066\uff09\067\uff09\070\uff09\071\uff09\072\uff09" +
    "\073\uff09\074\uff09\075\uff09\077\uff09\100\uff09\101\uff09\102" +
    "\uff09\103\uff09\104\uff09\105\uff09\106\uff09\107\uff09\110\uff09" +
    "\111\uff09\112\uff09\001\002\000\160\010\uff1d\020\uff1d\021" +
    "\uff1d\022\uff1d\023\uff1d\024\uff1d\025\uff1d\026\uff1d\027\uff1d" +
    "\030\uff1d\031\uff1d\035\uff1d\036\uff1d\040\uff1d\041\uff1d\042" +
    "\uff1d\043\uff1d\044\uff1d\045\uff1d\046\uff1d\047\uff1d\050\uff1d" +
    "\051\uff1d\052\uff1d\053\uff1d\054\uff1d\055\uff1d\056\uff1d\057" +
    "\uff1d\060\uff1d\061\uff1d\062\uff1d\063\uff1d\064\uff1d\065\uff1d" +
    "\066\uff1d\067\uff1d\070\uff1d\071\uff1d\072\uff1d\073\uff1d\074" +
    "\uff1d\075\uff1d\077\uff1d\100\uff1d\101\uff1d\102\uff1d\103\uff1d" +
    "\104\uff1d\105\uff1d\106\uff1d\107\uff1d\110\uff1d\111\uff1d\112" +
    "\uff1d\001\002\000\160\010\uff0b\020\uff0b\021\uff0b\022\uff0b" +
    "\023\uff0b\024\uff0b\025\uff0b\026\uff0b\027\uff0b\030\uff0b\031" +
    "\uff0b\035\uff0b\036\uff0b\040\uff0b\041\uff0b\042\uff0b\043\uff0b" +
    "\044\uff0b\045\uff0b\046\uff0b\047\uff0b\050\uff0b\051\uff0b\052" +
    "\uff0b\053\uff0b\054\uff0b\055\uff0b\056\uff0b\057\uff0b\060\uff0b" +
    "\061\uff0b\062\uff0b\063\uff0b\064\uff0b\065\uff0b\066\uff0b\067" +
    "\uff0b\070\uff0b\071\uff0b\072\uff0b\073\uff0b\074\uff0b\075\uff0b" +
    "\077\uff0b\100\uff0b\101\uff0b\102\uff0b\103\uff0b\104\uff0b\105" +
    "\uff0b\106\uff0b\107\uff0b\110\uff0b\111\uff0b\112\uff0b\001\002" +
    "\000\160\010\uff2b\020\uff2b\021\uff2b\022\uff2b\023\uff2b\024" +
    "\uff2b\025\uff2b\026\uff2b\027\uff2b\030\uff2b\031\uff2b\035\uff2b" +
    "\036\uff2b\040\uff2b\041\uff2b\042\uff2b\043\uff2b\044\uff2b\045" +
    "\uff2b\046\uff2b\047\uff2b\050\uff2b\051\uff2b\052\uff2b\053\uff2b" +
    "\054\uff2b\055\uff2b\056\uff2b\057\uff2b\060\uff2b\061\uff2b\062" +
    "\uff2b\063\uff2b\064\uff2b\065\uff2b\066\uff2b\067\uff2b\070\uff2b" +
    "\071\uff2b\072\uff2b\073\uff2b\074\uff2b\075\uff2b\077\uff2b\100" +
    "\uff2b\101\uff2b\102\uff2b\103\uff2b\104\uff2b\105\uff2b\106\uff2b" +
    "\107\uff2b\110\uff2b\111\uff2b\112\uff2b\001\002\000\160\010" +
    "\uff1e\020\uff1e\021\uff1e\022\uff1e\023\uff1e\024\uff1e\025\uff1e" +
    "\026\uff1e\027\uff1e\030\uff1e\031\uff1e\035\uff1e\036\uff1e\040" +
    "\uff1e\041\uff1e\042\uff1e\043\uff1e\044\uff1e\045\uff1e\046\uff1e" +
    "\047\uff1e\050\uff1e\051\uff1e\052\uff1e\053\uff1e\054\uff1e\055" +
    "\uff1e\056\uff1e\057\uff1e\060\uff1e\061\uff1e\062\uff1e\063\uff1e" +
    "\064\uff1e\065\uff1e\066\uff1e\067\uff1e\070\uff1e\071\uff1e\072" +
    "\uff1e\073\uff1e\074\uff1e\075\uff1e\077\uff1e\100\uff1e\101\uff1e" +
    "\102\uff1e\103\uff1e\104\uff1e\105\uff1e\106\uff1e\107\uff1e\110" +
    "\uff1e\111\uff1e\112\uff1e\001\002\000\160\010\uff15\020\uff15" +
    "\021\uff15\022\uff15\023\uff15\024\uff15\025\uff15\026\uff15\027" +
    "\uff15\030\uff15\031\uff15\035\uff15\036\uff15\040\uff15\041\uff15" +
    "\042\uff15\043\uff15\044\uff15\045\uff15\046\uff15\047\uff15\050" +
    "\uff15\051\uff15\052\uff15\053\uff15\054\uff15\055\uff15\056\uff15" +
    "\057\uff15\060\uff15\061\uff15\062\uff15\063\uff15\064\uff15\065" +
    "\uff15\066\uff15\067\uff15\070\uff15\071\uff15\072\uff15\073\uff15" +
    "\074\uff15\075\uff15\077\uff15\100\uff15\101\uff15\102\uff15\103" +
    "\uff15\104\uff15\105\uff15\106\uff15\107\uff15\110\uff15\111\uff15" +
    "\112\uff15\001\002\000\160\010\uff0d\020\uff0d\021\uff0d\022" +
    "\uff0d\023\uff0d\024\uff0d\025\uff0d\026\uff0d\027\uff0d\030\uff0d" +
    "\031\uff0d\035\uff0d\036\uff0d\040\uff0d\041\uff0d\042\uff0d\043" +
    "\uff0d\044\uff0d\045\uff0d\046\uff0d\047\uff0d\050\uff0d\051\uff0d" +
    "\052\uff0d\053\uff0d\054\uff0d\055\uff0d\056\uff0d\057\uff0d\060" +
    "\uff0d\061\uff0d\062\uff0d\063\uff0d\064\uff0d\065\uff0d\066\uff0d" +
    "\067\uff0d\070\uff0d\071\uff0d\072\uff0d\073\uff0d\074\uff0d\075" +
    "\uff0d\077\uff0d\100\uff0d\101\uff0d\102\uff0d\103\uff0d\104\uff0d" +
    "\105\uff0d\106\uff0d\107\uff0d\110\uff0d\111\uff0d\112\uff0d\001" +
    "\002\000\160\010\uff18\020\uff18\021\uff18\022\uff18\023\uff18" +
    "\024\uff18\025\uff18\026\uff18\027\uff18\030\uff18\031\uff18\035" +
    "\uff18\036\uff18\040\uff18\041\uff18\042\uff18\043\uff18\044\uff18" +
    "\045\uff18\046\uff18\047\uff18\050\uff18\051\uff18\052\uff18\053" +
    "\uff18\054\uff18\055\uff18\056\uff18\057\uff18\060\uff18\061\uff18" +
    "\062\uff18\063\uff18\064\uff18\065\uff18\066\uff18\067\uff18\070" +
    "\uff18\071\uff18\072\uff18\073\uff18\074\uff18\075\uff18\077\uff18" +
    "\100\uff18\101\uff18\102\uff18\103\uff18\104\uff18\105\uff18\106" +
    "\uff18\107\uff18\110\uff18\111\uff18\112\uff18\001\002\000\160" +
    "\010\uff0e\020\uff0e\021\uff0e\022\uff0e\023\uff0e\024\uff0e\025" +
    "\uff0e\026\uff0e\027\uff0e\030\uff0e\031\uff0e\035\uff0e\036\uff0e" +
    "\040\uff0e\041\uff0e\042\uff0e\043\uff0e\044\uff0e\045\uff0e\046" +
    "\uff0e\047\uff0e\050\uff0e\051\uff0e\052\uff0e\053\uff0e\054\uff0e" +
    "\055\uff0e\056\uff0e\057\uff0e\060\uff0e\061\uff0e\062\uff0e\063" +
    "\uff0e\064\uff0e\065\uff0e\066\uff0e\067\uff0e\070\uff0e\071\uff0e" +
    "\072\uff0e\073\uff0e\074\uff0e\075\uff0e\077\uff0e\100\uff0e\101" +
    "\uff0e\102\uff0e\103\uff0e\104\uff0e\105\uff0e\106\uff0e\107\uff0e" +
    "\110\uff0e\111\uff0e\112\uff0e\001\002\000\160\010\uff1b\020" +
    "\uff1b\021\uff1b\022\uff1b\023\uff1b\024\uff1b\025\uff1b\026\uff1b" +
    "\027\uff1b\030\uff1b\031\uff1b\035\uff1b\036\uff1b\040\uff1b\041" +
    "\uff1b\042\uff1b\043\uff1b\044\uff1b\045\uff1b\046\uff1b\047\uff1b" +
    "\050\uff1b\051\uff1b\052\uff1b\053\uff1b\054\uff1b\055\uff1b\056" +
    "\uff1b\057\uff1b\060\uff1b\061\uff1b\062\uff1b\063\uff1b\064\uff1b" +
    "\065\uff1b\066\uff1b\067\uff1b\070\uff1b\071\uff1b\072\uff1b\073" +
    "\uff1b\074\uff1b\075\uff1b\077\uff1b\100\uff1b\101\uff1b\102\uff1b" +
    "\103\uff1b\104\uff1b\105\uff1b\106\uff1b\107\uff1b\110\uff1b\111" +
    "\uff1b\112\uff1b\001\002\000\160\010\uff29\020\uff29\021\uff29" +
    "\022\uff29\023\uff29\024\uff29\025\uff29\026\uff29\027\uff29\030" +
    "\uff29\031\uff29\035\uff29\036\uff29\040\uff29\041\uff29\042\uff29" +
    "\043\uff29\044\uff29\045\uff29\046\uff29\047\uff29\050\uff29\051" +
    "\uff29\052\uff29\053\uff29\054\uff29\055\uff29\056\uff29\057\uff29" +
    "\060\uff29\061\uff29\062\uff29\063\uff29\064\uff29\065\uff29\066" +
    "\uff29\067\uff29\070\uff29\071\uff29\072\uff29\073\uff29\074\uff29" +
    "\075\uff29\077\uff29\100\uff29\101\uff29\102\uff29\103\uff29\104" +
    "\uff29\105\uff29\106\uff29\107\uff29\110\uff29\111\uff29\112\uff29" +
    "\001\002\000\160\010\uff37\020\uff37\021\uff37\022\uff37\023" +
    "\uff37\024\uff37\025\uff37\026\uff37\027\uff37\030\uff37\031\uff37" +
    "\035\uff37\036\uff37\040\uff37\041\uff37\042\uff37\043\uff37\044" +
    "\uff37\045\uff37\046\uff37\047\uff37\050\uff37\051\uff37\052\uff37" +
    "\053\uff37\054\uff37\055\uff37\056\uff37\057\uff37\060\uff37\061" +
    "\uff37\062\uff37\063\uff37\064\uff37\065\uff37\066\uff37\067\uff37" +
    "\070\uff37\071\uff37\072\uff37\073\uff37\074\uff37\075\uff37\077" +
    "\uff37\100\uff37\101\uff37\102\uff37\103\uff37\104\uff37\105\uff37" +
    "\106\uff37\107\uff37\110\uff37\111\uff37\112\uff37\001\002\000" +
    "\160\010\uff3c\020\uff3c\021\uff3c\022\uff3c\023\uff3c\024\uff3c" +
    "\025\uff3c\026\uff3c\027\uff3c\030\uff3c\031\uff3c\035\uff3c\036" +
    "\uff3c\040\uff3c\041\uff3c\042\uff3c\043\uff3c\044\uff3c\045\uff3c" +
    "\046\uff3c\047\uff3c\050\uff3c\051\uff3c\052\uff3c\053\uff3c\054" +
    "\uff3c\055\uff3c\056\uff3c\057\uff3c\060\uff3c\061\uff3c\062\uff3c" +
    "\063\uff3c\064\uff3c\065\uff3c\066\uff3c\067\uff3c\070\uff3c\071" +
    "\uff3c\072\uff3c\073\uff3c\074\uff3c\075\uff3c\077\uff3c\100\uff3c" +
    "\101\uff3c\102\uff3c\103\uff3c\104\uff3c\105\uff3c\106\uff3c\107" +
    "\uff3c\110\uff3c\111\uff3c\112\uff3c\001\002\000\160\010\u0103" +
    "\020\361\021\u0119\022\346\023\356\024\u0115\025\344\026" +
    "\u011b\027\u0104\030\343\031\371\035\366\036\342\040\375" +
    "\041\350\042\u0105\043\u010d\044\u0118\045\u0114\046\364\047" +
    "\365\050\370\051\341\052\u0100\053\367\054\u0108\055\347" +
    "\056\u0107\057\374\060\345\061\373\062\372\063\u010e\064" +
    "\u010b\065\351\066\u0113\067\u0106\070\363\071\u0111\072\u011a" +
    "\073\u0109\074\u011d\075\u010f\077\376\100\354\101\362\102" +
    "\360\103\357\104\355\105\u0112\106\u0110\107\340\110\u010c" +
    "\111\377\112\u010a\001\002\000\160\010\uff2a\020\uff2a\021" +
    "\uff2a\022\uff2a\023\uff2a\024\uff2a\025\uff2a\026\uff2a\027\uff2a" +
    "\030\uff2a\031\uff2a\035\uff2a\036\uff2a\040\uff2a\041\uff2a\042" +
    "\uff2a\043\uff2a\044\uff2a\045\uff2a\046\uff2a\047\uff2a\050\uff2a" +
    "\051\uff2a\052\uff2a\053\uff2a\054\uff2a\055\uff2a\056\uff2a\057" +
    "\uff2a\060\uff2a\061\uff2a\062\uff2a\063\uff2a\064\uff2a\065\uff2a" +
    "\066\uff2a\067\uff2a\070\uff2a\071\uff2a\072\uff2a\073\uff2a\074" +
    "\uff2a\075\uff2a\077\uff2a\100\uff2a\101\uff2a\102\uff2a\103\uff2a" +
    "\104\uff2a\105\uff2a\106\uff2a\107\uff2a\110\uff2a\111\uff2a\112" +
    "\uff2a\001\002\000\160\010\uff3a\020\uff3a\021\uff3a\022\uff3a" +
    "\023\uff3a\024\uff3a\025\uff3a\026\uff3a\027\uff3a\030\uff3a\031" +
    "\uff3a\035\uff3a\036\uff3a\040\uff3a\041\uff3a\042\uff3a\043\uff3a" +
    "\044\uff3a\045\uff3a\046\uff3a\047\uff3a\050\uff3a\051\uff3a\052" +
    "\uff3a\053\uff3a\054\uff3a\055\uff3a\056\uff3a\057\uff3a\060\uff3a" +
    "\061\uff3a\062\uff3a\063\uff3a\064\uff3a\065\uff3a\066\uff3a\067" +
    "\uff3a\070\uff3a\071\uff3a\072\uff3a\073\uff3a\074\uff3a\075\uff3a" +
    "\077\uff3a\100\uff3a\101\uff3a\102\uff3a\103\uff3a\104\uff3a\105" +
    "\uff3a\106\uff3a\107\uff3a\110\uff3a\111\uff3a\112\uff3a\001\002" +
    "\000\160\010\uff17\020\uff17\021\uff17\022\uff17\023\uff17\024" +
    "\uff17\025\uff17\026\uff17\027\uff17\030\uff17\031\uff17\035\uff17" +
    "\036\uff17\040\uff17\041\uff17\042\uff17\043\uff17\044\uff17\045" +
    "\uff17\046\uff17\047\uff17\050\uff17\051\uff17\052\uff17\053\uff17" +
    "\054\uff17\055\uff17\056\uff17\057\uff17\060\uff17\061\uff17\062" +
    "\uff17\063\uff17\064\uff17\065\uff17\066\uff17\067\uff17\070\uff17" +
    "\071\uff17\072\uff17\073\uff17\074\uff17\075\uff17\077\uff17\100" +
    "\uff17\101\uff17\102\uff17\103\uff17\104\uff17\105\uff17\106\uff17" +
    "\107\uff17\110\uff17\111\uff17\112\uff17\001\002\000\160\010" +
    "\uff33\020\uff33\021\uff33\022\uff33\023\uff33\024\uff33\025\uff33" +
    "\026\uff33\027\uff33\030\uff33\031\uff33\035\uff33\036\uff33\040" +
    "\uff33\041\uff33\042\uff33\043\uff33\044\uff33\045\uff33\046\uff33" +
    "\047\uff33\050\uff33\051\uff33\052\uff33\053\uff33\054\uff33\055" +
    "\uff33\056\uff33\057\uff33\060\uff33\061\uff33\062\uff33\063\uff33" +
    "\064\uff33\065\uff33\066\uff33\067\uff33\070\uff33\071\uff33\072" +
    "\uff33\073\uff33\074\uff33\075\uff33\077\uff33\100\uff33\101\uff33" +
    "\102\uff33\103\uff33\104\uff33\105\uff33\106\uff33\107\uff33\110" +
    "\uff33\111\uff33\112\uff33\001\002\000\160\010\uff66\020\uff66" +
    "\021\uff66\022\uff66\023\uff66\024\uff66\025\uff66\026\uff66\027" +
    "\uff66\030\uff66\031\uff66\035\uff66\036\uff66\040\uff66\041\uff66" +
    "\042\uff66\043\uff66\044\uff66\045\uff66\046\uff66\047\uff66\050" +
    "\uff66\051\uff66\052\uff66\053\uff66\054\uff66\055\uff66\056\uff66" +
    "\057\uff66\060\uff66\061\uff66\062\uff66\063\uff66\064\uff66\065" +
    "\uff66\066\uff66\067\uff66\070\uff66\071\uff66\072\uff66\073\uff66" +
    "\074\uff66\075\uff66\077\uff66\100\uff66\101\uff66\102\uff66\103" +
    "\uff66\104\uff66\105\uff66\106\uff66\107\uff66\110\uff66\111\uff66" +
    "\112\uff66\001\002\000\004\106\u011f\001\002\000\160\010" +
    "\uff3d\020\uff3d\021\uff3d\022\uff3d\023\uff3d\024\uff3d\025\uff3d" +
    "\026\uff3d\027\uff3d\030\uff3d\031\uff3d\035\uff3d\036\uff3d\040" +
    "\uff3d\041\uff3d\042\uff3d\043\uff3d\044\uff3d\045\uff3d\046\uff3d" +
    "\047\uff3d\050\uff3d\051\uff3d\052\uff3d\053\uff3d\054\uff3d\055" +
    "\uff3d\056\uff3d\057\uff3d\060\uff3d\061\uff3d\062\uff3d\063\uff3d" +
    "\064\uff3d\065\uff3d\066\uff3d\067\uff3d\070\uff3d\071\uff3d\072" +
    "\uff3d\073\uff3d\074\uff3d\075\uff3d\077\uff3d\100\uff3d\101\uff3d" +
    "\102\uff3d\103\uff3d\104\uff3d\105\uff3d\106\uff3d\107\uff3d\110" +
    "\uff3d\111\uff3d\112\uff3d\001\002\000\004\077\uff60\001\002" +
    "\000\004\077\uff5f\001\002\000\160\010\uff68\020\uff68\021" +
    "\uff68\022\uff68\023\uff68\024\uff68\025\uff68\026\uff68\027\uff68" +
    "\030\uff68\031\uff68\035\uff68\036\uff68\040\uff68\041\uff68\042" +
    "\uff68\043\uff68\044\uff68\045\uff68\046\uff68\047\uff68\050\uff68" +
    "\051\uff68\052\uff68\053\uff68\054\uff68\055\uff68\056\uff68\057" +
    "\uff68\060\uff68\061\uff68\062\uff68\063\uff68\064\uff68\065\uff68" +
    "\066\uff68\067\uff68\070\uff68\071\uff68\072\uff68\073\uff68\074" +
    "\uff68\075\uff68\077\uff68\100\uff68\101\uff68\102\uff68\103\uff68" +
    "\104\uff68\105\uff68\106\uff68\107\uff68\110\uff68\111\uff68\112" +
    "\uff68\001\002\000\004\076\u0124\001\002\000\156\010\u0103" +
    "\020\361\021\u0119\022\346\023\356\024\u0115\025\344\026" +
    "\u011b\027\u0104\030\343\031\371\035\366\036\342\040\375" +
    "\041\350\042\u0105\043\u010d\044\u0118\045\u0114\046\364\047" +
    "\365\050\370\051\341\052\u0100\053\367\054\u0108\055\347" +
    "\056\u0107\057\374\060\345\061\373\062\372\063\u010e\064" +
    "\u010b\065\351\066\u0113\067\u0106\070\363\071\u0111\072\u011a" +
    "\073\u0109\075\u010f\077\376\100\354\101\362\102\360\103" +
    "\357\104\355\105\u0112\106\u0110\107\340\110\u010c\111\377" +
    "\112\u010a\001\002\000\016\020\114\021\145\022\152\037" +
    "\u0125\106\uff5e\111\u0126\001\002\000\004\111\u0135\001\002" +
    "\000\010\003\u012c\076\u012a\106\uff5c\001\002\000\004\106" +
    "\uff5d\001\002\000\004\106\u0129\001\002\000\004\077\uff61" +
    "\001\002\000\014\020\114\021\145\022\152\037\u0131\111" +
    "\u0132\001\002\000\006\076\u012d\106\uff5b\001\002\000\006" +
    "\076\uff53\106\uff53\001\002\000\006\037\u012e\111\u012f\001" +
    "\002\000\004\111\u0130\001\002\000\006\076\uff56\106\uff56" +
    "\001\002\000\006\076\uff54\106\uff54\001\002\000\004\111" +
    "\u0134\001\002\000\006\076\uff57\106\uff57\001\002\000\006" +
    "\076\uff58\106\uff58\001\002\000\006\076\uff55\106\uff55\001" +
    "\002\000\010\003\u012c\076\u012a\106\uff5a\001\002\000\006" +
    "\076\u012d\106\uff59\001\002\000\004\104\u0138\001\002\000" +
    "\062\003\uff9e\004\uff9e\010\uff9e\020\uff9e\021\uff9e\022\uff9e" +
    "\023\uff9e\024\uff9e\025\uff9e\036\uff9e\051\uff9e\061\uff9e\062" +
    "\uff9e\063\uff9e\064\uff9e\065\uff9e\066\uff9e\067\uff9e\070\uff9e" +
    "\071\uff9e\072\uff9e\073\uff9e\104\uff9e\111\uff9e\001\002\000" +
    "\004\106\u013a\001\002\000\004\077\u013b\001\002\000\056" +
    "\003\uff42\004\uff42\010\uff42\020\uff42\021\uff42\022\uff42\023" +
    "\uff42\024\uff42\025\uff42\036\uff42\051\uff42\061\uff42\064\uff42" +
    "\065\uff42\066\uff42\067\uff42\070\uff42\071\uff42\072\uff42\073" +
    "\uff42\104\uff42\111\uff42\001\002\000\056\003\uff44\004\uff44" +
    "\010\uff44\020\uff44\021\uff44\022\uff44\023\uff44\024\uff44\025" +
    "\uff44\036\uff44\051\uff44\061\uff44\064\uff44\065\uff44\066\uff44" +
    "\067\uff44\070\uff44\071\uff44\072\uff44\073\uff44\104\uff44\111" +
    "\uff44\001\002\000\056\003\uff43\004\uff43\010\uff43\020\uff43" +
    "\021\uff43\022\uff43\023\uff43\024\uff43\025\uff43\036\uff43\051" +
    "\uff43\061\uff43\064\uff43\065\uff43\066\uff43\067\uff43\070\uff43" +
    "\071\uff43\072\uff43\073\uff43\104\uff43\111\uff43\001\002\000" +
    "\004\002\uffff\001\002\000\030\003\163\010\u0141\017\167" +
    "\020\114\021\145\022\152\027\153\105\165\107\160\110" +
    "\162\111\161\001\002\000\004\077\uffac\001\002\000\004" +
    "\105\u0142\001\002\000\004\106\u0143\001\002\000\004\077" +
    "\u0144\001\002\000\056\003\uff40\004\uff40\010\uff40\020\uff40" +
    "\021\uff40\022\uff40\023\uff40\024\uff40\025\uff40\036\uff40\051" +
    "\uff40\061\uff40\064\uff40\065\uff40\066\uff40\067\uff40\070\uff40" +
    "\071\uff40\072\uff40\073\uff40\104\uff40\111\uff40\001\002\000" +
    "\022\003\245\017\251\027\153\046\247\105\165\107\160" +
    "\110\162\111\161\001\002\000\004\106\u0147\001\002\000" +
    "\004\103\u0148\001\002\000\050\003\uffa1\004\uffa1\010\uffa1" +
    "\020\uffa1\021\uffa1\022\uffa1\023\uffa1\024\uffa1\025\uffa1\036" +
    "\uffa1\051\uffa1\061\uffa1\064\uffa1\070\uffa1\071\uffa1\072\uffa1" +
    "\073\uffa1\104\uffa1\111\uffa1\001\002\000\056\003\uff46\004" +
    "\uff46\010\uff46\020\uff46\021\uff46\022\uff46\023\uff46\024\uff46" +
    "\025\uff46\036\uff46\051\uff46\061\uff46\064\uff46\065\uff46\066" +
    "\uff46\067\uff46\070\uff46\071\uff46\072\uff46\073\uff46\104\uff46" +
    "\111\uff46\001\002\000\056\003\uff49\004\uff49\010\uff49\020" +
    "\uff49\021\uff49\022\uff49\023\uff49\024\uff49\025\uff49\036\uff49" +
    "\051\uff49\061\uff49\064\uff49\065\uff49\066\uff49\067\uff49\070" +
    "\uff49\071\uff49\072\uff49\073\uff49\104\uff49\111\uff49\001\002" +
    "\000\014\003\u014f\023\024\024\035\025\037\111\u014c\001" +
    "\002\000\004\035\u0154\001\002\000\004\111\u0151\001\002" +
    "\000\004\077\u0150\001\002\000\006\077\uff83\111\uffe8\001" +
    "\002\000\022\003\uff89\017\uff89\027\uff89\046\uff89\105\uff89" +
    "\107\uff89\110\uff89\111\uff89\001\002\000\004\035\u0152\001" +
    "\002\000\020\003\163\017\167\027\153\105\165\107\160" +
    "\110\162\111\161\001\002\000\004\077\uff84\001\002\000" +
    "\014\027\153\105\165\107\160\110\162\111\161\001\002" +
    "\000\016\026\172\027\174\030\176\031\175\032\171\077" +
    "\uff85\001\002\000\004\111\u0157\001\002\000\004\105\u0158" +
    "\001\002\000\016\027\153\105\165\106\uff7c\107\160\110" +
    "\162\111\161\001\002\000\004\106\u015a\001\002\000\010" +
    "\076\uff77\077\uff77\106\uff77\001\002\000\056\003\uff48\004" +
    "\uff48\010\uff48\020\uff48\021\uff48\022\uff48\023\uff48\024\uff48" +
    "\025\uff48\036\uff48\051\uff48\061\uff48\064\uff48\065\uff48\066" +
    "\uff48\067\uff48\070\uff48\071\uff48\072\uff48\073\uff48\104\uff48" +
    "\111\uff48\001\002\000\004\104\u015d\001\002\000\004\071" +
    "\u015e\001\002\000\004\105\u015f\001\002\000\022\003\245" +
    "\017\251\027\153\046\247\105\165\107\160\110\162\111" +
    "\161\001\002\000\004\106\u0161\001\002\000\004\077\u0162" +
    "\001\002\000\056\003\uff8a\004\uff8a\010\uff8a\020\uff8a\021" +
    "\uff8a\022\uff8a\023\uff8a\024\uff8a\025\uff8a\036\uff8a\051\uff8a" +
    "\061\uff8a\064\uff8a\065\uff8a\066\uff8a\067\uff8a\070\uff8a\071" +
    "\uff8a\072\uff8a\073\uff8a\104\uff8a\111\uff8a\001\002\000\006" +
    "\066\u016d\104\uff94\001\002\000\056\003\124\004\126\010" +
    "\125\020\114\021\145\022\110\023\024\024\035\025\037" +
    "\036\107\051\106\061\120\064\132\065\uff3e\066\uff3e\067" +
    "\uff3e\070\115\071\141\072\147\073\130\104\uff3e\111\122" +
    "\001\002\000\010\065\u0166\066\uff93\104\uff93\001\002\000" +
    "\020\003\163\017\167\027\153\105\165\107\160\110\162" +
    "\111\161\001\002\000\004\100\u0168\001\002\000\056\003" +
    "\uff91\004\uff91\010\uff91\020\uff91\021\uff91\022\uff91\023\uff91" +
    "\024\uff91\025\uff91\036\uff91\051\uff91\061\uff91\064\uff91\065" +
    "\uff91\066\uff91\067\uff91\070\uff91\071\uff91\072\uff91\073\uff91" +
    "\104\uff91\111\uff91\001\002\000\006\066\uff92\104\uff92\001" +
    "\002\000\012\065\uff8f\066\uff8f\067\u016b\104\uff8f\001\002" +
    "\000\004\077\u016c\001\002\000\010\065\uff90\066\uff90\104" +
    "\uff90\001\002\000\004\100\u0170\001\002\000\004\104\u016f" +
    "\001\002\000\056\003\uff96\004\uff96\010\uff96\020\uff96\021" +
    "\uff96\022\uff96\023\uff96\024\uff96\025\uff96\036\uff96\051\uff96" +
    "\061\uff96\064\uff96\065\uff96\066\uff96\067\uff96\070\uff96\071" +
    "\uff96\072\uff96\073\uff96\104\uff96\111\uff96\001\002\000\050" +
    "\003\124\004\126\010\125\020\114\021\145\022\110\023" +
    "\024\024\035\025\037\036\107\051\106\061\120\064\132" +
    "\067\uff3e\070\115\071\141\072\147\073\130\111\122\001" +
    "\002\000\004\067\u0172\001\002\000\004\077\u0173\001\002" +
    "\000\004\104\uff95\001\002\000\004\111\u0175\001\002\000" +
    "\010\003\u0178\075\214\111\u0176\001\002\000\010\076\uff70" +
    "\077\uff70\105\u017e\001\002\000\004\077\uff75\001\002\000" +
    "\006\076\uff6d\077\uff6d\001\002\000\006\076\u017a\077\uff74" +
    "\001\002\000\006\003\u0178\111\u0176\001\002\000\004\077" +
    "\uff73\001\002\000\006\076\u017a\077\uff72\001\002\000\004" +
    "\077\uff71\001\002\000\016\027\153\105\165\106\u017f\107" +
    "\160\110\162\111\161\001\002\000\006\076\uff6f\077\uff6f" +
    "\001\002\000\004\106\u0181\001\002\000\006\076\uff6e\077" +
    "\uff6e\001\002\000\004\106\u0183\001\002\000\004\077\u0184" +
    "\001\002\000\056\003\uff4b\004\uff4b\010\uff4b\020\uff4b\021" +
    "\uff4b\022\uff4b\023\uff4b\024\uff4b\025\uff4b\036\uff4b\051\uff4b" +
    "\061\uff4b\064\uff4b\065\uff4b\066\uff4b\067\uff4b\070\uff4b\071" +
    "\uff4b\072\uff4b\073\uff4b\104\uff4b\111\uff4b\001\002\000\004" +
    "\074\u0186\001\002\000\156\010\u0103\020\361\021\u0119\022" +
    "\346\023\356\024\u0115\025\344\026\u011b\027\u0104\030\343" +
    "\031\371\035\366\036\342\040\375\041\350\042\u0105\043" +
    "\u010d\044\u0118\045\u0114\046\364\047\365\050\370\051\341" +
    "\052\u0100\053\367\054\u0108\055\347\056\u0107\057\374\060" +
    "\345\061\373\062\372\063\u010e\064\u010b\065\351\066\u0113" +
    "\067\u0106\070\363\071\u0111\072\u011a\073\u0109\075\u010f\077" +
    "\376\100\354\101\362\102\360\103\357\104\355\105\u0112" +
    "\106\u0110\107\340\110\u010c\111\377\112\u010a\001\002\000" +
    "\004\074\u0191\001\002\000\156\010\u0103\020\361\021\u0119" +
    "\022\346\023\356\024\u0115\025\344\026\u011b\027\u0104\030" +
    "\343\031\371\035\366\036\342\040\375\041\350\042\u0105" +
    "\043\u010d\044\u0118\045\u0114\046\364\047\365\050\370\051" +
    "\341\052\u0100\053\367\054\u0108\055\347\056\u0107\057\374" +
    "\060\345\061\373\062\372\063\u010e\064\u010b\065\351\066" +
    "\u0113\067\u0106\070\363\071\u0111\072\u011a\073\u0109\075\u010f" +
    "\077\376\100\354\101\362\102\360\103\357\104\355\105" +
    "\u0112\106\u0110\107\340\110\u010c\111\377\112\u010a\001\002" +
    "\000\004\074\u018a\001\002\000\004\076\u018b\001\002\000" +
    "\006\037\u018d\111\u018c\001\002\000\004\106\u0190\001\002" +
    "\000\004\111\u018e\001\002\000\004\106\u018f\001\002\000" +
    "\004\077\uff6c\001\002\000\004\077\uff6a\001\002\000\004" +
    "\076\u0192\001\002\000\006\037\u0193\111\u0194\001\002\000" +
    "\004\111\u0196\001\002\000\004\106\u0195\001\002\000\004" +
    "\077\uff69\001\002\000\004\106\u0197\001\002\000\004\077" +
    "\uff6b\001\002\000\010\033\u019f\034\u019d\035\u019e\001\002" +
    "\000\004\106\uff7f\001\002\000\004\106\u019b\001\002\000" +
    "\004\103\u019c\001\002\000\050\003\uff87\004\uff87\010\uff87" +
    "\020\uff87\021\uff87\022\uff87\023\uff87\024\uff87\025\uff87\036" +
    "\uff87\051\uff87\061\uff87\064\uff87\070\uff87\071\uff87\072\uff87" +
    "\073\uff87\104\uff87\111\uff87\001\002\000\004\106\uff80\001" +
    "\002\000\014\027\153\105\165\107\160\110\162\111\161" +
    "\001\002\000\004\106\uff81\001\002\000\016\026\172\027" +
    "\174\030\176\031\175\032\171\106\uff82\001\002\000\004" +
    "\104\u01a2\001\002\000\056\003\uff86\004\uff86\010\uff86\020" +
    "\uff86\021\uff86\022\uff86\023\uff86\024\uff86\025\uff86\036\uff86" +
    "\051\uff86\061\uff86\064\uff86\065\uff86\066\uff86\067\uff86\070" +
    "\uff86\071\uff86\072\uff86\073\uff86\104\uff86\111\uff86\001\002" +
    "\000\056\003\uff47\004\uff47\010\uff47\020\uff47\021\uff47\022" +
    "\uff47\023\uff47\024\uff47\025\uff47\036\uff47\051\uff47\061\uff47" +
    "\064\uff47\065\uff47\066\uff47\067\uff47\070\uff47\071\uff47\072" +
    "\uff47\073\uff47\104\uff47\111\uff47\001\002\000\004\077\uffb4" +
    "\001\002\000\014\003\u01b1\035\u01b2\076\uffb2\077\uffb2\101" +
    "\u01b4\001\002\000\006\076\u01a9\077\uffaf\001\002\000\006" +
    "\076\uffb1\077\uffb1\001\002\000\004\077\uffb5\001\002\000" +
    "\006\003\u01a7\111\u01ac\001\002\000\006\076\u01ab\077\uffb0" +
    "\001\002\000\006\003\u01a7\111\u01ac\001\002\000\010\035" +
    "\u01ae\076\uffb2\077\uffb2\001\002\000\006\076\uffad\077\uffad" +
    "\001\002\000\026\003\163\017\167\020\114\021\145\022" +
    "\152\027\153\105\165\107\160\110\162\111\161\001\002" +
    "\000\006\076\uffb3\077\uffb3\001\002\000\006\076\uffae\077" +
    "\uffae\001\002\000\004\077\uffa5\001\002\000\030\003\163" +
    "\010\u01b8\017\167\020\114\021\145\022\152\027\153\105" +
    "\165\107\160\110\162\111\161\001\002\000\004\077\uffa8" +
    "\001\002\000\014\027\044\105\052\107\047\110\051\111" +
    "\050\001\002\000\016\026\060\027\062\030\064\031\063" +
    "\032\057\102\u01b6\001\002\000\010\003\u01b1\077\uffa7\101" +
    "\u01b4\001\002\000\004\077\uffa6\001\002\000\004\105\u01b9" +
    "\001\002\000\004\106\u01ba\001\002\000\004\077\u01bb\001" +
    "\002\000\056\003\uff41\004\uff41\010\uff41\020\uff41\021\uff41" +
    "\022\uff41\023\uff41\024\uff41\025\uff41\036\uff41\051\uff41\061" +
    "\uff41\064\uff41\065\uff41\066\uff41\067\uff41\070\uff41\071\uff41" +
    "\072\uff41\073\uff41\104\uff41\111\uff41\001\002\000\004\077" +
    "\u01bf\001\002\000\014\003\u01b1\035\u01ae\076\uffb2\077\uffb2" +
    "\101\u01b4\001\002\000\004\077\uffb6\001\002\000\022\003" +
    "\ufff5\004\ufff5\022\ufff5\023\ufff5\024\ufff5\025\ufff5\056\ufff5" +
    "\060\ufff5\001\002\000\022\003\ufff3\004\ufff3\022\ufff3\023" +
    "\ufff3\024\ufff3\025\ufff3\056\ufff3\060\ufff3\001\002\000\004" +
    "\056\ufff2\001\002\000\022\003\ufff4\004\ufff4\022\ufff4\023" +
    "\ufff4\024\ufff4\025\ufff4\056\ufff4\060\ufff4\001\002\000\022" +
    "\003\ufff7\004\ufff7\022\ufff7\023\ufff7\024\ufff7\025\ufff7\056" +
    "\ufff7\060\ufff7\001\002\000\004\111\u01c5\001\002\000\006" +
    "\003\u0178\111\u0176\001\002\000\004\006\u01c9\001\002\000" +
    "\004\006\ufff9\001\002\000\004\055\u01ca\001\002\000\004" +
    "\055\ufffa\001\002\000\024\003\ufffc\004\ufffc\011\ufffc\022" +
    "\ufffc\023\ufffc\024\ufffc\025\ufffc\056\ufffc\060\ufffc\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01c8\000\010\002\007\004\006\007\004\001\001\000" +
    "\002\001\001\000\004\011\u01c5\001\001\000\002\001\001" +
    "\000\006\021\012\022\011\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\122\022\001\001\000\006\021\012" +
    "\022\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\012\027\013\032\016" +
    "\031\037\025\074\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\012" +
    "\027\013\u01c0\016\031\037\025\074\026\001\001\000\002" +
    "\001\001\000\010\040\u01a5\042\u01bd\067\u01bb\001\001\000" +
    "\004\003\072\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\040\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\006\052" +
    "\112\044\116\045\001\001\000\004\112\071\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\112\044\116\055\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\112\044\116\070\001\001\000" +
    "\006\112\044\116\067\001\001\000\002\001\001\000\006" +
    "\112\044\116\066\001\001\000\006\112\044\116\065\001" +
    "\001\000\006\112\044\116\064\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\064\016\100\017\110" +
    "\020\111\023\120\036\115\043\136\045\147\047\135\050" +
    "\134\051\133\055\130\056\103\062\132\063\141\064\137" +
    "\073\116\074\112\075\142\076\104\077\102\100\145\104" +
    "\101\106\126\117\143\120\122\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\040\u01a5\042\u01a7\067\u01a3\001\001" +
    "\000\002\001\001\000\064\016\100\017\110\020\111\023" +
    "\120\036\115\043\136\045\147\047\135\050\134\051\133" +
    "\055\130\056\103\062\132\063\141\064\137\073\116\074" +
    "\112\075\142\076\104\077\102\100\145\104\101\106\126" +
    "\117\143\120\u01a0\001\001\000\002\001\001\000\004\121" +
    "\u0199\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\060\u0162\061\u0164\111\u0163\001\001\000" +
    "\064\016\100\017\110\020\111\023\120\036\115\043\136" +
    "\045\147\047\135\050\134\051\133\055\130\056\103\062" +
    "\132\063\141\064\137\073\116\074\112\075\142\076\104" +
    "\077\102\100\145\104\101\106\126\117\143\120\u015b\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\046\203\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\064\016\100\017\110\020\111\023\120\036\115\043\136" +
    "\045\147\047\135\050\134\051\133\055\130\056\103\062" +
    "\132\063\141\064\137\073\116\074\112\075\142\076\104" +
    "\077\102\100\145\104\101\106\126\117\143\120\u0136\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\053\312\054\311\107\313\001" +
    "\001\000\064\016\100\017\110\020\111\023\120\036\115" +
    "\043\136\045\147\047\135\050\134\051\133\055\130\056" +
    "\103\062\132\063\141\064\137\073\116\074\112\075\142" +
    "\076\104\077\102\100\145\104\101\106\126\117\143\120" +
    "\306\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\024" +
    "\241\025\154\026\242\027\245\030\237\033\240\034\247" +
    "\035\243\045\153\001\001\000\064\016\100\017\110\020" +
    "\111\023\120\036\115\043\136\045\147\047\135\050\134" +
    "\051\133\055\130\056\103\062\132\063\141\064\137\073" +
    "\116\074\112\075\142\076\104\077\102\100\145\104\101" +
    "\106\126\117\143\120\236\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\014\163\024\155\025\154\044\156\045\153\073\165\001" +
    "\001\000\002\001\001\000\006\025\210\045\153\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\046\203\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\024\167\025\154\045\153\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\024\202\025" +
    "\154\045\153\001\001\000\010\024\201\025\154\045\153" +
    "\001\001\000\002\001\001\000\010\024\200\025\154\045" +
    "\153\001\001\000\010\024\177\025\154\045\153\001\001" +
    "\000\010\024\176\025\154\045\153\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\024\205\025" +
    "\154\045\153\001\001\000\002\001\001\000\004\046\207" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\024\216\025\154\045\153\071\217\001\001\000" +
    "\004\072\223\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\024\226\025\154\045\153\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\024\225\025\154\045\153" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\024\216\025\154\045\153\071\234\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\032\274\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\031\252\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\024\241\025\154" +
    "\026\242\027\245\034\253\035\243\045\153\001\001\000" +
    "\004\031\252\001\001\000\014\024\241\025\154\026\255" +
    "\027\245\045\153\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\024\241\025\154\027\272\045\153\001\001" +
    "\000\012\024\241\025\154\027\271\045\153\001\001\000" +
    "\012\024\241\025\154\027\270\045\153\001\001\000\012" +
    "\024\241\025\154\027\267\045\153\001\001\000\012\024" +
    "\241\025\154\027\266\045\153\001\001\000\012\024\241" +
    "\025\154\027\265\045\153\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\024" +
    "\241\025\154\026\242\027\245\033\276\034\247\035\243" +
    "\045\153\001\001\000\002\001\001\000\004\032\274\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\024\241\025\154\026\242\027\245\030\303\033" +
    "\240\034\247\035\243\045\153\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\052\321\110\317" +
    "\001\001\000\010\053\312\054\316\107\313\001\001\000" +
    "\064\016\100\017\110\020\111\023\120\036\115\043\136" +
    "\045\147\047\135\050\134\051\133\055\130\056\103\062" +
    "\132\063\141\064\137\073\116\074\112\075\142\076\104" +
    "\077\102\100\145\104\101\106\126\117\143\120\314\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\064\016\100\017\110\020\111\023\120\036\115\043" +
    "\136\045\147\047\135\050\134\051\133\055\130\056\103" +
    "\062\132\063\141\064\137\073\116\074\112\075\142\076" +
    "\104\077\102\100\145\104\101\106\126\117\143\120\323" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\024\241" +
    "\025\154\026\242\027\245\030\326\033\240\034\247\035" +
    "\243\045\153\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\014\332\024\155\025\154\045" +
    "\153\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\005\352\015\u0116\101" +
    "\u0115\102\351\103\u0100\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\005\u0120\015" +
    "\u0122\101\u0115\103\u0100\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\101\u011d\103\u011b\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\101\u011d\103\u011b\001\001\000\006\073\u0126" +
    "\105\u0127\001\001\000\002\001\001\000\004\066\u012a\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\073\u0132\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\066\u0135\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\014" +
    "\163\024\155\025\154\044\u013f\045\153\073\165\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\024\241\025\154" +
    "\026\242\027\245\030\u0145\033\240\034\247\035\243\045" +
    "\153\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\016" +
    "\u014c\065\u014d\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\014\u0152\024\155\025\154\045\153" +
    "\001\001\000\002\001\001\000\010\024\u0154\025\154\045" +
    "\153\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\024\216\025\154\045\153\071\u0158\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\024\241\025\154\026\242\027\245\030\u015f\033\240" +
    "\034\247\035\243\045\153\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\057\u016d\001\001" +
    "\000\064\016\100\017\110\020\111\023\120\036\115\043" +
    "\136\045\147\047\135\050\134\051\133\055\130\056\103" +
    "\062\132\063\141\064\137\073\116\074\112\075\142\076" +
    "\104\077\102\100\145\104\101\106\126\117\143\120\u0169" +
    "\001\001\000\010\060\u0168\061\u0164\111\u0163\001\001\000" +
    "\012\014\u0166\024\155\025\154\045\153\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\064\016\100\017" +
    "\110\020\111\023\120\036\115\043\136\045\147\047\135" +
    "\050\134\051\133\055\130\056\103\062\132\063\141\064" +
    "\137\073\116\074\112\075\142\076\104\077\102\100\145" +
    "\104\101\106\126\117\143\120\u0170\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\113\u0178\114\u0176\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\115\u017a\001\001" +
    "\000\004\113\u017b\001\001\000\002\001\001\000\004\115" +
    "\u017c\001\001\000\002\001\001\000\012\024\216\025\154" +
    "\045\153\071\u017f\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\015\u0187\101" +
    "\u0115\103\u0186\001\001\000\002\001\001\000\006\101\u011d" +
    "\103\u0188\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\024" +
    "\u019f\025\154\045\153\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\070\u01b2\001\001\000\004" +
    "\041\u01a9\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\040\u01af\001\001\000\002\001\001\000\004\040\u01ac" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\014" +
    "\163\024\155\025\154\044\u01ae\045\153\073\165\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\014\163\024\155\025\154\044\u01ae\045\153\073\165" +
    "\001\001\000\002\001\001\000\006\112\044\116\u01b4\001" +
    "\001\000\002\001\001\000\004\070\u01b6\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\070\u01b2" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\113\u0178\114\u0176\001\001\000" +
    "\004\010\u01c7\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoC$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoC$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoC$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public ManejadorSintacticoJP msJP = ManejadorSintacticoJP.getInstacia();
    public ManejadorArreglos ma = ManejadorArreglos.getInstancia();
    public ManejadorInstancias mi = ManejadorInstancias.getInstance();
    public ManejadorCuartetos mc = ManejadorCuartetos.getInstancia();
    public ManejadorConstantes manejadorConstantes = ManejadorConstantes.getInstancia();
    public ManejadorTablaPila mtp = ManejadorTablaPila.getInstancia();
    public FrameCTDOA frameCTDOA;

    public SintacticoC(LexicoC lexer) { 
        super(lexer);   
        msJP.nuevoAnalisis();
    }

    public void setFrameCTDOA(FrameCTDOA frameCTDOA) {
        this.frameCTDOA = frameCTDOA;
        this.msJP.setFrameCTDOA(frameCTDOA);
    }

    public void setAccion(String tipo, String mensaje, String accion){
        frameCTDOA.addErrores("ERROR Lexico Tipo: " + tipo + "\t Mensaje: " + mensaje + "\tAcción: ERROR\n");
    }

    @Override
    public void syntax_error(Symbol s){
        try {
            msJP.errorSintax(s.left, s.right, s.value, 
                "Uf, error sintactico cerca de la linea y columna indicada porfavor revisa que el token\n "
                        + "\t\tidicado corresponda a la declaracion de instruccion correspondiente. Vuelve a intentarlo."
            );
        } catch (Exception e) {
            System.out.println("Error " + e.toString());
        }
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SintacticoC$actions {
  private final SintacticoC parser;

  /** Constructor */
  CUP$SintacticoC$actions(SintacticoC parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SintacticoC$do_action(
    int                        CUP$SintacticoC$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoC$parser,
    java.util.Stack            CUP$SintacticoC$stack,
    int                        CUP$SintacticoC$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoC$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoC$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // texto ::= ERROR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",63, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // texto ::= ID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",63, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // texto ::= REAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		float e = (float)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",63, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // texto ::= NUMERO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",63, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // texto ::= PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",63, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // texto ::= PARENTESIS_A 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",63, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // texto ::= CORCHETE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",63, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // texto ::= CORCHETE_A 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",63, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // texto ::= LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",63, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // texto ::= LLAVE_A 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",63, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // texto ::= DOS_PUNTOS 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",63, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // texto ::= PUNTO_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",63, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // texto ::= PUNTO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",63, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // texto ::= PRINTF 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",63, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // texto ::= DO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",63, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // texto ::= WHILE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",63, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // texto ::= FOR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",63, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // texto ::= BREAK 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",63, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // texto ::= DEFAULT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",63, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // texto ::= CASE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",63, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // texto ::= SWITCH 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",63, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // texto ::= ELSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",63, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // texto ::= ELSE_IF 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",63, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // texto ::= IF 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",63, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // texto ::= CONST 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",63, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // texto ::= MAIN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",63, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // texto ::= VOID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",63, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // texto ::= PROGRAMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",63, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // texto ::= SCANF 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",63, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // texto ::= OR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",63, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // texto ::= AND 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",63, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // texto ::= NOT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",63, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // texto ::= MAYOR_IGUAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",63, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // texto ::= MENOR_IGUAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",63, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // texto ::= MAYOR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",63, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // texto ::= MENOR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",63, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // texto ::= DIFERENTE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",63, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // texto ::= IGUAL_IGUAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",63, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // texto ::= IGUAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",63, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // texto ::= DIV 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",63, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // texto ::= POR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",63, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // texto ::= MENOS 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",63, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // texto ::= MAS 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",63, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // texto ::= CLRSCR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",63, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // texto ::= GETCH 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",63, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // texto ::= CHAR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",63, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // texto ::= FLOAT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",63, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // texto ::= INT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",63, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // texto ::= JAVA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",63, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // texto ::= PY 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",63, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // texto ::= VB 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",63, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // texto_cadena ::= texto 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto_cadena",11, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // texto_cadena ::= texto_cadena texto 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = new String(a.toString()  + " " + e.toString());
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto_cadena",11, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // estructuras_p ::= 
            {
              Object RESULT =null;

              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("estructuras_p",78, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // estructuras_p ::= estructuras estructuras_p 
            {
              Object RESULT =null;

              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("estructuras_p",78, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // getch ::= ID IGUAL GETCH PARENTESIS_A PARENTESIS_C PUNTO_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)).value;
		
        Simbolo s = parser.msJP.metodoBuscarID((String) a, aleft, aright);
        if (s != null) {
            parser.mc.addGetch(s);
        }
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("getch",17, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // getch ::= tipo_dato ID IGUAL GETCH PARENTESIS_A PARENTESIS_C PUNTO_COMA 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-6)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)).value;
		
        if (!(((Tipo) t).equals(Constantes.FLOAT_VAR_PJ))) {
            Object resultado = parser.msJP.declararVariables(new Simbolo((Tipo) t, new Simbolo(null, null, (String) a)), aleft, aright);
            if (resultado != null) {
                if (resultado instanceof Simbolo) {
                    parser.mc.addGetch((Simbolo) resultado);
                }  
            } 
        }
    
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("getch",17, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // getch ::= GETCH PARENTESIS_A PARENTESIS_C PUNTO_COMA 
            {
              Object RESULT =null;
		parser.mc.addGetch(null);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("getch",17, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // estructuras ::= error CORCHETE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		parser.msJP.errorSintax(eleft, eright, e, "Error en el bloque de instrucciones de la estructura, por favor revisa la entrada en la linea y columna indicada.");
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("estructuras",77, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // estructuras ::= error PUNTO_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		parser.msJP.errorSintax(eleft, eright, e, "Error en el bloque de instrucciones de la estructura, por favor revisa la entrada en la linea y columna indicada.");
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("estructuras",77, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // estructuras ::= COMENTARIO 
            {
              Object RESULT =null;
		/* Ignore */
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("estructuras",77, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // estructuras ::= llamada_fp PUNTO_COMA 
            {
              Object RESULT =null;
		
        Object as = null;
        parser.mc.addYRemovePuntero(as, false);
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("estructuras",77, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // estructuras ::= printf PUNTO_COMA 
            {
              Object RESULT =null;
		/* Ignore */
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("estructuras",77, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // estructuras ::= instancia_constructor PUNTO_COMA 
            {
              Object RESULT =null;
		/* Ignore */
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("estructuras",77, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // estructuras ::= declaracion_variables PUNTO_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("estructuras",77, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // estructuras ::= estructura_if 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("estructuras",77, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // estructuras ::= CLRSCR PARENTESIS_A PARENTESIS_C PUNTO_COMA 
            {
              Object RESULT =null;
		parser.mc.addCLRSCR();
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("estructuras",77, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // estructuras ::= getch 
            {
              Object RESULT =null;
		/* Ignore */
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("estructuras",77, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // estructuras ::= asignacion_var PUNTO_COMA 
            {
              Object RESULT =null;
		/* Ignore */
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("estructuras",77, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // estructuras ::= switch 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("estructuras",77, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // estructuras ::= for 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("estructuras",77, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // estructuras ::= do_while 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("estructuras",77, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // estructuras ::= while 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("estructuras",77, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // estructuras ::= scanf PUNTO_COMA 
            {
              Object RESULT =null;
		/* Ignore */
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("estructuras",77, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // vp ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		parser.msJP.errorSintax(eleft, eright, e, "Error sintactico, en las intrucciones de variables print, no se esperaba el token indicado.");
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("vp",52, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // vp ::= vp COMA AMPERSAND ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.listaPrintf(a, parser.msJP.metodoBuscarID(e, eleft, eright));
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("vp",52, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // vp ::= COMA AMPERSAND ID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.metodoBuscarID(e, eleft, eright);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("vp",52, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // vp ::= vp COMA ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.listaPrintf(a, parser.msJP.metodoBuscarID(e, eleft, eright));
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("vp",52, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // vp ::= COMA ID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.metodoBuscarID(e, eleft, eright);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("vp",52, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // vp ::= COMA llamada_fp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		 
        if(a != null) {
            Tipo tipo = ((Simbolo) a).getTipoFuncion();
            if(tipo != null && tipo.getNombre().equals("Funcion")) {
                RESULT = a;
            } else {
                parser.msJP.errorSemantico(aleft, aright, "Asignacion", "Error, la instancia es un metodo y no puede asignarse.");
                RESULT = null;
            }
        }
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("vp",52, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // valores ::= AMPERSAND ID vp 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.listaPrintfVal(a, parser.msJP.metodoBuscarID(e, eleft, eright));
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("valores",67, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // valores ::= AMPERSAND ID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.metodoBuscarID(e, eleft, eright);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("valores",67, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // valores ::= ID vp 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.listaPrintfVal(a, parser.msJP.metodoBuscarID(e, eleft, eright));
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("valores",67, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // valores ::= ID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.metodoBuscarID(e, eleft, eright);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("valores",67, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // valores ::= llamada_fp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		 
        if(a != null) {
            Tipo tipo = ((Simbolo) a).getTipoFuncion();
            if(tipo != null && tipo.getNombre().equals("Funcion")) {
                RESULT = a;
            } else {
                parser.msJP.errorSemantico(aleft, aright, "Asignacion", "Error, la instancia es un metodo y no puede asignarse.");
                RESULT = null;
            }
        }
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("valores",67, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // valores ::= 
            {
              Object RESULT =null;

              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("valores",67, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // printf ::= PRINTF PARENTESIS_A COMILLAS COMILLAS PARENTESIS_C 
            {
              Object RESULT =null;
		
        parser.mc.imprimir(new Simbolo(null, "\"\\n\""));
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("printf",66, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // printf ::= PRINTF PARENTESIS_A COMILLAS texto_cadena COMILLAS PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		parser.mc.imprimir(new Simbolo(null, "\"" + e + "\""));
        parser.mc.imprimir(new Simbolo(null, "\"\\n\""));
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("printf",66, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // printf ::= PRINTF PARENTESIS_A COMILLAS texto_p COMILLAS COMA valores PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		RESULT = parser.msJP.comprobarPrint(a, e, eleft, eright);
        parser.mc.imprimir(new Simbolo(null, "\"\\n\""));
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("printf",66, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // tipo_dato_almacenar ::= LEER_FLOAT 
            {
              Object RESULT =null;
		RESULT = 2;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("tipo_dato_almacenar",65, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // tipo_dato_almacenar ::= LEER_CHAR 
            {
              Object RESULT =null;
		RESULT = 3;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("tipo_dato_almacenar",65, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // tipo_dato_almacenar ::= LEER_INT 
            {
              Object RESULT =null;
		RESULT = 1;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("tipo_dato_almacenar",65, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // txt ::= tipo_dato_almacenar 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = new SimboloPrint((int )e, null);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("txt",3, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // txt ::= texto_cadena tipo_dato_almacenar 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = new SimboloPrint((int )e, a.toString());
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("txt",3, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // texto_p ::= txt 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = a;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto_p",64, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // texto_p ::= texto_p txt 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.listaNumeros(a, e);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto_p",64, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // scanf ::= SCANF PARENTESIS_A COMILLAS tipo_dato_almacenar COMILLAS COMA ID PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		
        Simbolo s = parser.msJP.metodoBuscarID(e, eleft, eright);
        if(s != null) {
            parser.mc.imprimirScanf((int)a, s);
        } 
        RESULT = s;   
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("scanf",62, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // scanf ::= SCANF PARENTESIS_A COMILLAS texto_cadena tipo_dato_almacenar COMILLAS COMA ID PARENTESIS_C 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		
        parser.mc.imprimir(new Simbolo(null, "\"" + i + "\""));
        Simbolo s = parser.msJP.metodoBuscarID(e, eleft, eright);
        if(s != null) {
            parser.mc.imprimirScanf((int)a, s);
        } 
        RESULT = s;   
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("scanf",62, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // scanf ::= SCANF PARENTESIS_A COMILLAS tipo_dato_almacenar COMILLAS COMA AMPERSAND ID PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		
        Simbolo s = parser.msJP.metodoBuscarID(e, eleft, eright);
        if(s != null) {
            parser.mc.imprimirScanf((int)a, s);
        } 
        RESULT = s;   
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("scanf",62, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // scanf ::= SCANF PARENTESIS_A COMILLAS texto_cadena tipo_dato_almacenar COMILLAS COMA AMPERSAND ID PARENTESIS_C 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		
        parser.mc.imprimir(new Simbolo(null, "\"" + i + "\""));
        Simbolo s = parser.msJP.metodoBuscarID(e, eleft, eright);
        if(s != null) {
            parser.mc.imprimirScanf((int)a, s);
        } 
        RESULT = s;   
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("scanf",62, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-9)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // i_ins ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		parser.msJP.errorSintax(eleft, eright, e, "Error sintactico en la declaracion de un objeto, no se esperaba el token indicado.");
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("i_ins",73, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // i_ins ::= ID PARENTESIS_A parametros PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		
        if(a != null) {
            RESULT =  new Simbolo(null, a, e);
        } 
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("i_ins",73, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // i_ins ::= ID PARENTESIS_A PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		RESULT =  new Simbolo(null, new ArrayList<>(), e);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("i_ins",73, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // i_ins ::= ID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT =  new Simbolo(null, new ArrayList<>(), e);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("i_ins",73, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // instancia_pp ::= COMA i_ins instancia_pp 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.lista(a, e);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("instancia_pp",75, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // instancia_pp ::= COMA i_ins 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.lista(null, a);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("instancia_pp",75, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // instancia_p ::= i_ins instancia_pp 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.lista(a, e);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("instancia_p",74, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // instancia_p ::= i_ins 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.lista(null, e);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("instancia_p",74, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // instancia_constructor ::= JAVA PUNTO ID instancia_p 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		
        RESULT = parser.msJP.agregarInstancias((List<Simbolo>) e, a, aleft, aright);
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("instancia_constructor",58, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // llamada_fp ::= JAVA PUNTO ID PUNTO ID PARENTESIS_A parametros PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		RESULT = parser.mi.buscarInstancia(e, a, aleft, aright, i, "");
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("llamada_fp",57, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // llamada_fp ::= VB PUNTO ID PARENTESIS_A parametros PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		RESULT = parser.mi.searchSimbolo(null, a, 1, aleft, aright, e, "");
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("llamada_fp",57, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // llamada_fp ::= PY PUNTO ID PARENTESIS_A parametros PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		RESULT = parser.mi.searchSimbolo(null, a, 3, aleft, aright, e, "");
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("llamada_fp",57, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // parametros_p ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		 
        RESULT = new ArrayList<>();
        parser.msJP.errorSintax(eleft, eright, e, "Error sintactico en la instruccion de llamada a una funcion, no se esperaba el token indicado para el reconocimiento de parametros.");
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("parametros_p",56, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // parametros_p ::= parametros_p COMA operaciones_aritmeticas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.lista(a, e);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("parametros_p",56, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // parametros_p ::= COMA operaciones_aritmeticas 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.lista(null, e);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("parametros_p",56, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // parametros ::= 
            {
              Object RESULT =null;

              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("parametros",55, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // parametros ::= operaciones_aritmeticas 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.lista(null, e);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("parametros",55, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // parametros ::= operaciones_aritmeticas parametros_p 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		
        List<Simbolo> lista = new ArrayList<>();
        if (e != null) {
            if (e instanceof Simbolo) { 
                lista.add((Simbolo) e);
            }
        }
        if (a != null) {
            if (a instanceof Simbolo) { 
                lista.add((Simbolo) a);
            } else  {   
                lista.addAll((List<Simbolo>) a);
            }
        }
        RESULT = lista;
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("parametros",55, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // operaciones_asignacion ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		parser.msJP.errorSintax(eleft, eright, e, "Error sintactico en la asignacion de incremento en la estructura for.");
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("operaciones_asignacion",79, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // operaciones_asignacion ::= ID MENOS_MENOS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		RESULT = (new Simbolo(Constantes.INT_VAR_PJ, -2, a));
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("operaciones_asignacion",79, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // operaciones_asignacion ::= ID MAS_MAS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		RESULT = (new Simbolo(Constantes.INT_VAR_PJ, -1, a));
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("operaciones_asignacion",79, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // operaciones_asignacion ::= ID IGUAL operaciones_aritmeticas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		
        Simbolo nuevo;
        if(e != null) {
            nuevo = new Simbolo(((Simbolo) e).getTipo(), e, a);
        } else { 
            nuevo = null;
        }
        RESULT = nuevo;
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("operaciones_asignacion",79, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // var ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		parser.msJP.errorSintax(eleft, eright, e, "Error sintactico en la declaracion de datos, de la instruccion for, no se esperaba el token indicado.");
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("var",51, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // var ::= tipo_dato ID IGUAL dato 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.comprobarAsignacionFor(i, e, eleft, eright, (Tipo) a);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("var",51, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // var ::= ID IGUAL operaciones_aritmeticas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.comprobarAsignacionFor(e, a, aleft, aright, null);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("var",51, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // for ::= for_asignacion estructuras_p CORCHETE_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		
        if(((For) a).getA() != null && ((For) a).getE() != null && ((For) a).getI() != null) {
            RESULT = parser.msJP.contruirEstructuraCiloDW(o, true, 3);
        } else {
            RESULT = parser.msJP.contruirEstructuraCiloDW(o, null, 3);;
        }
        parser.mc.actualizar();
        parser.mc.imprimirResto();
        parser.msJP.removerCualquierSimbolo(((For) a).getA());
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("for",50, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // for_asignacion ::= for_condicional operaciones_asignacion PARENTESIS_C CORCHETE_A 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		
        For f = (For) a;
        f.setI(i);
        RESULT = parser.mc.addForJPA(f, (Simbolo) i);
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("for_asignacion",61, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // for_condicional ::= for_var condicional PUNTO_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		 
        ((For) a).setE(e);
        parser.mc.etiqueta();
        RESULT = a;
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("for_condicional",60, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // for_var ::= FOR PARENTESIS_A var PUNTO_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		RESULT = new For(a, parser.mc.addForJPV((Simbolo) a));
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("for_var",59, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // do_while ::= do_while_p estructuras_p CORCHETE_C WHILE PARENTESIS_A condicional PARENTESIS_C PUNTO_COMA 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-7)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		
        RESULT = parser.msJP.contruirEstructuraCiloDW(e, a, 2);
        parser.mc.escribirEtiquetasInicio(false);
        parser.mc.escribirEtiquetaFin();
        parser.mc.finDoWhile((String) i);
        parser.mc.imprimirResto();
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("do_while",49, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // do_while_p ::= DO CORCHETE_A 
            {
              Object RESULT =null;
		
        RESULT = parser.mc.addDoWhile();
        parser.mc.nuevoAnalisisBoolean();
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("do_while_p",14, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // while ::= while_p estructuras_p CORCHETE_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		
        RESULT = parser.msJP.contruirEstructuraCiloDW(e, ((While) a).getA(), 1);
        parser.mc.finWhile(((While) a).getIdEtiqueta());
        parser.mc.imprimirResto();
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("while",48, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // while_p ::= while_n PARENTESIS_A condicional PARENTESIS_C CORCHETE_A 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		
        parser.mc.nuevoAnalisisBoolean();
        parser.mc.escribirEtiquetasInicio(false);
        parser.mc.addEtiquetasEstructuras();
        ((While) w).setA(a);
        RESULT = w;
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("while_p",38, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // while_n ::= WHILE 
            {
              Object RESULT =null;
		RESULT = new While(parser.mc.addWhile(), null);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("while_n",37, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // caso ::= caso_p estructuras_p 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		
        RESULT = parser.msJP.crearEstructuraCases(a, e, aleft, aright, false);
        parser.mc.finCadaCaso();
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("caso",47, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // caso ::= caso_p estructuras_p BREAK PUNTO_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		
        RESULT = parser.msJP.crearEstructuraCases(a, e, aleft, aright, false);
        parser.mc.finCadaCaso();
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("caso",47, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // caso_p ::= CASE dato DOS_PUNTOS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		parser.mc.condicional((Simbolo) a); RESULT = a;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("caso_p",71, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // cantidad_casos ::= caso cantidad_casos 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.lista(a, e);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("cantidad_casos",46, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // cantidad_casos ::= caso 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("cantidad_casos",46, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // caso_default ::= 
            {
              Object RESULT =null;
		parser.mc.etiquetaGoto();
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("caso_default",45, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // caso_default ::= DEFAULT DOS_PUNTOS estructuras_p BREAK PUNTO_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		  
        parser.mc.etiquetaGoto();
        RESULT = parser.msJP.crearEstructuraCases(null, a, aleft, aright, true);
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("caso_default",45, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // switch ::= switch_p cantidad_casos caso_default CORCHETE_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		
        RESULT = parser.msJP.crearCase(e, i, a, eleft, eright);
        parser.mc.etqFinTurno();
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("switch",44, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // switch_p ::= SWITCH PARENTESIS_A dato PARENTESIS_C CORCHETE_A 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		parser.mc.setEtiquetaSwitch((Simbolo) a); RESULT = a;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("switch_p",13, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // estructura_if ::= if else_if_p else 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.construirCondicionalIf(a, e, i);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("estructura_if",43, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // estructura_if ::= if else_if_p 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.construirCondicionalIf(a, e, null);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("estructura_if",43, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // else_if_p ::= 
            {
              Object RESULT =null;

              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("else_if_p",42, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // else_if_p ::= else_if else_if_p 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.lista(a, e);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("else_if_p",42, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // else_if ::= ie estructuras_p CORCHETE_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		RESULT = parser.msJP.crearEstructuraCondicional(e, a, 2); parser.mc.imprimirResto();
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("else_if",41, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // else ::= ee estructuras_p CORCHETE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		RESULT = parser.msJP.crearEstructuraCondicional(e, false, 3); parser.mc.imprimirResto();
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("else",40, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // if ::= ii estructuras_p CORCHETE_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		RESULT = parser.msJP.crearEstructuraCondicional(e, a, 1); parser.mc.imprimirResto();
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("if",39, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ee ::= ELSE CORCHETE_A 
            {
              Object RESULT =null;
		parser.mc.escribirEtiquetasInicio(false); parser.mc.escribirEtiquetaFin(); parser.mc.nuevoAnalisisBoolean(); 
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("ee",70, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ie ::= ELSE_IF PARENTESIS_A condicional PARENTESIS_C CORCHETE_A 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		parser.mc.escribirEtiquetasInicio(false); parser.mc.escribirEtiquetaFin(); parser.mc.nuevoAnalisisBoolean(); RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("ie",69, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ii ::= IF PARENTESIS_A condicional PARENTESIS_C CORCHETE_A 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		parser.mc.escribirEtiquetasInicio(false); parser.mc.escribirEtiquetaFin(); parser.mc.nuevoAnalisisBoolean(); RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("ii",68, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // dimension ::= LLAVE_A operaciones_aritmeticas LLAVE_C dimension 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.ma.listaDimensiones(a, e, eleft, eright);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("dimension",36, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // dimension ::= LLAVE_A operaciones_aritmeticas LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		
        if(e != null) {
            if (((Simbolo) e).getTipo() != Constantes.CHAR_VAR_PJ && 
                Constantes.FLOAT_VAR_PJ.isFatherOf(((Simbolo) e).getTipo().getSymbol())) {  
                RESULT = ((Simbolo) e);
            } else {
                parser.msJP.errorSemantico(eleft, eright, "Arreglo", "Error, comprobacion de tipos en la dimension de arreglos.");
            }
        } else { 
            RESULT = null;
        }
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("dimension",36, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // arreglo ::= ID dimension 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		
        if(e == null) {
            RESULT = null;
        } else {
            RESULT = new Simbolo(null, e, a);
        }   
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("arreglo",35, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // dimension_const ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		parser.msJP.errorSintax(eleft, eright, e, "Error sintactico en la instruccion en la declaracion de arreglos, no se esperaba el token indicado.");
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("dimension_const",54, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // dimension_const ::= LLAVE_A op_aritmetica_const LLAVE_C dimension_const 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.ma.listaDimensiones(a, e, eleft, eright);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("dimension_const",54, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // dimension_const ::= LLAVE_A op_aritmetica_const LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("dimension_const",54, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // arreglo_const ::= ID dimension_const 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		
        if(e == null) {
            RESULT = null;
        } else {
            RESULT = new Simbolo(null, e, a);
        }   
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("arreglo_const",53, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // asignacion ::= llamada_fp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		 
        if(a != null) {
            Tipo tipo = ((Simbolo) a).getTipoFuncion();
            if(tipo != null && tipo.getNombre().equals("Funcion")) {
                RESULT = a;
            } else {
                parser.msJP.errorSemantico(aleft, aright, "Asignacion", "Error, la instancia es un metodo y no puede asignarse.");
                RESULT = null;
            }
        }
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("asignacion",34, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // asignacion ::= dato 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("asignacion",34, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // asignacion_var ::= arreglo IGUAL asignacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		
        if(e != null) { 
            parser.msJP.asignacionArreglos(a, aleft, aright, (Simbolo) e);
        } else { 
            parser.msJP.asignacionArreglos(null, aleft, aright, null);
        }
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("asignacion_var",33, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // asignacion_var ::= ID IGUAL asignacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		
        if(e != null) {      
            parser.msJP.asignacionVariables(new Simbolo(((Simbolo) e).getTipo(), ((Simbolo) e), a), aleft, aright);
        } else { 
            parser.msJP.asignacionVariables(null, aleft, aright);
        }
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("asignacion_var",33, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // lista_id_p ::= lista_id_p COMA lista_id_valores 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.lista(a, e);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("lista_id_p",31, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // lista_id_p ::= COMA lista_id_valores 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("lista_id_p",31, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // lista_ids ::= lista_id_valores 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("lista_ids",32, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // lista_ids ::= lista_id_valores lista_id_p 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.lista(a, e);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("lista_ids",32, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // lista_id_valores ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		
        parser.msJP.errorSintax(eleft, eright, e, "Error sintactico en la declaracion de variables, no se esperaba el token indicado.");
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("lista_id_valores",30, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // lista_id_valores ::= ID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = new Simbolo(null, null, e.toString());
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("lista_id_valores",30, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // lista_id_valores ::= ID IGUAL asignacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		
        if(e != null) {        
            RESULT = new Simbolo(((Simbolo) e).getTipo(), ((Simbolo) e), a);
        } else { 
            RESULT = e;
        }
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("lista_id_valores",30, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // declaracion_variables ::= tipo_dato arreglo_const 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.declararArreglo(e, eleft, eright, (Tipo) a);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("declaracion_variables",28, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // declaracion_variables ::= tipo_dato lista_ids 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.declararVariables(new Simbolo((Tipo)a, e), aleft, aright);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("declaracion_variables",28, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // declaracion_variables_g ::= tipo_dato lista_ids 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.declararVariablesGlobales(new Simbolo((Tipo)a, e), aleft, aright);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("declaracion_variables_g",29, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // condicional_not ::= operaciones_logicas 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		parser.mc.gotoEscribir(); RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("condicional_not",27, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // condicional_not ::= NOT PARENTESIS_A operaciones_logicas PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		RESULT = parser.msJP.comprobacionCondicional(a, true, 3, aleft, aright);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("condicional_not",27, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // condicional_and ::= condicional_not 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = a;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("condicional_and",26, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // condicional_and ::= condicional_and and condicional_and 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.comprobacionCondicional(a, e, 1, cleft, cright);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("condicional_and",26, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // condicional_or ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		parser.msJP.errorSintax(eleft, eright, e, "Error sintactico en las operacionaciones logicas, de la intruccion condicional.");
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("condicional_or",25, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // condicional_or ::= condicional_and 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = a;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("condicional_or",25, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // condicional_or ::= condicional_or or condicional_or 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.comprobacionCondicional(a, e, 2, cleft, cright);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("condicional_or",25, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // or ::= OR 
            {
              Object RESULT =null;
		parser.mc.or(); parser.mc.condicionalOR(); if (!parser.mc.ultimoAgregadorEtiqueta()) { parser.mc.escribirEtiqueta();}
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("or",24, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // and ::= AND 
            {
              Object RESULT =null;
		parser.mc.and(); parser.mc.condicionalAND(); parser.mc.escribirEtiqueta();
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("and",23, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // condicional ::= error CORCHETE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		
        parser.mc.nuevoAnalisisBoolean();  
        parser.msJP.errorSintax(eleft, eright, e, "Error sintactico en las operacionaciones logicas, de la intruccion condicional.");
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("condicional",22, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // condicional ::= condicional_or 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		parser.mc.nuevoAnalisisBoolean(); RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("condicional",22, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // tipos_comparacion ::= CARACTER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = new Simbolo(Constantes.CHAR_VAR_PJ, a);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("tipos_comparacion",21, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // tipos_comparacion ::= operaciones_aritmeticas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = a;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("tipos_comparacion",21, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // operaciones_logicas ::= tipos_comparacion MAYOR_IGUAL tipos_comparacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.comprobarOperacionesLogicas(a, e, 6, cleft, cright);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",20, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // operaciones_logicas ::= tipos_comparacion MAYOR tipos_comparacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.comprobarOperacionesLogicas(a, e, 5, cleft, cright);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",20, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // operaciones_logicas ::= tipos_comparacion MENOR_IGUAL tipos_comparacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.comprobarOperacionesLogicas(a, e, 4, cleft, cright);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",20, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // operaciones_logicas ::= tipos_comparacion MENOR tipos_comparacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.comprobarOperacionesLogicas(a, e, 3, cleft, cright);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",20, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // operaciones_logicas ::= tipos_comparacion DIFERENTE tipos_comparacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.comprobarOperacionesLogicas(a, e, 2, cleft, cright);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",20, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // operaciones_logicas ::= tipos_comparacion IGUAL_IGUAL tipos_comparacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.comprobarOperacionesLogicas(a, e, 1, cleft, cright);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",20, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // estruct_op ::= arreglo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.buscarArreglo(e, eleft, eright);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("estruct_op",19, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // estruct_op ::= REAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		float e = (float)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = new Simbolo(Constantes.FLOAT_VAR_VB_PY, e);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("estruct_op",19, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // estruct_op ::= NUMERO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = new Simbolo(Constantes.INT_VAR_VB_PY, e);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("estruct_op",19, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // estruct_op ::= ID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.metodoBuscarID(e.toString(), eleft, eright);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("estruct_op",19, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // estruct_op ::= PARENTESIS_A operaciones_aritmeticas PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("estruct_op",19, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // operaciones_aritmeticas ::= estruct_op 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("operaciones_aritmeticas",18, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // operaciones_aritmeticas ::= MENOS estruct_op 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.modificarVariables(e, eleft, eright);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("operaciones_aritmeticas",18, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // operaciones_aritmeticas ::= operaciones_aritmeticas MOD operaciones_aritmeticas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.realizarOperaciones(a, e, aleft, aright, eleft, eright, 5);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("operaciones_aritmeticas",18, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // operaciones_aritmeticas ::= operaciones_aritmeticas DIV operaciones_aritmeticas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.realizarOperaciones(a, e, aleft, aright, eleft, eright, 4);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("operaciones_aritmeticas",18, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // operaciones_aritmeticas ::= operaciones_aritmeticas POR operaciones_aritmeticas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.realizarOperaciones(a, e, aleft, aright, eleft, eright, 3);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("operaciones_aritmeticas",18, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // operaciones_aritmeticas ::= operaciones_aritmeticas MENOS operaciones_aritmeticas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.realizarOperaciones(a, e, aleft, aright, eleft, eright, 2);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("operaciones_aritmeticas",18, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // operaciones_aritmeticas ::= operaciones_aritmeticas MAS operaciones_aritmeticas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.realizarOperaciones(a, e, aleft, aright, eleft, eright, 1);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("operaciones_aritmeticas",18, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // est_const ::= REAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		float e = (float)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = new Simbolo(Constantes.FLOAT_VAR_VB_PY, e);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("est_const",72, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // est_const ::= NUMERO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = new Simbolo(Constantes.INT_VAR_VB_PY, e);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("est_const",72, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // est_const ::= ID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.manejadorConstantes.isConstante(e.toString(), eleft, eright);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("est_const",72, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // est_const ::= PARENTESIS_A op_aritmetica_const PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("est_const",72, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // op_aritmetica_const ::= est_const 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("op_aritmetica_const",76, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // op_aritmetica_const ::= MENOS est_const 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.manejadorConstantes.realizarOperaciones(e, e, eleft, eright, eleft, eright, 6);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("op_aritmetica_const",76, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // op_aritmetica_const ::= op_aritmetica_const MOD op_aritmetica_const 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.manejadorConstantes.realizarOperaciones(a, e, aleft, aright, eleft, eright, 5);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("op_aritmetica_const",76, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // op_aritmetica_const ::= op_aritmetica_const DIV op_aritmetica_const 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.manejadorConstantes.realizarOperaciones(a, e, aleft, aright, eleft, eright, 4);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("op_aritmetica_const",76, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // op_aritmetica_const ::= op_aritmetica_const POR op_aritmetica_const 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.manejadorConstantes.realizarOperaciones(a, e, aleft, aright, eleft, eright, 3);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("op_aritmetica_const",76, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // op_aritmetica_const ::= op_aritmetica_const MENOS op_aritmetica_const 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.manejadorConstantes.realizarOperaciones(a, e, aleft, aright, eleft, eright, 2);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("op_aritmetica_const",76, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // op_aritmetica_const ::= op_aritmetica_const MAS op_aritmetica_const 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.manejadorConstantes.realizarOperaciones(a, e, aleft, aright, eleft, eright, 1);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("op_aritmetica_const",76, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // librerias_p ::= 
            {
              Object RESULT =null;

              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("librerias_p",16, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // librerias_p ::= librerias librerias_p 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.lista(a, e);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("librerias_p",16, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // librerias ::= INCLUDE LIBRERIA_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.agregarLibreria(a.toString(), aleft, aright, 4);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("librerias",15, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // librerias ::= INCLUDE LIBRERIA_PYTHON 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		parser.msJP.agregarLibreria(a.toString(), aleft, aright, 3);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("librerias",15, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // librerias ::= INCLUDE LIBRERIA_CLASES 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		parser.msJP.agregarLibreria(a.toString(), aleft, aright, 2);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("librerias",15, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // librerias ::= INCLUDE LIBRERIA_JAVA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		parser.msJP.agregarLibreria(a.toString(), aleft, aright, 5);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("librerias",15, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // librerias ::= INCLUDE LIBRERIA_VB 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		parser.msJP.agregarLibreria(a.toString(), aleft, aright, 1);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("librerias",15, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // tipo_dato ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		  
        RESULT = Constantes.INT_VAR_PJ;
        parser.msJP.errorSintax(eleft, eright, e, "Error sintactico en el tipo de dato de una variable, no se esperaba el token indicado.");
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("tipo_dato",12, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // tipo_dato ::= CHAR 
            {
              Object RESULT =null;
		RESULT = Constantes.CHAR_VAR_PJ;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("tipo_dato",12, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // tipo_dato ::= FLOAT 
            {
              Object RESULT =null;
		RESULT = Constantes.FLOAT_VAR_PJ;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("tipo_dato",12, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // tipo_dato ::= INT 
            {
              Object RESULT =null;
		RESULT = Constantes.INT_VAR_PJ;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("tipo_dato",12, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // dato_const ::= op_aritmetica_const 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("dato_const",4, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // dato_const ::= CARACTER 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = new Simbolo(Constantes.CHAR_VAR_PJ, e);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("dato_const",4, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // dato ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		parser.msJP.errorSintax(eleft, eright, e, "Error sintactico en los datos que se asignaran, no se esperaba el token indicado.");
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("dato",10, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // dato ::= operaciones_aritmeticas 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("dato",10, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // dato ::= CARACTER 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = new Simbolo(Constantes.CHAR_VAR_PJ, e);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("dato",10, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // cv_p ::= 
            {
              Object RESULT =null;

              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("cv_p",9, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // cv_p ::= constante cv_p 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.lista(a, e);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("cv_p",9, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // constante ::= error PUNTO_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		parser.msJP.errorSintax(eleft, eright, e, "Error sintactico en la declaracion de la constante o variable, no se esperaba el token indicado en el area de variables y constantes.");
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("constante",8, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // constante ::= instancia_constructor PUNTO_COMA 
            {
              Object RESULT =null;
		/* Ignore */
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("constante",8, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // constante ::= tipo_dato arreglo_const PUNTO_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		RESULT = parser.msJP.declararArreglo(e, eleft, eright, (Tipo) a);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("constante",8, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // constante ::= COMENTARIO 
            {
              Object RESULT =null;

              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("constante",8, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // constante ::= declaracion_variables_g PUNTO_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("constante",8, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // constante ::= CONST tipo_dato ID IGUAL dato_const PUNTO_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		RESULT = parser.manejadorConstantes.declaracionConstante(new Simbolo((Tipo) e, i, a), eleft, eright);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("constante",8, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // cod_java ::= COD_JAVA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		
        try {
            parser.msJP.setContadorLineas(0);
            LexicoJava lj = new LexicoJava(new StringReader((e.toString().replaceAll("%%JAVA", ""))));
            lj.setFrameCTDOA(parser.frameCTDOA);
            SintacticoJava sintacticoj = new SintacticoJava(lj);
            sintacticoj.setContadorLineas(eright);
            sintacticoj.setFrameCTDOA(parser.frameCTDOA);
            sintacticoj.parse();
        } catch( Exception ex) { 
            ex.printStackTrace();
            parser.msJP.setContadorLineas(0);
            System.out.println(ex.toString());
            JOptionPane.showMessageDialog(null, "Errores, analizando el codigo de Java.", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
        parser.msJP.nuevoAnalisis();
        parser.msJP.setContadorLineas(0);
        ManejadorHeap mh = ManejadorHeap.getInstancia();
        mh.setPrincipal(false);
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("cod_java",7, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // cod_py ::= COD_PY 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		
        try {
            LexicoPython lexicoPython = new LexicoPython(new StringReader(e.toString().replaceAll("%%PY", "")));
            lexicoPython.setFrameCTDOA(parser.frameCTDOA); 
            SintacticoPython sintacticoPython = new SintacticoPython(lexicoPython);
            sintacticoPython.setContadorLineas(eright);
            sintacticoPython.setFrameCTDOA(parser.frameCTDOA);
            sintacticoPython.setContadorLineas(eright);
            sintacticoPython.parse();
        } catch( Exception ex) {
            ex.printStackTrace();
            System.out.println(ex.toString());
            JOptionPane.showMessageDialog(null, "Errores, analizando el codigo de Python.", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
        parser.msJP.setContadorLineas(0);
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("cod_py",6, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // cod_vb ::= COD_VB 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		  
        try {
            parser.msJP.setContadorLineas(0);
            LexicoVisualBasic lexicoVisualBasic = new LexicoVisualBasic(new StringReader(e.toString().replaceAll("%%VB", "")));
            lexicoVisualBasic.setFrameCTDOA(parser.frameCTDOA);
            SintacticoVisualBasic sintacticoVisualBasic = new SintacticoVisualBasic(lexicoVisualBasic);
            sintacticoVisualBasic.setFrameCTDOA(parser.frameCTDOA);
            sintacticoVisualBasic.parse();
            parser.msJP.setContadorLineas(0);
        } catch (Exception ex) {    
            parser.msJP.setContadorLineas(0);
            ex.printStackTrace();
            //System.out.println(ex.toString());
            JOptionPane.showMessageDialog(null, "Errores, analizando el codigo de Visual Basic.", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("cod_vb",5, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // estructura_principal ::= cod_vb cod_java cod_py PROGRAMA 
            {
              Object RESULT =null;

              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("estructura_principal",2, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // main ::= VOID MAIN PARENTESIS_A PARENTESIS_C CORCHETE_A 
            {
              Object RESULT =null;

              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("main",1, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		parser.msJP.errorSintax(eleft, eright, e, "Error sintactico en la declaracion del programa, no se esperaba el token indicado para la contruccion de un nuevo programa.");
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= estructura_principal librerias_p NT$0 cv_p main estructuras_p CORCHETE_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)).value;
		
        parser.mtp.addTamanio(); 
        parser.mc.finProcedimiento(false, false);
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
parser.mtp.addP();
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("NT$0",80, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoC$parser.done_parsing();
          return CUP$SintacticoC$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

