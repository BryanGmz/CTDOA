
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Jan 09 21:16:35 CST 2021
//----------------------------------------------------

package proyectofinal.ctdoa.backend.analizador.c;

import java_cup.runtime.*;
import java.io.StringReader;
import proyectofinal.ctdoa.backend.analizador.java.*;
import proyectofinal.ctdoa.backend.analizador.visual_basic.*;
import proyectofinal.ctdoa.backend.analizador.python.*;
import proyectofinal.ctdoa.backend.objetos.*;
import proyectofinal.ctdoa.backend.manejadores.*;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import proyectofinal.ctdoa.frontend.gui.FrameCTDOA;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Jan 09 21:16:35 CST 2021
  */
public class SintacticoC extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SintacticoC() {super();}

  /** Constructor which sets the default scanner. */
  public SintacticoC(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoC(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u014b\000\002\002\004\000\002\123\002\000\002\002" +
    "\011\000\002\002\003\000\002\003\007\000\002\012\003" +
    "\000\002\012\003\000\002\004\006\000\002\007\003\000" +
    "\002\007\004\000\002\007\003\000\002\010\003\000\002" +
    "\010\004\000\002\010\003\000\002\011\003\000\002\011" +
    "\004\000\002\011\003\000\002\013\010\000\002\013\011" +
    "\000\002\013\010\000\002\013\010\000\002\013\011\000" +
    "\002\013\004\000\002\013\004\000\002\013\005\000\002" +
    "\013\005\000\002\013\004\000\002\013\005\000\002\013" +
    "\004\000\002\013\004\000\002\014\004\000\002\014\002" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\006\003\000\002\006\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\022" +
    "\004\000\002\022\004\000\002\022\004\000\002\022\004" +
    "\000\002\022\004\000\002\023\004\000\002\023\002\000" +
    "\002\117\005\000\002\117\005\000\002\117\005\000\002" +
    "\117\005\000\002\117\005\000\002\117\004\000\002\117" +
    "\003\000\002\113\005\000\002\113\003\000\002\113\003" +
    "\000\002\113\003\000\002\113\004\000\002\025\005\000" +
    "\002\025\005\000\002\025\005\000\002\025\005\000\002" +
    "\025\005\000\002\025\004\000\002\025\003\000\002\026" +
    "\005\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\027\005\000\002\027\005\000" +
    "\002\027\005\000\002\027\005\000\002\027\005\000\002" +
    "\027\005\000\002\027\005\000\002\030\003\000\002\030" +
    "\003\000\002\030\004\000\002\030\004\000\002\030\003" +
    "\000\002\031\003\000\002\031\004\000\002\032\003\000" +
    "\002\033\003\000\002\034\005\000\002\034\003\000\002" +
    "\034\003\000\002\035\005\000\002\035\003\000\002\036" +
    "\006\000\002\036\007\000\002\036\007\000\002\036\006" +
    "\000\002\036\003\000\002\040\004\000\002\037\004\000" +
    "\002\037\004\000\002\041\005\000\002\041\003\000\002" +
    "\041\006\000\002\041\006\000\002\041\004\000\002\041" +
    "\003\000\002\043\004\000\002\043\003\000\002\042\004" +
    "\000\002\042\005\000\002\044\005\000\002\044\005\000" +
    "\002\045\003\000\002\045\003\000\002\045\004\000\002" +
    "\070\004\000\002\070\004\000\002\071\005\000\002\071" +
    "\006\000\002\071\004\000\002\071\003\000\002\046\004" +
    "\000\002\047\005\000\002\047\006\000\002\107\007\000" +
    "\002\107\010\000\002\107\010\000\002\107\010\000\002" +
    "\110\007\000\002\110\010\000\002\110\011\000\002\111" +
    "\004\000\002\111\005\000\002\052\005\000\002\053\005" +
    "\000\002\054\005\000\002\055\004\000\002\055\002\000" +
    "\002\056\004\000\002\056\005\000\002\020\007\000\002" +
    "\020\010\000\002\020\007\000\002\020\010\000\002\057" +
    "\006\000\002\060\007\000\002\060\010\000\002\060\007" +
    "\000\002\060\002\000\002\061\003\000\002\061\004\000" +
    "\002\112\005\000\002\112\006\000\002\062\006\000\002" +
    "\062\007\000\002\062\004\000\002\050\003\000\002\050" +
    "\004\000\002\051\007\000\002\051\010\000\002\051\010" +
    "\000\002\063\005\000\002\021\004\000\002\021\005\000" +
    "\002\064\012\000\002\064\013\000\002\064\012\000\002" +
    "\064\013\000\002\064\012\000\002\076\006\000\002\076" +
    "\007\000\002\076\007\000\002\076\006\000\002\077\005" +
    "\000\002\100\006\000\002\100\007\000\002\100\007\000" +
    "\002\100\006\000\002\065\005\000\002\066\005\000\002" +
    "\066\006\000\002\066\003\000\002\122\005\000\002\122" +
    "\004\000\002\122\004\000\002\122\006\000\002\122\005" +
    "\000\002\122\005\000\002\122\005\000\002\122\003\000" +
    "\002\072\004\000\002\072\003\000\002\072\002\000\002" +
    "\073\004\000\002\073\005\000\002\073\003\000\002\074" +
    "\010\000\002\074\010\000\002\074\012\000\002\075\006" +
    "\000\002\115\003\000\002\115\004\000\002\116\004\000" +
    "\002\116\005\000\002\114\003\000\002\114\005\000\002" +
    "\114\006\000\002\114\004\000\002\114\006\000\002\114" +
    "\007\000\002\114\003\000\002\101\014\000\002\101\013" +
    "\000\002\101\013\000\002\101\012\000\002\101\015\000" +
    "\002\101\014\000\002\101\014\000\002\101\013\000\002" +
    "\103\004\000\002\103\003\000\002\005\004\000\002\005" +
    "\003\000\002\104\003\000\002\104\003\000\002\104\003" +
    "\000\002\105\012\000\002\105\010\000\002\105\007\000" +
    "\002\106\003\000\002\106\004\000\002\106\004\000\002" +
    "\106\005\000\002\067\004\000\002\067\005\000\002\067" +
    "\005\000\002\067\006\000\002\067\005\000\002\067\006" +
    "\000\002\067\003\000\002\067\004\000\002\120\004\000" +
    "\002\120\003\000\002\120\003\000\002\120\003\000\002" +
    "\120\003\000\002\120\004\000\002\120\003\000\002\120" +
    "\007\000\002\120\006\000\002\120\007\000\002\120\006" +
    "\000\002\120\006\000\002\120\006\000\002\120\005\000" +
    "\002\120\003\000\002\120\004\000\002\120\004\000\002" +
    "\120\004\000\002\120\004\000\002\120\003\000\002\120" +
    "\004\000\002\120\004\000\002\024\006\000\002\024\011" +
    "\000\002\024\010\000\002\024\005\000\002\024\010\000" +
    "\002\024\007\000\002\024\004\000\002\024\007\000\002" +
    "\024\006\000\002\024\006\000\002\024\011\000\002\024" +
    "\010\000\002\121\004\000\002\121\002\000\002\016\004" +
    "\000\002\016\003\000\002\102\003\000\002\102\003\000" +
    "\002\102\003\000\002\102\003\000\002\102\003\000\002" +
    "\102\003\000\002\102\003\000\002\102\003\000\002\102" +
    "\003\000\002\102\003\000\002\102\003\000\002\102\003" +
    "\000\002\102\003\000\002\102\003\000\002\102\003\000" +
    "\002\102\003\000\002\102\003\000\002\102\003\000\002" +
    "\102\003\000\002\102\003\000\002\102\003\000\002\102" +
    "\003\000\002\102\003\000\002\102\003\000\002\102\003" +
    "\000\002\102\003\000\002\102\003\000\002\102\003\000" +
    "\002\102\003\000\002\102\003\000\002\102\003\000\002" +
    "\102\003\000\002\102\003\000\002\102\003\000\002\102" +
    "\003\000\002\102\003\000\002\102\003\000\002\102\003" +
    "\000\002\102\003\000\002\102\003\000\002\102\003\000" +
    "\002\102\003\000\002\102\003\000\002\102\003\000\002" +
    "\102\003\000\002\102\003\000\002\102\003\000\002\102" +
    "\003\000\002\102\003\000\002\102\003\000\002\102\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u027a\000\006\003\004\005\006\001\002\000\012\002" +
    "\ufffe\003\ufff7\005\u027c\007\ufff7\001\002\000\006\003\u0273" +
    "\007\u0275\001\002\000\006\003\ufff9\007\ufff9\001\002\000" +
    "\022\003\uffd2\011\014\022\uffd2\023\uffd2\024\uffd2\025\uffd2" +
    "\056\uffd2\060\uffd2\001\002\000\004\002\011\001\002\000" +
    "\004\002\001\001\002\000\020\003\000\022\000\023\000" +
    "\024\000\025\000\056\000\060\000\001\002\000\022\003" +
    "\uffd2\011\014\022\uffd2\023\uffd2\024\uffd2\025\uffd2\056\uffd2" +
    "\060\uffd2\001\002\000\014\012\020\013\021\014\017\015" +
    "\015\016\016\001\002\000\022\003\uffd8\011\uffd8\022\uffd8" +
    "\023\uffd8\024\uffd8\025\uffd8\056\uffd8\060\uffd8\001\002\000" +
    "\022\003\uffd4\011\uffd4\022\uffd4\023\uffd4\024\uffd4\025\uffd4" +
    "\056\uffd4\060\uffd4\001\002\000\022\003\uffd5\011\uffd5\022" +
    "\uffd5\023\uffd5\024\uffd5\025\uffd5\056\uffd5\060\uffd5\001\002" +
    "\000\022\003\uffd6\011\uffd6\022\uffd6\023\uffd6\024\uffd6\025" +
    "\uffd6\056\uffd6\060\uffd6\001\002\000\022\003\uffd7\011\uffd7" +
    "\022\uffd7\023\uffd7\024\uffd7\025\uffd7\056\uffd7\060\uffd7\001" +
    "\002\000\020\003\uffd3\022\uffd3\023\uffd3\024\uffd3\025\uffd3" +
    "\056\uffd3\060\uffd3\001\002\000\020\003\031\022\025\023" +
    "\024\024\034\025\035\056\uffe2\060\036\001\002\000\006" +
    "\003\uffdc\111\uffdc\001\002\000\004\075\u0271\001\002\000" +
    "\004\077\u0270\001\002\000\006\003\u026d\077\u026e\001\002" +
    "\000\020\003\031\022\025\023\024\024\034\025\035\056" +
    "\uffe2\060\036\001\002\000\016\003\uffd9\004\u0264\022\025" +
    "\060\u0262\077\u0263\111\uffd9\001\002\000\006\003\u0239\111" +
    "\u025f\001\002\000\004\056\101\001\002\000\006\003\uffdb" +
    "\111\uffdb\001\002\000\006\003\uffda\111\uffda\001\002\000" +
    "\012\003\037\023\024\024\034\025\035\001\002\000\004" +
    "\111\uffd9\001\002\000\004\111\041\001\002\000\004\035" +
    "\042\001\002\000\020\003\051\017\054\027\043\105\052" +
    "\107\046\110\050\111\047\001\002\000\014\003\060\105" +
    "\052\107\046\110\050\111\047\001\002\000\024\003\uffcb" +
    "\026\uffcb\027\uffcb\030\uffcb\031\uffcb\032\uffcb\077\uffcb\102" +
    "\uffcb\106\uffcb\001\002\000\020\003\uffdd\026\063\027\065" +
    "\030\067\031\066\032\062\077\uffdd\001\002\000\024\003" +
    "\uffc8\026\uffc8\027\uffc8\030\uffc8\031\uffc8\032\uffc8\077\uffc8" +
    "\102\uffc8\106\uffc8\001\002\000\024\003\uffc9\026\uffc9\027" +
    "\uffc9\030\uffc9\031\uffc9\032\uffc9\077\uffc9\102\uffc9\106\uffc9" +
    "\001\002\000\024\003\uffc7\026\uffc7\027\uffc7\030\uffc7\031" +
    "\uffc7\032\uffc7\077\uffc7\102\uffc7\106\uffc7\001\002\000\016" +
    "\003\060\077\076\105\052\107\046\110\050\111\047\001" +
    "\002\000\016\003\060\027\043\105\052\107\046\110\050" +
    "\111\047\001\002\000\006\003\055\077\056\001\002\000" +
    "\006\003\uffde\077\uffde\001\002\000\022\003\uffed\022\uffed" +
    "\023\uffed\024\uffed\025\uffed\056\uffed\060\uffed\077\057\001" +
    "\002\000\020\003\ufff0\022\ufff0\023\ufff0\024\ufff0\025\ufff0" +
    "\056\ufff0\060\ufff0\001\002\000\020\003\uffef\022\uffef\023" +
    "\uffef\024\uffef\025\uffef\056\uffef\060\uffef\001\002\000\014" +
    "\003\060\105\052\107\046\110\050\111\047\001\002\000" +
    "\016\026\063\027\065\030\067\031\066\032\062\106\064" +
    "\001\002\000\016\003\060\027\043\105\052\107\046\110" +
    "\050\111\047\001\002\000\016\003\060\027\043\105\052" +
    "\107\046\110\050\111\047\001\002\000\024\003\uffca\026" +
    "\uffca\027\uffca\030\uffca\031\uffca\032\uffca\077\uffca\102\uffca" +
    "\106\uffca\001\002\000\016\003\060\027\043\105\052\107" +
    "\046\110\050\111\047\001\002\000\016\003\060\027\043" +
    "\105\052\107\046\110\050\111\047\001\002\000\016\003" +
    "\060\027\043\105\052\107\046\110\050\111\047\001\002" +
    "\000\024\003\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf\032" +
    "\uffcf\077\uffcf\102\uffcf\106\uffcf\001\002\000\024\003\uffce" +
    "\026\uffce\027\uffce\030\uffce\031\uffce\032\uffce\077\uffce\102" +
    "\uffce\106\uffce\001\002\000\024\003\uffd0\026\uffd0\027\uffd0" +
    "\030\067\031\066\032\062\077\uffd0\102\uffd0\106\uffd0\001" +
    "\002\000\024\003\uffd1\026\uffd1\027\uffd1\030\067\031\066" +
    "\032\062\077\uffd1\102\uffd1\106\uffd1\001\002\000\024\003" +
    "\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd\032\uffcd\077\uffcd" +
    "\102\uffcd\106\uffcd\001\002\000\024\003\uffc6\026\uffc6\027" +
    "\uffc6\030\uffc6\031\uffc6\032\uffc6\077\uffc6\102\uffc6\106\uffc6" +
    "\001\002\000\020\003\uffee\022\uffee\023\uffee\024\uffee\025" +
    "\uffee\056\uffee\060\uffee\001\002\000\024\003\uffcc\026\uffcc" +
    "\027\uffcc\030\uffcc\031\uffcc\032\uffcc\077\uffcc\102\uffcc\106" +
    "\uffcc\001\002\000\050\003\131\004\133\010\132\020\120" +
    "\021\152\022\115\023\024\024\034\025\035\036\114\051" +
    "\113\061\125\064\137\070\122\071\146\072\154\073\135" +
    "\104\ufeec\111\127\001\002\000\004\057\102\001\002\000" +
    "\004\105\103\001\002\000\004\106\104\001\002\000\004" +
    "\103\105\001\002\000\050\003\ufffd\004\ufffd\010\ufffd\020" +
    "\ufffd\021\ufffd\022\ufffd\023\ufffd\024\ufffd\025\ufffd\036\ufffd" +
    "\051\ufffd\061\ufffd\064\ufffd\070\ufffd\071\ufffd\072\ufffd\073" +
    "\ufffd\104\ufffd\111\ufffd\001\002\000\006\003\u0239\111\u0236" +
    "\001\002\000\004\077\u0235\001\002\000\050\003\131\004" +
    "\133\010\132\020\120\021\152\022\115\023\024\024\034" +
    "\025\035\036\114\051\113\061\125\064\137\070\122\071" +
    "\146\072\154\073\135\104\ufeec\111\127\001\002\000\056" +
    "\003\uff0b\004\uff0b\010\uff0b\020\uff0b\021\uff0b\022\uff0b\023" +
    "\uff0b\024\uff0b\025\uff0b\036\uff0b\051\uff0b\061\uff0b\064\uff0b" +
    "\065\uff0b\066\uff0b\067\uff0b\070\uff0b\071\uff0b\072\uff0b\073" +
    "\uff0b\104\uff0b\111\uff0b\001\002\000\006\003\u021e\111\u021d" +
    "\001\002\000\006\003\242\105\243\001\002\000\006\003" +
    "\u01ff\105\u0200\001\002\000\004\075\u01ec\001\002\000\004" +
    "\065\u01d1\001\002\000\050\003\131\004\133\010\132\020" +
    "\120\021\152\022\115\023\024\024\034\025\035\036\114" +
    "\051\113\061\125\064\137\070\122\071\146\072\154\073" +
    "\135\104\ufeec\111\127\001\002\000\004\075\u01b6\001\002" +
    "\000\004\077\u01b5\001\002\000\006\003\242\105\243\001" +
    "\002\000\004\077\u01af\001\002\000\004\077\u01ae\001\002" +
    "\000\006\003\242\105\243\001\002\000\056\003\uff09\004" +
    "\uff09\010\uff09\020\uff09\021\uff09\022\uff09\023\uff09\024\uff09" +
    "\025\uff09\036\uff09\051\uff09\061\uff09\064\uff09\065\uff09\066" +
    "\uff09\067\uff09\070\uff09\071\uff09\072\uff09\073\uff09\104\uff09" +
    "\111\uff09\001\002\000\006\035\u019b\101\213\001\002\000" +
    "\004\104\u019a\001\002\000\030\003\uffd9\036\u016d\051\u0169" +
    "\061\u016c\064\u016e\070\u0168\071\u0167\072\u016f\077\u016a\104" +
    "\u016b\111\uffd9\001\002\000\006\003\u0161\105\243\001\002" +
    "\000\056\003\ufefc\004\ufefc\010\ufefc\020\ufefc\021\ufefc\022" +
    "\ufefc\023\ufefc\024\ufefc\025\ufefc\036\ufefc\051\ufefc\061\ufefc" +
    "\064\ufefc\065\ufefc\066\ufefc\067\ufefc\070\ufefc\071\ufefc\072" +
    "\ufefc\073\ufefc\104\ufefc\111\ufefc\001\002\000\050\003\131" +
    "\004\133\010\132\020\120\021\152\022\115\023\024\024" +
    "\034\025\035\036\114\051\113\061\125\064\137\070\122" +
    "\071\146\072\154\073\135\104\ufeec\111\127\001\002\000" +
    "\004\105\u0104\001\002\000\056\003\uff01\004\uff01\010\uff01" +
    "\020\uff01\021\uff01\022\uff01\023\uff01\024\uff01\025\uff01\036" +
    "\uff01\051\uff01\061\uff01\064\uff01\065\uff01\066\uff01\067\uff01" +
    "\070\uff01\071\uff01\072\uff01\073\uff01\104\uff01\111\uff01\001" +
    "\002\000\006\003\242\105\243\001\002\000\056\003\uff0e" +
    "\004\uff0e\010\uff0e\020\uff0e\021\uff0e\022\uff0e\023\uff0e\024" +
    "\uff0e\025\uff0e\036\uff0e\051\uff0e\061\uff0e\064\uff0e\065\uff0e" +
    "\066\uff0e\067\uff0e\070\uff0e\071\uff0e\072\uff0e\073\uff0e\104" +
    "\uff0e\111\uff0e\001\002\000\062\003\uff77\004\uff77\010\uff77" +
    "\020\uff77\021\uff77\022\uff77\023\uff77\024\uff77\025\uff77\036" +
    "\uff77\051\uff77\061\uff77\062\343\063\uff77\064\uff77\065\uff77" +
    "\066\uff77\067\uff77\070\uff77\071\uff77\072\uff77\073\uff77\104" +
    "\uff77\111\uff77\001\002\000\050\003\131\004\133\010\132" +
    "\020\120\021\152\022\115\023\024\024\034\025\035\036" +
    "\114\051\113\061\125\064\137\070\122\071\146\072\154" +
    "\073\135\104\ufeec\111\127\001\002\000\006\003\242\105" +
    "\243\001\002\000\056\003\uff0c\004\uff0c\010\uff0c\020\uff0c" +
    "\021\uff0c\022\uff0c\023\uff0c\024\uff0c\025\uff0c\036\uff0c\051" +
    "\uff0c\061\uff0c\064\uff0c\065\uff0c\066\uff0c\067\uff0c\070\uff0c" +
    "\071\uff0c\072\uff0c\073\uff0c\104\uff0c\111\uff0c\001\002\000" +
    "\004\077\325\001\002\000\006\003\uff64\105\uff64\001\002" +
    "\000\056\003\uff0d\004\uff0d\010\uff0d\020\uff0d\021\uff0d\022" +
    "\uff0d\023\uff0d\024\uff0d\025\uff0d\036\uff0d\051\uff0d\061\uff0d" +
    "\064\uff0d\065\uff0d\066\uff0d\067\uff0d\070\uff0d\071\uff0d\072" +
    "\uff0d\073\uff0d\104\uff0d\111\uff0d\001\002\000\022\003\255" +
    "\017\261\027\160\046\257\105\172\107\165\110\170\111" +
    "\166\001\002\000\056\003\131\004\133\010\132\020\120" +
    "\021\152\022\115\023\024\024\034\025\035\036\114\051" +
    "\113\061\125\064\137\065\ufeec\066\ufeec\067\ufeec\070\122" +
    "\071\146\072\154\073\135\104\ufeec\111\127\001\002\000" +
    "\004\075\240\001\002\000\004\077\237\001\002\000\004" +
    "\103\236\001\002\000\004\035\156\001\002\000\026\003" +
    "\167\017\174\020\120\021\152\022\157\027\160\105\172" +
    "\107\165\110\170\111\166\001\002\000\004\075\220\001" +
    "\002\000\012\105\172\107\165\110\170\111\166\001\002" +
    "\000\050\003\uffba\026\uffba\027\uffba\030\uffba\031\uffba\032" +
    "\uffba\040\uffba\041\uffba\042\uffba\043\uffba\044\uffba\045\uffba" +
    "\047\uffba\050\uffba\076\uffba\077\uffba\100\uffba\102\uffba\106" +
    "\uffba\001\002\000\050\003\uffbf\026\uffbf\027\uffbf\030\uffbf" +
    "\031\uffbf\032\uffbf\040\uffbf\041\uffbf\042\uffbf\043\uffbf\044" +
    "\uffbf\045\uffbf\047\uffbf\050\uffbf\076\uffbf\077\uffbf\100\uffbf" +
    "\102\uffbf\106\uffbf\001\002\000\026\003\uffe0\026\177\027" +
    "\201\030\203\031\202\032\176\076\uffe0\077\uffe0\100\uffe0" +
    "\106\uffe0\001\002\000\004\077\uff91\001\002\000\050\003" +
    "\uffbc\026\uffbc\027\uffbc\030\uffbc\031\uffbc\032\uffbc\040\uffbc" +
    "\041\uffbc\042\uffbc\043\uffbc\044\uffbc\045\uffbc\047\uffbc\050" +
    "\uffbc\076\uffbc\077\uffbc\100\uffbc\102\uffbc\106\uffbc\001\002" +
    "\000\052\003\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd\032" +
    "\uffbd\040\uffbd\041\uffbd\042\uffbd\043\uffbd\044\uffbd\045\uffbd" +
    "\047\uffbd\050\uffbd\076\uffbd\077\uffbd\100\uffbd\101\213\102" +
    "\uffbd\106\uffbd\001\002\000\020\003\uffdf\020\120\021\152" +
    "\022\157\076\uffdf\077\uffdf\106\uffdf\001\002\000\050\003" +
    "\uffbb\026\uffbb\027\uffbb\030\uffbb\031\uffbb\032\uffbb\040\uffbb" +
    "\041\uffbb\042\uffbb\043\uffbb\044\uffbb\045\uffbb\047\uffbb\050" +
    "\uffbb\076\uffbb\077\uffbb\100\uffbb\102\uffbb\106\uffbb\001\002" +
    "\000\012\003\uff90\076\uff90\077\uff90\106\uff90\001\002\000" +
    "\014\027\160\105\172\107\165\110\170\111\166\001\002" +
    "\000\012\003\uff8f\076\uff8f\077\uff8f\106\uff8f\001\002\000" +
    "\014\003\uffe1\076\uffe1\077\uffe1\100\uffe1\106\uffe1\001\002" +
    "\000\016\026\177\027\201\030\203\031\202\032\176\106" +
    "\200\001\002\000\014\027\160\105\172\107\165\110\170" +
    "\111\166\001\002\000\014\027\160\105\172\107\165\110" +
    "\170\111\166\001\002\000\050\003\uffbe\026\uffbe\027\uffbe" +
    "\030\uffbe\031\uffbe\032\uffbe\040\uffbe\041\uffbe\042\uffbe\043" +
    "\uffbe\044\uffbe\045\uffbe\047\uffbe\050\uffbe\076\uffbe\077\uffbe" +
    "\100\uffbe\102\uffbe\106\uffbe\001\002\000\014\027\160\105" +
    "\172\107\165\110\170\111\166\001\002\000\014\027\160" +
    "\105\172\107\165\110\170\111\166\001\002\000\014\027" +
    "\160\105\172\107\165\110\170\111\166\001\002\000\050" +
    "\003\uffc3\026\uffc3\027\uffc3\030\uffc3\031\uffc3\032\uffc3\040" +
    "\uffc3\041\uffc3\042\uffc3\043\uffc3\044\uffc3\045\uffc3\047\uffc3" +
    "\050\uffc3\076\uffc3\077\uffc3\100\uffc3\102\uffc3\106\uffc3\001" +
    "\002\000\050\003\uffc2\026\uffc2\027\uffc2\030\uffc2\031\uffc2" +
    "\032\uffc2\040\uffc2\041\uffc2\042\uffc2\043\uffc2\044\uffc2\045" +
    "\uffc2\047\uffc2\050\uffc2\076\uffc2\077\uffc2\100\uffc2\102\uffc2" +
    "\106\uffc2\001\002\000\050\003\uffc4\026\uffc4\027\uffc4\030" +
    "\203\031\202\032\176\040\uffc4\041\uffc4\042\uffc4\043\uffc4" +
    "\044\uffc4\045\uffc4\047\uffc4\050\uffc4\076\uffc4\077\uffc4\100" +
    "\uffc4\102\uffc4\106\uffc4\001\002\000\050\003\uffc5\026\uffc5" +
    "\027\uffc5\030\203\031\202\032\176\040\uffc5\041\uffc5\042" +
    "\uffc5\043\uffc5\044\uffc5\045\uffc5\047\uffc5\050\uffc5\076\uffc5" +
    "\077\uffc5\100\uffc5\102\uffc5\106\uffc5\001\002\000\050\003" +
    "\uffc1\026\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1\040\uffc1" +
    "\041\uffc1\042\uffc1\043\uffc1\044\uffc1\045\uffc1\047\uffc1\050" +
    "\uffc1\076\uffc1\077\uffc1\100\uffc1\102\uffc1\106\uffc1\001\002" +
    "\000\012\003\uff8e\076\uff8e\077\uff8e\106\uff8e\001\002\000" +
    "\052\003\uff87\026\uff87\027\uff87\030\uff87\031\uff87\032\uff87" +
    "\035\uff87\040\uff87\041\uff87\042\uff87\043\uff87\044\uff87\045" +
    "\uff87\047\uff87\050\uff87\076\uff87\077\uff87\100\uff87\102\uff87" +
    "\106\uff87\001\002\000\014\027\160\105\172\107\165\110" +
    "\170\111\166\001\002\000\016\026\177\027\201\030\203" +
    "\031\202\032\176\102\215\001\002\000\054\003\uff86\026" +
    "\uff86\027\uff86\030\uff86\031\uff86\032\uff86\035\uff86\040\uff86" +
    "\041\uff86\042\uff86\043\uff86\044\uff86\045\uff86\047\uff86\050" +
    "\uff86\076\uff86\077\uff86\100\uff86\101\213\102\uff86\106\uff86" +
    "\001\002\000\052\003\uff85\026\uff85\027\uff85\030\uff85\031" +
    "\uff85\032\uff85\035\uff85\040\uff85\041\uff85\042\uff85\043\uff85" +
    "\044\uff85\045\uff85\047\uff85\050\uff85\076\uff85\077\uff85\100" +
    "\uff85\102\uff85\106\uff85\001\002\000\050\003\uffc0\026\uffc0" +
    "\027\uffc0\030\uffc0\031\uffc0\032\uffc0\040\uffc0\041\uffc0\042" +
    "\uffc0\043\uffc0\044\uffc0\045\uffc0\047\uffc0\050\uffc0\076\uffc0" +
    "\077\uffc0\100\uffc0\102\uffc0\106\uffc0\001\002\000\004\111" +
    "\221\001\002\000\004\075\222\001\002\000\004\111\223" +
    "\001\002\000\004\105\224\001\002\000\016\027\160\105" +
    "\172\106\uff40\107\165\110\170\111\166\001\002\000\022" +
    "\003\231\026\177\027\201\030\203\031\202\032\176\076" +
    "\230\106\uff41\001\002\000\004\106\227\001\002\000\012" +
    "\003\uff3a\076\uff3a\077\uff3a\106\uff3a\001\002\000\014\027" +
    "\160\105\172\107\165\110\170\111\166\001\002\000\006" +
    "\076\uff3d\106\uff3d\001\002\000\006\076\233\106\uff42\001" +
    "\002\000\014\027\160\105\172\107\165\110\170\111\166" +
    "\001\002\000\020\026\177\027\201\030\203\031\202\032" +
    "\176\076\uff3e\106\uff3e\001\002\000\020\026\177\027\201" +
    "\030\203\031\202\032\176\076\uff3f\106\uff3f\001\002\000" +
    "\050\003\uff5e\004\uff5e\010\uff5e\020\uff5e\021\uff5e\022\uff5e" +
    "\023\uff5e\024\uff5e\025\uff5e\036\uff5e\051\uff5e\061\uff5e\064" +
    "\uff5e\070\uff5e\071\uff5e\072\uff5e\073\uff5e\104\uff5e\111\uff5e" +
    "\001\002\000\056\003\uff0f\004\uff0f\010\uff0f\020\uff0f\021" +
    "\uff0f\022\uff0f\023\uff0f\024\uff0f\025\uff0f\036\uff0f\051\uff0f" +
    "\061\uff0f\064\uff0f\065\uff0f\066\uff0f\067\uff0f\070\uff0f\071" +
    "\uff0f\072\uff0f\073\uff0f\104\uff0f\111\uff0f\001\002\000\004" +
    "\111\241\001\002\000\006\003\242\105\243\001\002\000" +
    "\034\003\ufffb\017\ufffb\023\ufffb\024\ufffb\025\ufffb\027\ufffb" +
    "\046\ufffb\074\ufffb\105\ufffb\106\ufffb\107\ufffb\110\ufffb\111" +
    "\ufffb\001\002\000\034\003\ufffc\017\ufffc\023\ufffc\024\ufffc" +
    "\025\ufffc\027\ufffc\046\ufffc\074\ufffc\105\ufffc\106\ufffc\107" +
    "\ufffc\110\ufffc\111\ufffc\001\002\000\016\027\160\105\172" +
    "\106\uff40\107\165\110\170\111\166\001\002\000\004\106" +
    "\246\001\002\000\012\003\uff3c\076\uff3c\077\uff3c\106\uff3c" +
    "\001\002\000\012\065\ufeed\066\ufeed\067\ufeed\104\ufeed\001" +
    "\002\000\004\077\324\001\002\000\010\050\321\077\uffad" +
    "\106\uffad\001\002\000\042\003\uffb2\026\177\027\201\030" +
    "\203\031\202\032\176\040\uffb2\041\uffb2\042\uffb2\043\uffb2" +
    "\044\uffb2\045\uffb2\047\uffb2\050\uffb2\077\uffb2\106\uffb2\001" +
    "\002\000\012\047\uffa0\050\uffa0\077\uffa0\106\uffa0\001\002" +
    "\000\012\047\uffa5\050\uffa5\077\uffa5\106\uffa5\001\002\000" +
    "\044\003\uffae\017\267\027\160\040\uffae\041\uffae\042\uffae" +
    "\043\uffae\044\uffae\045\uffae\050\uffa7\077\uffa7\104\317\105" +
    "\172\106\uffa7\107\165\110\170\111\166\001\002\000\020" +
    "\003\302\040\301\041\303\042\304\043\306\044\305\045" +
    "\307\001\002\000\006\003\242\105\243\001\002\000\012" +
    "\047\262\050\uffa8\077\uffa8\106\uffa8\001\002\000\030\003" +
    "\uffb1\040\uffb1\041\uffb1\042\uffb1\043\uffb1\044\uffb1\045\uffb1" +
    "\047\uffb1\050\uffb1\077\uffb1\106\uffb1\001\002\000\022\003" +
    "\uffab\017\uffab\027\uffab\046\uffab\105\uffab\107\uffab\110\uffab" +
    "\111\uffab\001\002\000\022\003\264\017\261\027\160\046" +
    "\257\105\172\107\165\110\170\111\166\001\002\000\044" +
    "\003\uffae\017\267\027\160\040\uffae\041\uffae\042\uffae\043" +
    "\uffae\044\uffae\045\uffae\047\uffae\050\uffae\077\uffae\105\172" +
    "\106\uffae\107\165\110\170\111\166\001\002\000\012\047" +
    "\262\050\uffa6\077\uffa6\106\uffa6\001\002\000\042\003\uffb0" +
    "\026\177\027\201\030\203\031\202\032\176\040\uffb0\041" +
    "\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0\047\uffb0\050\uffb0" +
    "\077\uffb0\106\uffb0\001\002\000\030\003\uffaf\040\uffaf\041" +
    "\uffaf\042\uffaf\043\uffaf\044\uffaf\045\uffaf\047\uffaf\050\uffaf" +
    "\077\uffaf\106\uffaf\001\002\000\020\003\264\017\261\027" +
    "\160\105\272\107\165\110\170\111\166\001\002\000\006" +
    "\003\276\106\277\001\002\000\020\003\264\017\261\027" +
    "\160\105\172\107\165\110\170\111\166\001\002\000\034" +
    "\003\uffb2\026\177\027\201\030\203\031\202\032\176\040" +
    "\uffb2\041\uffb2\042\uffb2\043\uffb2\044\uffb2\045\uffb2\106\200" +
    "\001\002\000\004\106\275\001\002\000\012\047\uffa3\050" +
    "\uffa3\077\uffa3\106\uffa3\001\002\000\012\047\uffa1\050\uffa1" +
    "\077\uffa1\106\300\001\002\000\012\047\uffa4\050\uffa4\077" +
    "\uffa4\106\uffa4\001\002\000\012\047\uffa2\050\uffa2\077\uffa2" +
    "\106\uffa2\001\002\000\020\003\264\017\261\027\160\105" +
    "\172\107\165\110\170\111\166\001\002\000\020\003\264" +
    "\017\261\027\160\105\172\107\165\110\170\111\166\001" +
    "\002\000\020\003\264\017\261\027\160\105\172\107\165" +
    "\110\170\111\166\001\002\000\020\003\264\017\261\027" +
    "\160\105\172\107\165\110\170\111\166\001\002\000\020" +
    "\003\264\017\261\027\160\105\172\107\165\110\170\111" +
    "\166\001\002\000\020\003\264\017\261\027\160\105\172" +
    "\107\165\110\170\111\166\001\002\000\020\003\264\017" +
    "\261\027\160\105\172\107\165\110\170\111\166\001\002" +
    "\000\014\003\uffb4\047\uffb4\050\uffb4\077\uffb4\106\uffb4\001" +
    "\002\000\014\003\uffb5\047\uffb5\050\uffb5\077\uffb5\106\uffb5" +
    "\001\002\000\014\003\uffb6\047\uffb6\050\uffb6\077\uffb6\106" +
    "\uffb6\001\002\000\014\003\uffb7\047\uffb7\050\uffb7\077\uffb7" +
    "\106\uffb7\001\002\000\014\003\uffb8\047\uffb8\050\uffb8\077" +
    "\uffb8\106\uffb8\001\002\000\014\003\uffb3\047\uffb3\050\uffb3" +
    "\077\uffb3\106\uffb3\001\002\000\014\003\uffb9\047\uffb9\050" +
    "\uffb9\077\uffb9\106\uffb9\001\002\000\006\077\uffac\106\uffac" +
    "\001\002\000\022\003\323\017\261\027\160\046\257\105" +
    "\172\107\165\110\170\111\166\001\002\000\022\003\uffaa" +
    "\017\uffaa\027\uffaa\046\uffaa\105\uffaa\107\uffaa\110\uffaa\111" +
    "\uffaa\001\002\000\010\050\321\077\uffa9\106\uffa9\001\002" +
    "\000\042\003\uffae\017\267\027\160\040\uffae\041\uffae\042" +
    "\uffae\043\uffae\044\uffae\045\uffae\050\uffa7\077\uffa7\105\172" +
    "\106\uffa7\107\165\110\170\111\166\001\002\000\006\003" +
    "\uff53\111\uff53\001\002\000\056\003\uff0a\004\uff0a\010\uff0a" +
    "\020\uff0a\021\uff0a\022\uff0a\023\uff0a\024\uff0a\025\uff0a\036" +
    "\uff0a\051\uff0a\061\uff0a\064\uff0a\065\uff0a\066\uff0a\067\uff0a" +
    "\070\uff0a\071\uff0a\072\uff0a\073\uff0a\104\uff0a\111\uff0a\001" +
    "\002\000\022\003\255\017\261\027\160\046\257\105\330" +
    "\107\165\110\170\111\166\001\002\000\004\106\334\001" +
    "\002\000\022\003\255\017\261\027\160\046\257\105\172" +
    "\107\165\110\170\111\166\001\002\000\004\106\332\001" +
    "\002\000\004\103\333\001\002\000\050\003\uff61\004\uff61" +
    "\010\uff61\020\uff61\021\uff61\022\uff61\023\uff61\024\uff61\025" +
    "\uff61\036\uff61\051\uff61\061\uff61\064\uff61\070\uff61\071\uff61" +
    "\072\uff61\073\uff61\104\uff61\111\uff61\001\002\000\006\003" +
    "\335\103\336\001\002\000\004\103\337\001\002\000\050" +
    "\003\uff62\004\uff62\010\uff62\020\uff62\021\uff62\022\uff62\023" +
    "\uff62\024\uff62\025\uff62\036\uff62\051\uff62\061\uff62\064\uff62" +
    "\070\uff62\071\uff62\072\uff62\073\uff62\104\uff62\111\uff62\001" +
    "\002\000\050\003\uff60\004\uff60\010\uff60\020\uff60\021\uff60" +
    "\022\uff60\023\uff60\024\uff60\025\uff60\036\uff60\051\uff60\061" +
    "\uff60\064\uff60\070\uff60\071\uff60\072\uff60\073\uff60\104\uff60" +
    "\111\uff60\001\002\000\004\104\341\001\002\000\056\003" +
    "\uff5f\004\uff5f\010\uff5f\020\uff5f\021\uff5f\022\uff5f\023\uff5f" +
    "\024\uff5f\025\uff5f\036\uff5f\051\uff5f\061\uff5f\064\uff5f\065" +
    "\uff5f\066\uff5f\067\uff5f\070\uff5f\071\uff5f\072\uff5f\073\uff5f" +
    "\104\uff5f\111\uff5f\001\002\000\060\003\uff76\004\uff76\010" +
    "\uff76\020\uff76\021\uff76\022\uff76\023\uff76\024\uff76\025\uff76" +
    "\036\uff76\051\uff76\061\uff76\063\364\064\uff76\065\uff76\066" +
    "\uff76\067\uff76\070\uff76\071\uff76\072\uff76\073\uff76\104\uff76" +
    "\111\uff76\001\002\000\006\003\242\105\243\001\002\000" +
    "\062\003\uff77\004\uff77\010\uff77\020\uff77\021\uff77\022\uff77" +
    "\023\uff77\024\uff77\025\uff77\036\uff77\051\uff77\061\uff77\062" +
    "\343\063\uff77\064\uff77\065\uff77\066\uff77\067\uff77\070\uff77" +
    "\071\uff77\072\uff77\073\uff77\104\uff77\111\uff77\001\002\000" +
    "\050\003\131\004\133\010\132\020\120\021\152\022\115" +
    "\023\024\024\034\025\035\036\114\051\113\061\125\064" +
    "\137\070\122\071\146\072\154\073\135\104\ufeec\111\127" +
    "\001\002\000\004\104\347\001\002\000\062\003\uff79\004" +
    "\uff79\010\uff79\020\uff79\021\uff79\022\uff79\023\uff79\024\uff79" +
    "\025\uff79\036\uff79\051\uff79\061\uff79\062\uff79\063\uff79\064" +
    "\uff79\065\uff79\066\uff79\067\uff79\070\uff79\071\uff79\072\uff79" +
    "\073\uff79\104\uff79\111\uff79\001\002\000\060\003\uff78\004" +
    "\uff78\010\uff78\020\uff78\021\uff78\022\uff78\023\uff78\024\uff78" +
    "\025\uff78\036\uff78\051\uff78\061\uff78\063\uff78\064\uff78\065" +
    "\uff78\066\uff78\067\uff78\070\uff78\071\uff78\072\uff78\073\uff78" +
    "\104\uff78\111\uff78\001\002\000\022\003\255\017\261\027" +
    "\160\046\257\105\353\107\165\110\170\111\166\001\002" +
    "\000\004\106\361\001\002\000\022\003\255\017\261\027" +
    "\160\046\257\105\172\107\165\110\170\111\166\001\002" +
    "\000\004\106\355\001\002\000\006\003\356\103\357\001" +
    "\002\000\004\103\360\001\002\000\050\003\uff7f\004\uff7f" +
    "\010\uff7f\020\uff7f\021\uff7f\022\uff7f\023\uff7f\024\uff7f\025" +
    "\uff7f\036\uff7f\051\uff7f\061\uff7f\064\uff7f\070\uff7f\071\uff7f" +
    "\072\uff7f\073\uff7f\104\uff7f\111\uff7f\001\002\000\050\003" +
    "\uff7e\004\uff7e\010\uff7e\020\uff7e\021\uff7e\022\uff7e\023\uff7e" +
    "\024\uff7e\025\uff7e\036\uff7e\051\uff7e\061\uff7e\064\uff7e\070" +
    "\uff7e\071\uff7e\072\uff7e\073\uff7e\104\uff7e\111\uff7e\001\002" +
    "\000\004\103\362\001\002\000\050\003\uff80\004\uff80\010" +
    "\uff80\020\uff80\021\uff80\022\uff80\023\uff80\024\uff80\025\uff80" +
    "\036\uff80\051\uff80\061\uff80\064\uff80\070\uff80\071\uff80\072" +
    "\uff80\073\uff80\104\uff80\111\uff80\001\002\000\050\003\131" +
    "\004\133\010\132\020\120\021\152\022\115\023\024\024" +
    "\034\025\035\036\114\051\113\061\125\064\137\070\122" +
    "\071\146\072\154\073\135\104\ufeec\111\127\001\002\000" +
    "\006\003\366\103\367\001\002\000\056\003\uff75\004\uff75" +
    "\010\uff75\020\uff75\021\uff75\022\uff75\023\uff75\024\uff75\025" +
    "\uff75\036\uff75\051\uff75\061\uff75\064\uff75\065\uff75\066\uff75" +
    "\067\uff75\070\uff75\071\uff75\072\uff75\073\uff75\104\uff75\111" +
    "\uff75\001\002\000\004\103\370\001\002\000\050\003\uff7d" +
    "\004\uff7d\010\uff7d\020\uff7d\021\uff7d\022\uff7d\023\uff7d\024" +
    "\uff7d\025\uff7d\036\uff7d\051\uff7d\061\uff7d\064\uff7d\070\uff7d" +
    "\071\uff7d\072\uff7d\073\uff7d\104\uff7d\111\uff7d\001\002\000" +
    "\050\003\uff7c\004\uff7c\010\uff7c\020\uff7c\021\uff7c\022\uff7c" +
    "\023\uff7c\024\uff7c\025\uff7c\036\uff7c\051\uff7c\061\uff7c\064" +
    "\uff7c\070\uff7c\071\uff7c\072\uff7c\073\uff7c\104\uff7c\111\uff7c" +
    "\001\002\000\004\104\372\001\002\000\056\003\uff7a\004" +
    "\uff7a\010\uff7a\020\uff7a\021\uff7a\022\uff7a\023\uff7a\024\uff7a" +
    "\025\uff7a\036\uff7a\051\uff7a\061\uff7a\064\uff7a\065\uff7a\066" +
    "\uff7a\067\uff7a\070\uff7a\071\uff7a\072\uff7a\073\uff7a\104\uff7a" +
    "\111\uff7a\001\002\000\020\003\374\017\174\027\160\105" +
    "\172\107\165\110\170\111\166\001\002\000\012\003\uffdf" +
    "\077\uffdf\100\uffdf\106\uffdf\001\002\000\006\003\376\106" +
    "\377\001\002\000\006\103\u0102\106\u0101\001\002\000\004" +
    "\103\u0100\001\002\000\004\065\uff74\001\002\000\004\103" +
    "\u0103\001\002\000\004\065\uff72\001\002\000\004\065\uff73" +
    "\001\002\000\004\074\u0105\001\002\000\160\010\u0129\020" +
    "\u0117\021\u013f\022\u010c\023\u0114\024\u013b\025\u0109\026\u0141" +
    "\027\u012a\030\u010b\031\u011f\035\u011c\036\u0108\040\u0123\041" +
    "\u010e\042\u012b\043\u0133\044\u013e\045\u013a\046\u011a\047\u011b" +
    "\050\u011e\051\u0107\052\u0126\053\u011d\054\u012d\055\u010d\056" +
    "\u012e\057\u0121\060\u010a\061\u0120\062\u0122\063\u0134\064\u0131" +
    "\065\u010f\066\u0139\067\u012c\070\u0119\071\u0137\072\u0140\073" +
    "\u0130\074\u0128\075\u0135\077\u0125\100\u0112\101\u0118\102\u0116" +
    "\103\u0115\104\u0113\105\u0138\106\u0136\107\u0106\110\u0132\111" +
    "\u0124\112\u012f\001\002\000\160\010\ufeba\020\ufeba\021\ufeba" +
    "\022\ufeba\023\ufeba\024\ufeba\025\ufeba\026\ufeba\027\ufeba\030" +
    "\ufeba\031\ufeba\035\ufeba\036\ufeba\040\ufeba\041\ufeba\042\ufeba" +
    "\043\ufeba\044\ufeba\045\ufeba\046\ufeba\047\ufeba\050\ufeba\051" +
    "\ufeba\052\ufeba\053\ufeba\054\ufeba\055\ufeba\056\ufeba\057\ufeba" +
    "\060\ufeba\061\ufeba\062\ufeba\063\ufeba\064\ufeba\065\ufeba\066" +
    "\ufeba\067\ufeba\070\ufeba\071\ufeba\072\ufeba\073\ufeba\074\ufeba" +
    "\075\ufeba\077\ufeba\100\ufeba\101\ufeba\102\ufeba\103\ufeba\104" +
    "\ufeba\105\ufeba\106\ufeba\107\ufeba\110\ufeba\111\ufeba\112\ufeba" +
    "\001\002\000\160\010\ufed3\020\ufed3\021\ufed3\022\ufed3\023" +
    "\ufed3\024\ufed3\025\ufed3\026\ufed3\027\ufed3\030\ufed3\031\ufed3" +
    "\035\ufed3\036\ufed3\040\ufed3\041\ufed3\042\ufed3\043\ufed3\044" +
    "\ufed3\045\ufed3\046\ufed3\047\ufed3\050\ufed3\051\ufed3\052\ufed3" +
    "\053\ufed3\054\ufed3\055\ufed3\056\ufed3\057\ufed3\060\ufed3\061" +
    "\ufed3\062\ufed3\063\ufed3\064\ufed3\065\ufed3\066\ufed3\067\ufed3" +
    "\070\ufed3\071\ufed3\072\ufed3\073\ufed3\074\ufed3\075\ufed3\077" +
    "\ufed3\100\ufed3\101\ufed3\102\ufed3\103\ufed3\104\ufed3\105\ufed3" +
    "\106\ufed3\107\ufed3\110\ufed3\111\ufed3\112\ufed3\001\002\000" +
    "\160\010\ufee2\020\ufee2\021\ufee2\022\ufee2\023\ufee2\024\ufee2" +
    "\025\ufee2\026\ufee2\027\ufee2\030\ufee2\031\ufee2\035\ufee2\036" +
    "\ufee2\040\ufee2\041\ufee2\042\ufee2\043\ufee2\044\ufee2\045\ufee2" +
    "\046\ufee2\047\ufee2\050\ufee2\051\ufee2\052\ufee2\053\ufee2\054" +
    "\ufee2\055\ufee2\056\ufee2\057\ufee2\060\ufee2\061\ufee2\062\ufee2" +
    "\063\ufee2\064\ufee2\065\ufee2\066\ufee2\067\ufee2\070\ufee2\071" +
    "\ufee2\072\ufee2\073\ufee2\074\ufee2\075\ufee2\077\ufee2\100\ufee2" +
    "\101\ufee2\102\ufee2\103\ufee2\104\ufee2\105\ufee2\106\ufee2\107" +
    "\ufee2\110\ufee2\111\ufee2\112\ufee2\001\002\000\160\010\ufee4" +
    "\020\ufee4\021\ufee4\022\ufee4\023\ufee4\024\ufee4\025\ufee4\026" +
    "\ufee4\027\ufee4\030\ufee4\031\ufee4\035\ufee4\036\ufee4\040\ufee4" +
    "\041\ufee4\042\ufee4\043\ufee4\044\ufee4\045\ufee4\046\ufee4\047" +
    "\ufee4\050\ufee4\051\ufee4\052\ufee4\053\ufee4\054\ufee4\055\ufee4" +
    "\056\ufee4\057\ufee4\060\ufee4\061\ufee4\062\ufee4\063\ufee4\064" +
    "\ufee4\065\ufee4\066\ufee4\067\ufee4\070\ufee4\071\ufee4\072\ufee4" +
    "\073\ufee4\074\ufee4\075\ufee4\077\ufee4\100\ufee4\101\ufee4\102" +
    "\ufee4\103\ufee4\104\ufee4\105\ufee4\106\ufee4\107\ufee4\110\ufee4" +
    "\111\ufee4\112\ufee4\001\002\000\160\010\ufecf\020\ufecf\021" +
    "\ufecf\022\ufecf\023\ufecf\024\ufecf\025\ufecf\026\ufecf\027\ufecf" +
    "\030\ufecf\031\ufecf\035\ufecf\036\ufecf\040\ufecf\041\ufecf\042" +
    "\ufecf\043\ufecf\044\ufecf\045\ufecf\046\ufecf\047\ufecf\050\ufecf" +
    "\051\ufecf\052\ufecf\053\ufecf\054\ufecf\055\ufecf\056\ufecf\057" +
    "\ufecf\060\ufecf\061\ufecf\062\ufecf\063\ufecf\064\ufecf\065\ufecf" +
    "\066\ufecf\067\ufecf\070\ufecf\071\ufecf\072\ufecf\073\ufecf\074" +
    "\ufecf\075\ufecf\077\ufecf\100\ufecf\101\ufecf\102\ufecf\103\ufecf" +
    "\104\ufecf\105\ufecf\106\ufecf\107\ufecf\110\ufecf\111\ufecf\112" +
    "\ufecf\001\002\000\160\010\ufedf\020\ufedf\021\ufedf\022\ufedf" +
    "\023\ufedf\024\ufedf\025\ufedf\026\ufedf\027\ufedf\030\ufedf\031" +
    "\ufedf\035\ufedf\036\ufedf\040\ufedf\041\ufedf\042\ufedf\043\ufedf" +
    "\044\ufedf\045\ufedf\046\ufedf\047\ufedf\050\ufedf\051\ufedf\052" +
    "\ufedf\053\ufedf\054\ufedf\055\ufedf\056\ufedf\057\ufedf\060\ufedf" +
    "\061\ufedf\062\ufedf\063\ufedf\064\ufedf\065\ufedf\066\ufedf\067" +
    "\ufedf\070\ufedf\071\ufedf\072\ufedf\073\ufedf\074\ufedf\075\ufedf" +
    "\077\ufedf\100\ufedf\101\ufedf\102\ufedf\103\ufedf\104\ufedf\105" +
    "\ufedf\106\ufedf\107\ufedf\110\ufedf\111\ufedf\112\ufedf\001\002" +
    "\000\160\010\ufee7\020\ufee7\021\ufee7\022\ufee7\023\ufee7\024" +
    "\ufee7\025\ufee7\026\ufee7\027\ufee7\030\ufee7\031\ufee7\035\ufee7" +
    "\036\ufee7\040\ufee7\041\ufee7\042\ufee7\043\ufee7\044\ufee7\045" +
    "\ufee7\046\ufee7\047\ufee7\050\ufee7\051\ufee7\052\ufee7\053\ufee7" +
    "\054\ufee7\055\ufee7\056\ufee7\057\ufee7\060\ufee7\061\ufee7\062" +
    "\ufee7\063\ufee7\064\ufee7\065\ufee7\066\ufee7\067\ufee7\070\ufee7" +
    "\071\ufee7\072\ufee7\073\ufee7\074\ufee7\075\ufee7\077\ufee7\100" +
    "\ufee7\101\ufee7\102\ufee7\103\ufee7\104\ufee7\105\ufee7\106\ufee7" +
    "\107\ufee7\110\ufee7\111\ufee7\112\ufee7\001\002\000\160\010" +
    "\ufed2\020\ufed2\021\ufed2\022\ufed2\023\ufed2\024\ufed2\025\ufed2" +
    "\026\ufed2\027\ufed2\030\ufed2\031\ufed2\035\ufed2\036\ufed2\040" +
    "\ufed2\041\ufed2\042\ufed2\043\ufed2\044\ufed2\045\ufed2\046\ufed2" +
    "\047\ufed2\050\ufed2\051\ufed2\052\ufed2\053\ufed2\054\ufed2\055" +
    "\ufed2\056\ufed2\057\ufed2\060\ufed2\061\ufed2\062\ufed2\063\ufed2" +
    "\064\ufed2\065\ufed2\066\ufed2\067\ufed2\070\ufed2\071\ufed2\072" +
    "\ufed2\073\ufed2\074\ufed2\075\ufed2\077\ufed2\100\ufed2\101\ufed2" +
    "\102\ufed2\103\ufed2\104\ufed2\105\ufed2\106\ufed2\107\ufed2\110" +
    "\ufed2\111\ufed2\112\ufed2\001\002\000\160\010\ufedb\020\ufedb" +
    "\021\ufedb\022\ufedb\023\ufedb\024\ufedb\025\ufedb\026\ufedb\027" +
    "\ufedb\030\ufedb\031\ufedb\035\ufedb\036\ufedb\040\ufedb\041\ufedb" +
    "\042\ufedb\043\ufedb\044\ufedb\045\ufedb\046\ufedb\047\ufedb\050" +
    "\ufedb\051\ufedb\052\ufedb\053\ufedb\054\ufedb\055\ufedb\056\ufedb" +
    "\057\ufedb\060\ufedb\061\ufedb\062\ufedb\063\ufedb\064\ufedb\065" +
    "\ufedb\066\ufedb\067\ufedb\070\ufedb\071\ufedb\072\ufedb\073\ufedb" +
    "\074\ufedb\075\ufedb\077\ufedb\100\ufedb\101\ufedb\102\ufedb\103" +
    "\ufedb\104\ufedb\105\ufedb\106\ufedb\107\ufedb\110\ufedb\111\ufedb" +
    "\112\ufedb\001\002\000\160\010\ufeca\020\ufeca\021\ufeca\022" +
    "\ufeca\023\ufeca\024\ufeca\025\ufeca\026\ufeca\027\ufeca\030\ufeca" +
    "\031\ufeca\035\ufeca\036\ufeca\040\ufeca\041\ufeca\042\ufeca\043" +
    "\ufeca\044\ufeca\045\ufeca\046\ufeca\047\ufeca\050\ufeca\051\ufeca" +
    "\052\ufeca\053\ufeca\054\ufeca\055\ufeca\056\ufeca\057\ufeca\060" +
    "\ufeca\061\ufeca\062\ufeca\063\ufeca\064\ufeca\065\ufeca\066\ufeca" +
    "\067\ufeca\070\ufeca\071\ufeca\072\ufeca\073\ufeca\074\ufeca\075" +
    "\ufeca\077\ufeca\100\ufeca\101\ufeca\102\ufeca\103\ufeca\104\ufeca" +
    "\105\ufeca\106\ufeca\107\ufeca\110\ufeca\111\ufeca\112\ufeca\001" +
    "\002\000\160\010\u0129\020\u0117\021\u013f\022\u010c\023\u0114" +
    "\024\u013b\025\u0109\026\u0141\027\u012a\030\u010b\031\u011f\035" +
    "\u011c\036\u0108\040\u0123\041\u010e\042\u012b\043\u0133\044\u013e" +
    "\045\u013a\046\u011a\047\u011b\050\u011e\051\u0107\052\u0126\053" +
    "\u011d\054\u012d\055\u010d\056\u012e\057\u0121\060\u010a\061\u0120" +
    "\062\u0122\063\u0134\064\u0131\065\u010f\066\u0139\067\u012c\070" +
    "\u0119\071\u0137\072\u0140\073\u0130\074\u0148\075\u0135\077\u0125" +
    "\100\u0112\101\u0118\102\u0116\103\u0115\104\u0113\105\u0138\106" +
    "\u0136\107\u0106\110\u0132\111\u0124\112\u012f\001\002\000\160" +
    "\010\uff24\020\uff24\021\uff24\022\uff24\023\uff24\024\uff24\025" +
    "\uff24\026\uff24\027\uff24\030\uff24\031\uff24\035\uff24\036\uff24" +
    "\040\uff24\041\uff24\042\uff24\043\uff24\044\uff24\045\uff24\046" +
    "\uff24\047\uff24\050\uff24\051\uff24\052\uff24\053\uff24\054\uff24" +
    "\055\uff24\056\uff24\057\uff24\060\uff24\061\uff24\062\uff24\063" +
    "\uff24\064\uff24\065\uff24\066\uff24\067\uff24\070\uff24\071\uff24" +
    "\072\uff24\073\uff24\074\uff24\075\uff24\077\uff24\100\uff24\101" +
    "\uff24\102\uff24\103\uff24\104\uff24\105\uff24\106\uff24\107\uff24" +
    "\110\uff24\111\uff24\112\uff24\001\002\000\160\010\ufec1\020" +
    "\ufec1\021\ufec1\022\ufec1\023\ufec1\024\ufec1\025\ufec1\026\ufec1" +
    "\027\ufec1\030\ufec1\031\ufec1\035\ufec1\036\ufec1\040\ufec1\041" +
    "\ufec1\042\ufec1\043\ufec1\044\ufec1\045\ufec1\046\ufec1\047\ufec1" +
    "\050\ufec1\051\ufec1\052\ufec1\053\ufec1\054\ufec1\055\ufec1\056" +
    "\ufec1\057\ufec1\060\ufec1\061\ufec1\062\ufec1\063\ufec1\064\ufec1" +
    "\065\ufec1\066\ufec1\067\ufec1\070\ufec1\071\ufec1\072\ufec1\073" +
    "\ufec1\074\ufec1\075\ufec1\077\ufec1\100\ufec1\101\ufec1\102\ufec1" +
    "\103\ufec1\104\ufec1\105\ufec1\106\ufec1\107\ufec1\110\ufec1\111" +
    "\ufec1\112\ufec1\001\002\000\160\010\ufebd\020\ufebd\021\ufebd" +
    "\022\ufebd\023\ufebd\024\ufebd\025\ufebd\026\ufebd\027\ufebd\030" +
    "\ufebd\031\ufebd\035\ufebd\036\ufebd\040\ufebd\041\ufebd\042\ufebd" +
    "\043\ufebd\044\ufebd\045\ufebd\046\ufebd\047\ufebd\050\ufebd\051" +
    "\ufebd\052\ufebd\053\ufebd\054\ufebd\055\ufebd\056\ufebd\057\ufebd" +
    "\060\ufebd\061\ufebd\062\ufebd\063\ufebd\064\ufebd\065\ufebd\066" +
    "\ufebd\067\ufebd\070\ufebd\071\ufebd\072\ufebd\073\ufebd\074\ufebd" +
    "\075\ufebd\077\ufebd\100\ufebd\101\ufebd\102\ufebd\103\ufebd\104" +
    "\ufebd\105\ufebd\106\ufebd\107\ufebd\110\ufebd\111\ufebd\112\ufebd" +
    "\001\002\000\160\010\ufee6\020\ufee6\021\ufee6\022\ufee6\023" +
    "\ufee6\024\ufee6\025\ufee6\026\ufee6\027\ufee6\030\ufee6\031\ufee6" +
    "\035\ufee6\036\ufee6\040\ufee6\041\ufee6\042\ufee6\043\ufee6\044" +
    "\ufee6\045\ufee6\046\ufee6\047\ufee6\050\ufee6\051\ufee6\052\ufee6" +
    "\053\ufee6\054\ufee6\055\ufee6\056\ufee6\057\ufee6\060\ufee6\061" +
    "\ufee6\062\ufee6\063\ufee6\064\ufee6\065\ufee6\066\ufee6\067\ufee6" +
    "\070\ufee6\071\ufee6\072\ufee6\073\ufee6\074\ufee6\075\ufee6\077" +
    "\ufee6\100\ufee6\101\ufee6\102\ufee6\103\ufee6\104\ufee6\105\ufee6" +
    "\106\ufee6\107\ufee6\110\ufee6\111\ufee6\112\ufee6\001\002\000" +
    "\160\010\ufebe\020\ufebe\021\ufebe\022\ufebe\023\ufebe\024\ufebe" +
    "\025\ufebe\026\ufebe\027\ufebe\030\ufebe\031\ufebe\035\ufebe\036" +
    "\ufebe\040\ufebe\041\ufebe\042\ufebe\043\ufebe\044\ufebe\045\ufebe" +
    "\046\ufebe\047\ufebe\050\ufebe\051\ufebe\052\ufebe\053\ufebe\054" +
    "\ufebe\055\ufebe\056\ufebe\057\ufebe\060\ufebe\061\ufebe\062\ufebe" +
    "\063\ufebe\064\ufebe\065\ufebe\066\ufebe\067\ufebe\070\ufebe\071" +
    "\ufebe\072\ufebe\073\ufebe\074\ufebe\075\ufebe\077\ufebe\100\ufebe" +
    "\101\ufebe\102\ufebe\103\ufebe\104\ufebe\105\ufebe\106\ufebe\107" +
    "\ufebe\110\ufebe\111\ufebe\112\ufebe\001\002\000\160\010\ufebf" +
    "\020\ufebf\021\ufebf\022\ufebf\023\ufebf\024\ufebf\025\ufebf\026" +
    "\ufebf\027\ufebf\030\ufebf\031\ufebf\035\ufebf\036\ufebf\040\ufebf" +
    "\041\ufebf\042\ufebf\043\ufebf\044\ufebf\045\ufebf\046\ufebf\047" +
    "\ufebf\050\ufebf\051\ufebf\052\ufebf\053\ufebf\054\ufebf\055\ufebf" +
    "\056\ufebf\057\ufebf\060\ufebf\061\ufebf\062\ufebf\063\ufebf\064" +
    "\ufebf\065\ufebf\066\ufebf\067\ufebf\070\ufebf\071\ufebf\072\ufebf" +
    "\073\ufebf\074\ufebf\075\ufebf\077\ufebf\100\ufebf\101\ufebf\102" +
    "\ufebf\103\ufebf\104\ufebf\105\ufebf\106\ufebf\107\ufebf\110\ufebf" +
    "\111\ufebf\112\ufebf\001\002\000\160\010\ufee9\020\ufee9\021" +
    "\ufee9\022\ufee9\023\ufee9\024\ufee9\025\ufee9\026\ufee9\027\ufee9" +
    "\030\ufee9\031\ufee9\035\ufee9\036\ufee9\040\ufee9\041\ufee9\042" +
    "\ufee9\043\ufee9\044\ufee9\045\ufee9\046\ufee9\047\ufee9\050\ufee9" +
    "\051\ufee9\052\ufee9\053\ufee9\054\ufee9\055\ufee9\056\ufee9\057" +
    "\ufee9\060\ufee9\061\ufee9\062\ufee9\063\ufee9\064\ufee9\065\ufee9" +
    "\066\ufee9\067\ufee9\070\ufee9\071\ufee9\072\ufee9\073\ufee9\074" +
    "\ufee9\075\ufee9\077\ufee9\100\ufee9\101\ufee9\102\ufee9\103\ufee9" +
    "\104\ufee9\105\ufee9\106\ufee9\107\ufee9\110\ufee9\111\ufee9\112" +
    "\ufee9\001\002\000\160\010\ufec0\020\ufec0\021\ufec0\022\ufec0" +
    "\023\ufec0\024\ufec0\025\ufec0\026\ufec0\027\ufec0\030\ufec0\031" +
    "\ufec0\035\ufec0\036\ufec0\040\ufec0\041\ufec0\042\ufec0\043\ufec0" +
    "\044\ufec0\045\ufec0\046\ufec0\047\ufec0\050\ufec0\051\ufec0\052" +
    "\ufec0\053\ufec0\054\ufec0\055\ufec0\056\ufec0\057\ufec0\060\ufec0" +
    "\061\ufec0\062\ufec0\063\ufec0\064\ufec0\065\ufec0\066\ufec0\067" +
    "\ufec0\070\ufec0\071\ufec0\072\ufec0\073\ufec0\074\ufec0\075\ufec0" +
    "\077\ufec0\100\ufec0\101\ufec0\102\ufec0\103\ufec0\104\ufec0\105" +
    "\ufec0\106\ufec0\107\ufec0\110\ufec0\111\ufec0\112\ufec0\001\002" +
    "\000\160\010\ufec7\020\ufec7\021\ufec7\022\ufec7\023\ufec7\024" +
    "\ufec7\025\ufec7\026\ufec7\027\ufec7\030\ufec7\031\ufec7\035\ufec7" +
    "\036\ufec7\040\ufec7\041\ufec7\042\ufec7\043\ufec7\044\ufec7\045" +
    "\ufec7\046\ufec7\047\ufec7\050\ufec7\051\ufec7\052\ufec7\053\ufec7" +
    "\054\ufec7\055\ufec7\056\ufec7\057\ufec7\060\ufec7\061\ufec7\062" +
    "\ufec7\063\ufec7\064\ufec7\065\ufec7\066\ufec7\067\ufec7\070\ufec7" +
    "\071\ufec7\072\ufec7\073\ufec7\074\ufec7\075\ufec7\077\ufec7\100" +
    "\ufec7\101\ufec7\102\ufec7\103\ufec7\104\ufec7\105\ufec7\106\ufec7" +
    "\107\ufec7\110\ufec7\111\ufec7\112\ufec7\001\002\000\160\010" +
    "\ufed6\020\ufed6\021\ufed6\022\ufed6\023\ufed6\024\ufed6\025\ufed6" +
    "\026\ufed6\027\ufed6\030\ufed6\031\ufed6\035\ufed6\036\ufed6\040" +
    "\ufed6\041\ufed6\042\ufed6\043\ufed6\044\ufed6\045\ufed6\046\ufed6" +
    "\047\ufed6\050\ufed6\051\ufed6\052\ufed6\053\ufed6\054\ufed6\055" +
    "\ufed6\056\ufed6\057\ufed6\060\ufed6\061\ufed6\062\ufed6\063\ufed6" +
    "\064\ufed6\065\ufed6\066\ufed6\067\ufed6\070\ufed6\071\ufed6\072" +
    "\ufed6\073\ufed6\074\ufed6\075\ufed6\077\ufed6\100\ufed6\101\ufed6" +
    "\102\ufed6\103\ufed6\104\ufed6\105\ufed6\106\ufed6\107\ufed6\110" +
    "\ufed6\111\ufed6\112\ufed6\001\002\000\160\010\ufed5\020\ufed5" +
    "\021\ufed5\022\ufed5\023\ufed5\024\ufed5\025\ufed5\026\ufed5\027" +
    "\ufed5\030\ufed5\031\ufed5\035\ufed5\036\ufed5\040\ufed5\041\ufed5" +
    "\042\ufed5\043\ufed5\044\ufed5\045\ufed5\046\ufed5\047\ufed5\050" +
    "\ufed5\051\ufed5\052\ufed5\053\ufed5\054\ufed5\055\ufed5\056\ufed5" +
    "\057\ufed5\060\ufed5\061\ufed5\062\ufed5\063\ufed5\064\ufed5\065" +
    "\ufed5\066\ufed5\067\ufed5\070\ufed5\071\ufed5\072\ufed5\073\ufed5" +
    "\074\ufed5\075\ufed5\077\ufed5\100\ufed5\101\ufed5\102\ufed5\103" +
    "\ufed5\104\ufed5\105\ufed5\106\ufed5\107\ufed5\110\ufed5\111\ufed5" +
    "\112\ufed5\001\002\000\160\010\ufedd\020\ufedd\021\ufedd\022" +
    "\ufedd\023\ufedd\024\ufedd\025\ufedd\026\ufedd\027\ufedd\030\ufedd" +
    "\031\ufedd\035\ufedd\036\ufedd\040\ufedd\041\ufedd\042\ufedd\043" +
    "\ufedd\044\ufedd\045\ufedd\046\ufedd\047\ufedd\050\ufedd\051\ufedd" +
    "\052\ufedd\053\ufedd\054\ufedd\055\ufedd\056\ufedd\057\ufedd\060" +
    "\ufedd\061\ufedd\062\ufedd\063\ufedd\064\ufedd\065\ufedd\066\ufedd" +
    "\067\ufedd\070\ufedd\071\ufedd\072\ufedd\073\ufedd\074\ufedd\075" +
    "\ufedd\077\ufedd\100\ufedd\101\ufedd\102\ufedd\103\ufedd\104\ufedd" +
    "\105\ufedd\106\ufedd\107\ufedd\110\ufedd\111\ufedd\112\ufedd\001" +
    "\002\000\160\010\uff20\020\uff20\021\uff20\022\uff20\023\uff20" +
    "\024\uff20\025\uff20\026\uff20\027\uff20\030\uff20\031\uff20\035" +
    "\uff20\036\uff20\040\uff20\041\uff20\042\uff20\043\uff20\044\uff20" +
    "\045\uff20\046\uff20\047\uff20\050\uff20\051\uff20\052\uff20\053" +
    "\uff20\054\uff20\055\uff20\056\uff20\057\uff20\060\uff20\061\uff20" +
    "\062\uff20\063\uff20\064\uff20\065\uff20\066\uff20\067\uff20\070" +
    "\uff20\071\uff20\072\uff20\073\uff20\074\uff20\075\uff20\077\uff20" +
    "\100\uff20\101\uff20\102\uff20\103\uff20\104\uff20\105\uff20\106" +
    "\uff20\107\uff20\110\uff20\111\uff20\112\uff20\001\002\000\160" +
    "\010\ufed4\020\ufed4\021\ufed4\022\ufed4\023\ufed4\024\ufed4\025" +
    "\ufed4\026\ufed4\027\ufed4\030\ufed4\031\ufed4\035\ufed4\036\ufed4" +
    "\040\ufed4\041\ufed4\042\ufed4\043\ufed4\044\ufed4\045\ufed4\046" +
    "\ufed4\047\ufed4\050\ufed4\051\ufed4\052\ufed4\053\ufed4\054\ufed4" +
    "\055\ufed4\056\ufed4\057\ufed4\060\ufed4\061\ufed4\062\ufed4\063" +
    "\ufed4\064\ufed4\065\ufed4\066\ufed4\067\ufed4\070\ufed4\071\ufed4" +
    "\072\ufed4\073\ufed4\074\ufed4\075\ufed4\077\ufed4\100\ufed4\101" +
    "\ufed4\102\ufed4\103\ufed4\104\ufed4\105\ufed4\106\ufed4\107\ufed4" +
    "\110\ufed4\111\ufed4\112\ufed4\001\002\000\160\010\ufede\020" +
    "\ufede\021\ufede\022\ufede\023\ufede\024\ufede\025\ufede\026\ufede" +
    "\027\ufede\030\ufede\031\ufede\035\ufede\036\ufede\040\ufede\041" +
    "\ufede\042\ufede\043\ufede\044\ufede\045\ufede\046\ufede\047\ufede" +
    "\050\ufede\051\ufede\052\ufede\053\ufede\054\ufede\055\ufede\056" +
    "\ufede\057\ufede\060\ufede\061\ufede\062\ufede\063\ufede\064\ufede" +
    "\065\ufede\066\ufede\067\ufede\070\ufede\071\ufede\072\ufede\073" +
    "\ufede\074\ufede\075\ufede\077\ufede\100\ufede\101\ufede\102\ufede" +
    "\103\ufede\104\ufede\105\ufede\106\ufede\107\ufede\110\ufede\111" +
    "\ufede\112\ufede\001\002\000\160\010\ufece\020\ufece\021\ufece" +
    "\022\ufece\023\ufece\024\ufece\025\ufece\026\ufece\027\ufece\030" +
    "\ufece\031\ufece\035\ufece\036\ufece\040\ufece\041\ufece\042\ufece" +
    "\043\ufece\044\ufece\045\ufece\046\ufece\047\ufece\050\ufece\051" +
    "\ufece\052\ufece\053\ufece\054\ufece\055\ufece\056\ufece\057\ufece" +
    "\060\ufece\061\ufece\062\ufece\063\ufece\064\ufece\065\ufece\066" +
    "\ufece\067\ufece\070\ufece\071\ufece\072\ufece\073\ufece\074\ufece" +
    "\075\ufece\077\ufece\100\ufece\101\ufece\102\ufece\103\ufece\104" +
    "\ufece\105\ufece\106\ufece\107\ufece\110\ufece\111\ufece\112\ufece" +
    "\001\002\000\160\010\ufed0\020\ufed0\021\ufed0\022\ufed0\023" +
    "\ufed0\024\ufed0\025\ufed0\026\ufed0\027\ufed0\030\ufed0\031\ufed0" +
    "\035\ufed0\036\ufed0\040\ufed0\041\ufed0\042\ufed0\043\ufed0\044" +
    "\ufed0\045\ufed0\046\ufed0\047\ufed0\050\ufed0\051\ufed0\052\ufed0" +
    "\053\ufed0\054\ufed0\055\ufed0\056\ufed0\057\ufed0\060\ufed0\061" +
    "\ufed0\062\ufed0\063\ufed0\064\ufed0\065\ufed0\066\ufed0\067\ufed0" +
    "\070\ufed0\071\ufed0\072\ufed0\073\ufed0\074\ufed0\075\ufed0\077" +
    "\ufed0\100\ufed0\101\ufed0\102\ufed0\103\ufed0\104\ufed0\105\ufed0" +
    "\106\ufed0\107\ufed0\110\ufed0\111\ufed0\112\ufed0\001\002\000" +
    "\160\010\ufecd\020\ufecd\021\ufecd\022\ufecd\023\ufecd\024\ufecd" +
    "\025\ufecd\026\ufecd\027\ufecd\030\ufecd\031\ufecd\035\ufecd\036" +
    "\ufecd\040\ufecd\041\ufecd\042\ufecd\043\ufecd\044\ufecd\045\ufecd" +
    "\046\ufecd\047\ufecd\050\ufecd\051\ufecd\052\ufecd\053\ufecd\054" +
    "\ufecd\055\ufecd\056\ufecd\057\ufecd\060\ufecd\061\ufecd\062\ufecd" +
    "\063\ufecd\064\ufecd\065\ufecd\066\ufecd\067\ufecd\070\ufecd\071" +
    "\ufecd\072\ufecd\073\ufecd\074\ufecd\075\ufecd\077\ufecd\100\ufecd" +
    "\101\ufecd\102\ufecd\103\ufecd\104\ufecd\105\ufecd\106\ufecd\107" +
    "\ufecd\110\ufecd\111\ufecd\112\ufecd\001\002\000\160\010\ufedc" +
    "\020\ufedc\021\ufedc\022\ufedc\023\ufedc\024\ufedc\025\ufedc\026" +
    "\ufedc\027\ufedc\030\ufedc\031\ufedc\035\ufedc\036\ufedc\040\ufedc" +
    "\041\ufedc\042\ufedc\043\ufedc\044\ufedc\045\ufedc\046\ufedc\047" +
    "\ufedc\050\ufedc\051\ufedc\052\ufedc\053\ufedc\054\ufedc\055\ufedc" +
    "\056\ufedc\057\ufedc\060\ufedc\061\ufedc\062\ufedc\063\ufedc\064" +
    "\ufedc\065\ufedc\066\ufedc\067\ufedc\070\ufedc\071\ufedc\072\ufedc" +
    "\073\ufedc\074\ufedc\075\ufedc\077\ufedc\100\ufedc\101\ufedc\102" +
    "\ufedc\103\ufedc\104\ufedc\105\ufedc\106\ufedc\107\ufedc\110\ufedc" +
    "\111\ufedc\112\ufedc\001\002\000\160\010\ufeb8\020\ufeb8\021" +
    "\ufeb8\022\ufeb8\023\ufeb8\024\ufeb8\025\ufeb8\026\ufeb8\027\ufeb8" +
    "\030\ufeb8\031\ufeb8\035\ufeb8\036\ufeb8\040\ufeb8\041\ufeb8\042" +
    "\ufeb8\043\ufeb8\044\ufeb8\045\ufeb8\046\ufeb8\047\ufeb8\050\ufeb8" +
    "\051\ufeb8\052\ufeb8\053\ufeb8\054\ufeb8\055\ufeb8\056\ufeb8\057" +
    "\ufeb8\060\ufeb8\061\ufeb8\062\ufeb8\063\ufeb8\064\ufeb8\065\ufeb8" +
    "\066\ufeb8\067\ufeb8\070\ufeb8\071\ufeb8\072\ufeb8\073\ufeb8\074" +
    "\ufeb8\075\ufeb8\077\ufeb8\100\ufeb8\101\ufeb8\102\ufeb8\103\ufeb8" +
    "\104\ufeb8\105\ufeb8\106\ufeb8\107\ufeb8\110\ufeb8\111\ufeb8\112" +
    "\ufeb8\001\002\000\160\010\ufec2\020\ufec2\021\ufec2\022\ufec2" +
    "\023\ufec2\024\ufec2\025\ufec2\026\ufec2\027\ufec2\030\ufec2\031" +
    "\ufec2\035\ufec2\036\ufec2\040\ufec2\041\ufec2\042\ufec2\043\ufec2" +
    "\044\ufec2\045\ufec2\046\ufec2\047\ufec2\050\ufec2\051\ufec2\052" +
    "\ufec2\053\ufec2\054\ufec2\055\ufec2\056\ufec2\057\ufec2\060\ufec2" +
    "\061\ufec2\062\ufec2\063\ufec2\064\ufec2\065\ufec2\066\ufec2\067" +
    "\ufec2\070\ufec2\071\ufec2\072\ufec2\073\ufec2\074\ufec2\075\ufec2" +
    "\077\ufec2\100\ufec2\101\ufec2\102\ufec2\103\ufec2\104\ufec2\105" +
    "\ufec2\106\ufec2\107\ufec2\110\ufec2\111\ufec2\112\ufec2\001\002" +
    "\000\160\010\uff21\020\uff21\021\uff21\022\uff21\023\uff21\024" +
    "\uff21\025\uff21\026\uff21\027\uff21\030\uff21\031\uff21\035\uff21" +
    "\036\uff21\040\uff21\041\uff21\042\uff21\043\uff21\044\uff21\045" +
    "\uff21\046\uff21\047\uff21\050\uff21\051\uff21\052\uff21\053\uff21" +
    "\054\uff21\055\uff21\056\uff21\057\uff21\060\uff21\061\uff21\062" +
    "\uff21\063\uff21\064\uff21\065\uff21\066\uff21\067\uff21\070\uff21" +
    "\071\uff21\072\uff21\073\uff21\074\uff21\075\uff21\077\uff21\100" +
    "\uff21\101\uff21\102\uff21\103\uff21\104\uff21\105\uff21\106\uff21" +
    "\107\uff21\110\uff21\111\uff21\112\uff21\001\002\000\160\010" +
    "\uff22\020\uff22\021\uff22\022\uff22\023\uff22\024\uff22\025\uff22" +
    "\026\uff22\027\uff22\030\uff22\031\uff22\035\uff22\036\uff22\040" +
    "\uff22\041\uff22\042\uff22\043\uff22\044\uff22\045\uff22\046\uff22" +
    "\047\uff22\050\uff22\051\uff22\052\uff22\053\uff22\054\uff22\055" +
    "\uff22\056\uff22\057\uff22\060\uff22\061\uff22\062\uff22\063\uff22" +
    "\064\uff22\065\uff22\066\uff22\067\uff22\070\uff22\071\uff22\072" +
    "\uff22\073\uff22\074\uff22\075\uff22\077\uff22\100\uff22\101\uff22" +
    "\102\uff22\103\uff22\104\uff22\105\uff22\106\uff22\107\uff22\110" +
    "\uff22\111\uff22\112\uff22\001\002\000\004\106\u0146\001\002" +
    "\000\160\010\ufee3\020\ufee3\021\ufee3\022\ufee3\023\ufee3\024" +
    "\ufee3\025\ufee3\026\ufee3\027\ufee3\030\ufee3\031\ufee3\035\ufee3" +
    "\036\ufee3\040\ufee3\041\ufee3\042\ufee3\043\ufee3\044\ufee3\045" +
    "\ufee3\046\ufee3\047\ufee3\050\ufee3\051\ufee3\052\ufee3\053\ufee3" +
    "\054\ufee3\055\ufee3\056\ufee3\057\ufee3\060\ufee3\061\ufee3\062" +
    "\ufee3\063\ufee3\064\ufee3\065\ufee3\066\ufee3\067\ufee3\070\ufee3" +
    "\071\ufee3\072\ufee3\073\ufee3\074\ufee3\075\ufee3\077\ufee3\100" +
    "\ufee3\101\ufee3\102\ufee3\103\ufee3\104\ufee3\105\ufee3\106\ufee3" +
    "\107\ufee3\110\ufee3\111\ufee3\112\ufee3\001\002\000\160\010" +
    "\ufee0\020\ufee0\021\ufee0\022\ufee0\023\ufee0\024\ufee0\025\ufee0" +
    "\026\ufee0\027\ufee0\030\ufee0\031\ufee0\035\ufee0\036\ufee0\040" +
    "\ufee0\041\ufee0\042\ufee0\043\ufee0\044\ufee0\045\ufee0\046\ufee0" +
    "\047\ufee0\050\ufee0\051\ufee0\052\ufee0\053\ufee0\054\ufee0\055" +
    "\ufee0\056\ufee0\057\ufee0\060\ufee0\061\ufee0\062\ufee0\063\ufee0" +
    "\064\ufee0\065\ufee0\066\ufee0\067\ufee0\070\ufee0\071\ufee0\072" +
    "\ufee0\073\ufee0\074\ufee0\075\ufee0\077\ufee0\100\ufee0\101\ufee0" +
    "\102\ufee0\103\ufee0\104\ufee0\105\ufee0\106\ufee0\107\ufee0\110" +
    "\ufee0\111\ufee0\112\ufee0\001\002\000\160\010\ufeda\020\ufeda" +
    "\021\ufeda\022\ufeda\023\ufeda\024\ufeda\025\ufeda\026\ufeda\027" +
    "\ufeda\030\ufeda\031\ufeda\035\ufeda\036\ufeda\040\ufeda\041\ufeda" +
    "\042\ufeda\043\ufeda\044\ufeda\045\ufeda\046\ufeda\047\ufeda\050" +
    "\ufeda\051\ufeda\052\ufeda\053\ufeda\054\ufeda\055\ufeda\056\ufeda" +
    "\057\ufeda\060\ufeda\061\ufeda\062\ufeda\063\ufeda\064\ufeda\065" +
    "\ufeda\066\ufeda\067\ufeda\070\ufeda\071\ufeda\072\ufeda\073\ufeda" +
    "\074\ufeda\075\ufeda\077\ufeda\100\ufeda\101\ufeda\102\ufeda\103" +
    "\ufeda\104\ufeda\105\ufeda\106\ufeda\107\ufeda\110\ufeda\111\ufeda" +
    "\112\ufeda\001\002\000\160\010\ufec8\020\ufec8\021\ufec8\022" +
    "\ufec8\023\ufec8\024\ufec8\025\ufec8\026\ufec8\027\ufec8\030\ufec8" +
    "\031\ufec8\035\ufec8\036\ufec8\040\ufec8\041\ufec8\042\ufec8\043" +
    "\ufec8\044\ufec8\045\ufec8\046\ufec8\047\ufec8\050\ufec8\051\ufec8" +
    "\052\ufec8\053\ufec8\054\ufec8\055\ufec8\056\ufec8\057\ufec8\060" +
    "\ufec8\061\ufec8\062\ufec8\063\ufec8\064\ufec8\065\ufec8\066\ufec8" +
    "\067\ufec8\070\ufec8\071\ufec8\072\ufec8\073\ufec8\074\ufec8\075" +
    "\ufec8\077\ufec8\100\ufec8\101\ufec8\102\ufec8\103\ufec8\104\ufec8" +
    "\105\ufec8\106\ufec8\107\ufec8\110\ufec8\111\ufec8\112\ufec8\001" +
    "\002\000\160\010\uff1f\020\uff1f\021\uff1f\022\uff1f\023\uff1f" +
    "\024\uff1f\025\uff1f\026\uff1f\027\uff1f\030\uff1f\031\uff1f\035" +
    "\uff1f\036\uff1f\040\uff1f\041\uff1f\042\uff1f\043\uff1f\044\uff1f" +
    "\045\uff1f\046\uff1f\047\uff1f\050\uff1f\051\uff1f\052\uff1f\053" +
    "\uff1f\054\uff1f\055\uff1f\056\uff1f\057\uff1f\060\uff1f\061\uff1f" +
    "\062\uff1f\063\uff1f\064\uff1f\065\uff1f\066\uff1f\067\uff1f\070" +
    "\uff1f\071\uff1f\072\uff1f\073\uff1f\074\uff1f\075\uff1f\077\uff1f" +
    "\100\uff1f\101\uff1f\102\uff1f\103\uff1f\104\uff1f\105\uff1f\106" +
    "\uff1f\107\uff1f\110\uff1f\111\uff1f\112\uff1f\001\002\000\160" +
    "\010\ufed1\020\ufed1\021\ufed1\022\ufed1\023\ufed1\024\ufed1\025" +
    "\ufed1\026\ufed1\027\ufed1\030\ufed1\031\ufed1\035\ufed1\036\ufed1" +
    "\040\ufed1\041\ufed1\042\ufed1\043\ufed1\044\ufed1\045\ufed1\046" +
    "\ufed1\047\ufed1\050\ufed1\051\ufed1\052\ufed1\053\ufed1\054\ufed1" +
    "\055\ufed1\056\ufed1\057\ufed1\060\ufed1\061\ufed1\062\ufed1\063" +
    "\ufed1\064\ufed1\065\ufed1\066\ufed1\067\ufed1\070\ufed1\071\ufed1" +
    "\072\ufed1\073\ufed1\074\ufed1\075\ufed1\077\ufed1\100\ufed1\101" +
    "\ufed1\102\ufed1\103\ufed1\104\ufed1\105\ufed1\106\ufed1\107\ufed1" +
    "\110\ufed1\111\ufed1\112\ufed1\001\002\000\160\010\ufeb7\020" +
    "\ufeb7\021\ufeb7\022\ufeb7\023\ufeb7\024\ufeb7\025\ufeb7\026\ufeb7" +
    "\027\ufeb7\030\ufeb7\031\ufeb7\035\ufeb7\036\ufeb7\040\ufeb7\041" +
    "\ufeb7\042\ufeb7\043\ufeb7\044\ufeb7\045\ufeb7\046\ufeb7\047\ufeb7" +
    "\050\ufeb7\051\ufeb7\052\ufeb7\053\ufeb7\054\ufeb7\055\ufeb7\056" +
    "\ufeb7\057\ufeb7\060\ufeb7\061\ufeb7\062\ufeb7\063\ufeb7\064\ufeb7" +
    "\065\ufeb7\066\ufeb7\067\ufeb7\070\ufeb7\071\ufeb7\072\ufeb7\073" +
    "\ufeb7\074\ufeb7\075\ufeb7\077\ufeb7\100\ufeb7\101\ufeb7\102\ufeb7" +
    "\103\ufeb7\104\ufeb7\105\ufeb7\106\ufeb7\107\ufeb7\110\ufeb7\111" +
    "\ufeb7\112\ufeb7\001\002\000\160\010\ufec4\020\ufec4\021\ufec4" +
    "\022\ufec4\023\ufec4\024\ufec4\025\ufec4\026\ufec4\027\ufec4\030" +
    "\ufec4\031\ufec4\035\ufec4\036\ufec4\040\ufec4\041\ufec4\042\ufec4" +
    "\043\ufec4\044\ufec4\045\ufec4\046\ufec4\047\ufec4\050\ufec4\051" +
    "\ufec4\052\ufec4\053\ufec4\054\ufec4\055\ufec4\056\ufec4\057\ufec4" +
    "\060\ufec4\061\ufec4\062\ufec4\063\ufec4\064\ufec4\065\ufec4\066" +
    "\ufec4\067\ufec4\070\ufec4\071\ufec4\072\ufec4\073\ufec4\074\ufec4" +
    "\075\ufec4\077\ufec4\100\ufec4\101\ufec4\102\ufec4\103\ufec4\104" +
    "\ufec4\105\ufec4\106\ufec4\107\ufec4\110\ufec4\111\ufec4\112\ufec4" +
    "\001\002\000\160\010\ufecb\020\ufecb\021\ufecb\022\ufecb\023" +
    "\ufecb\024\ufecb\025\ufecb\026\ufecb\027\ufecb\030\ufecb\031\ufecb" +
    "\035\ufecb\036\ufecb\040\ufecb\041\ufecb\042\ufecb\043\ufecb\044" +
    "\ufecb\045\ufecb\046\ufecb\047\ufecb\050\ufecb\051\ufecb\052\ufecb" +
    "\053\ufecb\054\ufecb\055\ufecb\056\ufecb\057\ufecb\060\ufecb\061" +
    "\ufecb\062\ufecb\063\ufecb\064\ufecb\065\ufecb\066\ufecb\067\ufecb" +
    "\070\ufecb\071\ufecb\072\ufecb\073\ufecb\074\ufecb\075\ufecb\077" +
    "\ufecb\100\ufecb\101\ufecb\102\ufecb\103\ufecb\104\ufecb\105\ufecb" +
    "\106\ufecb\107\ufecb\110\ufecb\111\ufecb\112\ufecb\001\002\000" +
    "\160\010\ufeb9\020\ufeb9\021\ufeb9\022\ufeb9\023\ufeb9\024\ufeb9" +
    "\025\ufeb9\026\ufeb9\027\ufeb9\030\ufeb9\031\ufeb9\035\ufeb9\036" +
    "\ufeb9\040\ufeb9\041\ufeb9\042\ufeb9\043\ufeb9\044\ufeb9\045\ufeb9" +
    "\046\ufeb9\047\ufeb9\050\ufeb9\051\ufeb9\052\ufeb9\053\ufeb9\054" +
    "\ufeb9\055\ufeb9\056\ufeb9\057\ufeb9\060\ufeb9\061\ufeb9\062\ufeb9" +
    "\063\ufeb9\064\ufeb9\065\ufeb9\066\ufeb9\067\ufeb9\070\ufeb9\071" +
    "\ufeb9\072\ufeb9\073\ufeb9\074\ufeb9\075\ufeb9\077\ufeb9\100\ufeb9" +
    "\101\ufeb9\102\ufeb9\103\ufeb9\104\ufeb9\105\ufeb9\106\ufeb9\107" +
    "\ufeb9\110\ufeb9\111\ufeb9\112\ufeb9\001\002\000\160\010\ufed9" +
    "\020\ufed9\021\ufed9\022\ufed9\023\ufed9\024\ufed9\025\ufed9\026" +
    "\ufed9\027\ufed9\030\ufed9\031\ufed9\035\ufed9\036\ufed9\040\ufed9" +
    "\041\ufed9\042\ufed9\043\ufed9\044\ufed9\045\ufed9\046\ufed9\047" +
    "\ufed9\050\ufed9\051\ufed9\052\ufed9\053\ufed9\054\ufed9\055\ufed9" +
    "\056\ufed9\057\ufed9\060\ufed9\061\ufed9\062\ufed9\063\ufed9\064" +
    "\ufed9\065\ufed9\066\ufed9\067\ufed9\070\ufed9\071\ufed9\072\ufed9" +
    "\073\ufed9\074\ufed9\075\ufed9\077\ufed9\100\ufed9\101\ufed9\102" +
    "\ufed9\103\ufed9\104\ufed9\105\ufed9\106\ufed9\107\ufed9\110\ufed9" +
    "\111\ufed9\112\ufed9\001\002\000\160\010\ufecc\020\ufecc\021" +
    "\ufecc\022\ufecc\023\ufecc\024\ufecc\025\ufecc\026\ufecc\027\ufecc" +
    "\030\ufecc\031\ufecc\035\ufecc\036\ufecc\040\ufecc\041\ufecc\042" +
    "\ufecc\043\ufecc\044\ufecc\045\ufecc\046\ufecc\047\ufecc\050\ufecc" +
    "\051\ufecc\052\ufecc\053\ufecc\054\ufecc\055\ufecc\056\ufecc\057" +
    "\ufecc\060\ufecc\061\ufecc\062\ufecc\063\ufecc\064\ufecc\065\ufecc" +
    "\066\ufecc\067\ufecc\070\ufecc\071\ufecc\072\ufecc\073\ufecc\074" +
    "\ufecc\075\ufecc\077\ufecc\100\ufecc\101\ufecc\102\ufecc\103\ufecc" +
    "\104\ufecc\105\ufecc\106\ufecc\107\ufecc\110\ufecc\111\ufecc\112" +
    "\ufecc\001\002\000\160\010\ufec3\020\ufec3\021\ufec3\022\ufec3" +
    "\023\ufec3\024\ufec3\025\ufec3\026\ufec3\027\ufec3\030\ufec3\031" +
    "\ufec3\035\ufec3\036\ufec3\040\ufec3\041\ufec3\042\ufec3\043\ufec3" +
    "\044\ufec3\045\ufec3\046\ufec3\047\ufec3\050\ufec3\051\ufec3\052" +
    "\ufec3\053\ufec3\054\ufec3\055\ufec3\056\ufec3\057\ufec3\060\ufec3" +
    "\061\ufec3\062\ufec3\063\ufec3\064\ufec3\065\ufec3\066\ufec3\067" +
    "\ufec3\070\ufec3\071\ufec3\072\ufec3\073\ufec3\074\ufec3\075\ufec3" +
    "\077\ufec3\100\ufec3\101\ufec3\102\ufec3\103\ufec3\104\ufec3\105" +
    "\ufec3\106\ufec3\107\ufec3\110\ufec3\111\ufec3\112\ufec3\001\002" +
    "\000\160\010\ufebb\020\ufebb\021\ufebb\022\ufebb\023\ufebb\024" +
    "\ufebb\025\ufebb\026\ufebb\027\ufebb\030\ufebb\031\ufebb\035\ufebb" +
    "\036\ufebb\040\ufebb\041\ufebb\042\ufebb\043\ufebb\044\ufebb\045" +
    "\ufebb\046\ufebb\047\ufebb\050\ufebb\051\ufebb\052\ufebb\053\ufebb" +
    "\054\ufebb\055\ufebb\056\ufebb\057\ufebb\060\ufebb\061\ufebb\062" +
    "\ufebb\063\ufebb\064\ufebb\065\ufebb\066\ufebb\067\ufebb\070\ufebb" +
    "\071\ufebb\072\ufebb\073\ufebb\074\ufebb\075\ufebb\077\ufebb\100" +
    "\ufebb\101\ufebb\102\ufebb\103\ufebb\104\ufebb\105\ufebb\106\ufebb" +
    "\107\ufebb\110\ufebb\111\ufebb\112\ufebb\001\002\000\160\010" +
    "\ufec6\020\ufec6\021\ufec6\022\ufec6\023\ufec6\024\ufec6\025\ufec6" +
    "\026\ufec6\027\ufec6\030\ufec6\031\ufec6\035\ufec6\036\ufec6\040" +
    "\ufec6\041\ufec6\042\ufec6\043\ufec6\044\ufec6\045\ufec6\046\ufec6" +
    "\047\ufec6\050\ufec6\051\ufec6\052\ufec6\053\ufec6\054\ufec6\055" +
    "\ufec6\056\ufec6\057\ufec6\060\ufec6\061\ufec6\062\ufec6\063\ufec6" +
    "\064\ufec6\065\ufec6\066\ufec6\067\ufec6\070\ufec6\071\ufec6\072" +
    "\ufec6\073\ufec6\074\ufec6\075\ufec6\077\ufec6\100\ufec6\101\ufec6" +
    "\102\ufec6\103\ufec6\104\ufec6\105\ufec6\106\ufec6\107\ufec6\110" +
    "\ufec6\111\ufec6\112\ufec6\001\002\000\160\010\ufebc\020\ufebc" +
    "\021\ufebc\022\ufebc\023\ufebc\024\ufebc\025\ufebc\026\ufebc\027" +
    "\ufebc\030\ufebc\031\ufebc\035\ufebc\036\ufebc\040\ufebc\041\ufebc" +
    "\042\ufebc\043\ufebc\044\ufebc\045\ufebc\046\ufebc\047\ufebc\050" +
    "\ufebc\051\ufebc\052\ufebc\053\ufebc\054\ufebc\055\ufebc\056\ufebc" +
    "\057\ufebc\060\ufebc\061\ufebc\062\ufebc\063\ufebc\064\ufebc\065" +
    "\ufebc\066\ufebc\067\ufebc\070\ufebc\071\ufebc\072\ufebc\073\ufebc" +
    "\074\ufebc\075\ufebc\077\ufebc\100\ufebc\101\ufebc\102\ufebc\103" +
    "\ufebc\104\ufebc\105\ufebc\106\ufebc\107\ufebc\110\ufebc\111\ufebc" +
    "\112\ufebc\001\002\000\160\010\ufec9\020\ufec9\021\ufec9\022" +
    "\ufec9\023\ufec9\024\ufec9\025\ufec9\026\ufec9\027\ufec9\030\ufec9" +
    "\031\ufec9\035\ufec9\036\ufec9\040\ufec9\041\ufec9\042\ufec9\043" +
    "\ufec9\044\ufec9\045\ufec9\046\ufec9\047\ufec9\050\ufec9\051\ufec9" +
    "\052\ufec9\053\ufec9\054\ufec9\055\ufec9\056\ufec9\057\ufec9\060" +
    "\ufec9\061\ufec9\062\ufec9\063\ufec9\064\ufec9\065\ufec9\066\ufec9" +
    "\067\ufec9\070\ufec9\071\ufec9\072\ufec9\073\ufec9\074\ufec9\075" +
    "\ufec9\077\ufec9\100\ufec9\101\ufec9\102\ufec9\103\ufec9\104\ufec9" +
    "\105\ufec9\106\ufec9\107\ufec9\110\ufec9\111\ufec9\112\ufec9\001" +
    "\002\000\160\010\ufed7\020\ufed7\021\ufed7\022\ufed7\023\ufed7" +
    "\024\ufed7\025\ufed7\026\ufed7\027\ufed7\030\ufed7\031\ufed7\035" +
    "\ufed7\036\ufed7\040\ufed7\041\ufed7\042\ufed7\043\ufed7\044\ufed7" +
    "\045\ufed7\046\ufed7\047\ufed7\050\ufed7\051\ufed7\052\ufed7\053" +
    "\ufed7\054\ufed7\055\ufed7\056\ufed7\057\ufed7\060\ufed7\061\ufed7" +
    "\062\ufed7\063\ufed7\064\ufed7\065\ufed7\066\ufed7\067\ufed7\070" +
    "\ufed7\071\ufed7\072\ufed7\073\ufed7\074\ufed7\075\ufed7\077\ufed7" +
    "\100\ufed7\101\ufed7\102\ufed7\103\ufed7\104\ufed7\105\ufed7\106" +
    "\ufed7\107\ufed7\110\ufed7\111\ufed7\112\ufed7\001\002\000\160" +
    "\010\ufee5\020\ufee5\021\ufee5\022\ufee5\023\ufee5\024\ufee5\025" +
    "\ufee5\026\ufee5\027\ufee5\030\ufee5\031\ufee5\035\ufee5\036\ufee5" +
    "\040\ufee5\041\ufee5\042\ufee5\043\ufee5\044\ufee5\045\ufee5\046" +
    "\ufee5\047\ufee5\050\ufee5\051\ufee5\052\ufee5\053\ufee5\054\ufee5" +
    "\055\ufee5\056\ufee5\057\ufee5\060\ufee5\061\ufee5\062\ufee5\063" +
    "\ufee5\064\ufee5\065\ufee5\066\ufee5\067\ufee5\070\ufee5\071\ufee5" +
    "\072\ufee5\073\ufee5\074\ufee5\075\ufee5\077\ufee5\100\ufee5\101" +
    "\ufee5\102\ufee5\103\ufee5\104\ufee5\105\ufee5\106\ufee5\107\ufee5" +
    "\110\ufee5\111\ufee5\112\ufee5\001\002\000\160\010\ufeea\020" +
    "\ufeea\021\ufeea\022\ufeea\023\ufeea\024\ufeea\025\ufeea\026\ufeea" +
    "\027\ufeea\030\ufeea\031\ufeea\035\ufeea\036\ufeea\040\ufeea\041" +
    "\ufeea\042\ufeea\043\ufeea\044\ufeea\045\ufeea\046\ufeea\047\ufeea" +
    "\050\ufeea\051\ufeea\052\ufeea\053\ufeea\054\ufeea\055\ufeea\056" +
    "\ufeea\057\ufeea\060\ufeea\061\ufeea\062\ufeea\063\ufeea\064\ufeea" +
    "\065\ufeea\066\ufeea\067\ufeea\070\ufeea\071\ufeea\072\ufeea\073" +
    "\ufeea\074\ufeea\075\ufeea\077\ufeea\100\ufeea\101\ufeea\102\ufeea" +
    "\103\ufeea\104\ufeea\105\ufeea\106\ufeea\107\ufeea\110\ufeea\111" +
    "\ufeea\112\ufeea\001\002\000\160\010\u0129\020\u0117\021\u013f" +
    "\022\u010c\023\u0114\024\u013b\025\u0109\026\u0141\027\u012a\030" +
    "\u010b\031\u011f\035\u011c\036\u0108\040\u0123\041\u010e\042\u012b" +
    "\043\u0133\044\u013e\045\u013a\046\u011a\047\u011b\050\u011e\051" +
    "\u0107\052\u0126\053\u011d\054\u012d\055\u010d\056\u012e\057\u0121" +
    "\060\u010a\061\u0120\062\u0122\063\u0134\064\u0131\065\u010f\066" +
    "\u0139\067\u012c\070\u0119\071\u0137\072\u0140\073\u0130\074\u0143" +
    "\075\u0135\077\u0125\100\u0112\101\u0118\102\u0116\103\u0115\104" +
    "\u0113\105\u0138\106\u0136\107\u0106\110\u0132\111\u0124\112\u012f" +
    "\001\002\000\160\010\ufed8\020\ufed8\021\ufed8\022\ufed8\023" +
    "\ufed8\024\ufed8\025\ufed8\026\ufed8\027\ufed8\030\ufed8\031\ufed8" +
    "\035\ufed8\036\ufed8\040\ufed8\041\ufed8\042\ufed8\043\ufed8\044" +
    "\ufed8\045\ufed8\046\ufed8\047\ufed8\050\ufed8\051\ufed8\052\ufed8" +
    "\053\ufed8\054\ufed8\055\ufed8\056\ufed8\057\ufed8\060\ufed8\061" +
    "\ufed8\062\ufed8\063\ufed8\064\ufed8\065\ufed8\066\ufed8\067\ufed8" +
    "\070\ufed8\071\ufed8\072\ufed8\073\ufed8\074\ufed8\075\ufed8\077" +
    "\ufed8\100\ufed8\101\ufed8\102\ufed8\103\ufed8\104\ufed8\105\ufed8" +
    "\106\ufed8\107\ufed8\110\ufed8\111\ufed8\112\ufed8\001\002\000" +
    "\160\010\ufee8\020\ufee8\021\ufee8\022\ufee8\023\ufee8\024\ufee8" +
    "\025\ufee8\026\ufee8\027\ufee8\030\ufee8\031\ufee8\035\ufee8\036" +
    "\ufee8\040\ufee8\041\ufee8\042\ufee8\043\ufee8\044\ufee8\045\ufee8" +
    "\046\ufee8\047\ufee8\050\ufee8\051\ufee8\052\ufee8\053\ufee8\054" +
    "\ufee8\055\ufee8\056\ufee8\057\ufee8\060\ufee8\061\ufee8\062\ufee8" +
    "\063\ufee8\064\ufee8\065\ufee8\066\ufee8\067\ufee8\070\ufee8\071" +
    "\ufee8\072\ufee8\073\ufee8\074\ufee8\075\ufee8\077\ufee8\100\ufee8" +
    "\101\ufee8\102\ufee8\103\ufee8\104\ufee8\105\ufee8\106\ufee8\107" +
    "\ufee8\110\ufee8\111\ufee8\112\ufee8\001\002\000\160\010\ufec5" +
    "\020\ufec5\021\ufec5\022\ufec5\023\ufec5\024\ufec5\025\ufec5\026" +
    "\ufec5\027\ufec5\030\ufec5\031\ufec5\035\ufec5\036\ufec5\040\ufec5" +
    "\041\ufec5\042\ufec5\043\ufec5\044\ufec5\045\ufec5\046\ufec5\047" +
    "\ufec5\050\ufec5\051\ufec5\052\ufec5\053\ufec5\054\ufec5\055\ufec5" +
    "\056\ufec5\057\ufec5\060\ufec5\061\ufec5\062\ufec5\063\ufec5\064" +
    "\ufec5\065\ufec5\066\ufec5\067\ufec5\070\ufec5\071\ufec5\072\ufec5" +
    "\073\ufec5\074\ufec5\075\ufec5\077\ufec5\100\ufec5\101\ufec5\102" +
    "\ufec5\103\ufec5\104\ufec5\105\ufec5\106\ufec5\107\ufec5\110\ufec5" +
    "\111\ufec5\112\ufec5\001\002\000\160\010\ufee1\020\ufee1\021" +
    "\ufee1\022\ufee1\023\ufee1\024\ufee1\025\ufee1\026\ufee1\027\ufee1" +
    "\030\ufee1\031\ufee1\035\ufee1\036\ufee1\040\ufee1\041\ufee1\042" +
    "\ufee1\043\ufee1\044\ufee1\045\ufee1\046\ufee1\047\ufee1\050\ufee1" +
    "\051\ufee1\052\ufee1\053\ufee1\054\ufee1\055\ufee1\056\ufee1\057" +
    "\ufee1\060\ufee1\061\ufee1\062\ufee1\063\ufee1\064\ufee1\065\ufee1" +
    "\066\ufee1\067\ufee1\070\ufee1\071\ufee1\072\ufee1\073\ufee1\074" +
    "\ufee1\075\ufee1\077\ufee1\100\ufee1\101\ufee1\102\ufee1\103\ufee1" +
    "\104\ufee1\105\ufee1\106\ufee1\107\ufee1\110\ufee1\111\ufee1\112" +
    "\ufee1\001\002\000\160\010\uff23\020\uff23\021\uff23\022\uff23" +
    "\023\uff23\024\uff23\025\uff23\026\uff23\027\uff23\030\uff23\031" +
    "\uff23\035\uff23\036\uff23\040\uff23\041\uff23\042\uff23\043\uff23" +
    "\044\uff23\045\uff23\046\uff23\047\uff23\050\uff23\051\uff23\052" +
    "\uff23\053\uff23\054\uff23\055\uff23\056\uff23\057\uff23\060\uff23" +
    "\061\uff23\062\uff23\063\uff23\064\uff23\065\uff23\066\uff23\067" +
    "\uff23\070\uff23\071\uff23\072\uff23\073\uff23\074\uff23\075\uff23" +
    "\077\uff23\100\uff23\101\uff23\102\uff23\103\uff23\104\uff23\105" +
    "\uff23\106\uff23\107\uff23\110\uff23\111\uff23\112\uff23\001\002" +
    "\000\004\106\u0145\001\002\000\160\010\ufeeb\020\ufeeb\021" +
    "\ufeeb\022\ufeeb\023\ufeeb\024\ufeeb\025\ufeeb\026\ufeeb\027\ufeeb" +
    "\030\ufeeb\031\ufeeb\035\ufeeb\036\ufeeb\040\ufeeb\041\ufeeb\042" +
    "\ufeeb\043\ufeeb\044\ufeeb\045\ufeeb\046\ufeeb\047\ufeeb\050\ufeeb" +
    "\051\ufeeb\052\ufeeb\053\ufeeb\054\ufeeb\055\ufeeb\056\ufeeb\057" +
    "\ufeeb\060\ufeeb\061\ufeeb\062\ufeeb\063\ufeeb\064\ufeeb\065\ufeeb" +
    "\066\ufeeb\067\ufeeb\070\ufeeb\071\ufeeb\072\ufeeb\073\ufeeb\074" +
    "\ufeeb\075\ufeeb\077\ufeeb\100\ufeeb\101\ufeeb\102\ufeeb\103\ufeeb" +
    "\104\ufeeb\105\ufeeb\106\ufeeb\107\ufeeb\110\ufeeb\111\ufeeb\112" +
    "\ufeeb\001\002\000\004\077\uff1d\001\002\000\004\077\uff1c" +
    "\001\002\000\160\010\uff25\020\uff25\021\uff25\022\uff25\023" +
    "\uff25\024\uff25\025\uff25\026\uff25\027\uff25\030\uff25\031\uff25" +
    "\035\uff25\036\uff25\040\uff25\041\uff25\042\uff25\043\uff25\044" +
    "\uff25\045\uff25\046\uff25\047\uff25\050\uff25\051\uff25\052\uff25" +
    "\053\uff25\054\uff25\055\uff25\056\uff25\057\uff25\060\uff25\061" +
    "\uff25\062\uff25\063\uff25\064\uff25\065\uff25\066\uff25\067\uff25" +
    "\070\uff25\071\uff25\072\uff25\073\uff25\074\uff25\075\uff25\077" +
    "\uff25\100\uff25\101\uff25\102\uff25\103\uff25\104\uff25\105\uff25" +
    "\106\uff25\107\uff25\110\uff25\111\uff25\112\uff25\001\002\000" +
    "\004\076\u014a\001\002\000\156\010\u0129\020\u0117\021\u013f" +
    "\022\u010c\023\u0114\024\u013b\025\u0109\026\u0141\027\u012a\030" +
    "\u010b\031\u011f\035\u011c\036\u0108\040\u0123\041\u010e\042\u012b" +
    "\043\u0133\044\u013e\045\u013a\046\u011a\047\u011b\050\u011e\051" +
    "\u0107\052\u0126\053\u011d\054\u012d\055\u010d\056\u012e\057\u0121" +
    "\060\u010a\061\u0120\062\u0122\063\u0134\064\u0131\065\u010f\066" +
    "\u0139\067\u012c\070\u0119\071\u0137\072\u0140\073\u0130\075\u0135" +
    "\077\u0125\100\u0112\101\u0118\102\u0116\103\u0115\104\u0113\105" +
    "\u0138\106\u0136\107\u0106\110\u0132\111\u0124\112\u012f\001\002" +
    "\000\030\003\167\017\174\020\120\021\152\022\157\027" +
    "\160\037\u014c\105\172\107\165\110\170\111\166\001\002" +
    "\000\010\003\u0152\076\u0150\106\uff1b\001\002\000\026\003" +
    "\167\017\174\020\120\021\152\022\157\027\160\105\172" +
    "\107\165\110\170\111\166\001\002\000\004\106\u014e\001" +
    "\002\000\004\077\uff1e\001\002\000\010\003\u0152\076\u0150" +
    "\106\uff19\001\002\000\010\003\u015b\037\u015a\111\u0159\001" +
    "\002\000\006\076\u0153\106\uff18\001\002\000\006\076\uff11" +
    "\106\uff11\001\002\000\010\003\u0156\037\u0154\111\u0155\001" +
    "\002\000\004\111\u0158\001\002\000\006\076\uff16\106\uff16" +
    "\001\002\000\004\111\u0157\001\002\000\006\076\uff14\106" +
    "\uff14\001\002\000\006\076\uff12\106\uff12\001\002\000\006" +
    "\076\uff17\106\uff17\001\002\000\004\111\u015d\001\002\000" +
    "\010\076\uff10\106\uff10\111\u015c\001\002\000\006\076\uff15" +
    "\106\uff15\001\002\000\006\076\uff13\106\uff13\001\002\000" +
    "\006\076\u0153\106\uff1a\001\002\000\004\104\u0160\001\002" +
    "\000\062\003\uff7b\004\uff7b\010\uff7b\020\uff7b\021\uff7b\022" +
    "\uff7b\023\uff7b\024\uff7b\025\uff7b\036\uff7b\051\uff7b\061\uff7b" +
    "\062\uff7b\063\uff7b\064\uff7b\065\uff7b\066\uff7b\067\uff7b\070" +
    "\uff7b\071\uff7b\072\uff7b\073\uff7b\104\uff7b\111\uff7b\001\002" +
    "\000\062\003\ufef3\004\ufef3\010\ufef3\020\ufef3\021\ufef3\022" +
    "\ufef3\023\ufef3\024\ufef3\025\ufef3\036\ufef3\051\ufef3\061\ufef3" +
    "\064\ufef3\065\ufef3\066\ufef3\067\ufef3\070\ufef3\071\ufef3\072" +
    "\ufef3\073\ufef3\077\u0166\104\ufef3\106\ufffb\111\ufef3\001\002" +
    "\000\004\106\u0163\001\002\000\006\003\u0164\077\u0165\001" +
    "\002\000\056\003\ufef0\004\ufef0\010\ufef0\020\ufef0\021\ufef0" +
    "\022\ufef0\023\ufef0\024\ufef0\025\ufef0\036\ufef0\051\ufef0\061" +
    "\ufef0\064\ufef0\065\ufef0\066\ufef0\067\ufef0\070\ufef0\071\ufef0" +
    "\072\ufef0\073\ufef0\104\ufef0\111\ufef0\001\002\000\056\003" +
    "\ufef9\004\ufef9\010\ufef9\020\ufef9\021\ufef9\022\ufef9\023\ufef9" +
    "\024\ufef9\025\ufef9\036\ufef9\051\ufef9\061\ufef9\064\ufef9\065" +
    "\ufef9\066\ufef9\067\ufef9\070\ufef9\071\ufef9\072\ufef9\073\ufef9" +
    "\104\ufef9\111\ufef9\001\002\000\056\003\ufef6\004\ufef6\010" +
    "\ufef6\020\ufef6\021\ufef6\022\ufef6\023\ufef6\024\ufef6\025\ufef6" +
    "\036\ufef6\051\ufef6\061\ufef6\064\ufef6\065\ufef6\066\ufef6\067" +
    "\ufef6\070\ufef6\071\ufef6\072\ufef6\073\ufef6\104\ufef6\111\ufef6" +
    "\001\002\000\006\003\uff63\105\uff63\001\002\000\006\003" +
    "\242\105\243\001\002\000\006\003\242\105\243\001\002" +
    "\000\056\003\ufefb\004\ufefb\010\ufefb\020\ufefb\021\ufefb\022" +
    "\ufefb\023\ufefb\024\ufefb\025\ufefb\036\ufefb\051\ufefb\061\ufefb" +
    "\064\ufefb\065\ufefb\066\ufefb\067\ufefb\070\ufefb\071\ufefb\072" +
    "\ufefb\073\ufefb\104\ufefb\111\ufefb\001\002\000\056\003\ufefa" +
    "\004\ufefa\010\ufefa\020\ufefa\021\ufefa\022\ufefa\023\ufefa\024" +
    "\ufefa\025\ufefa\036\ufefa\051\ufefa\061\ufefa\064\ufefa\065\ufefa" +
    "\066\ufefa\067\ufefa\070\ufefa\071\ufefa\072\ufefa\073\ufefa\104" +
    "\ufefa\111\ufefa\001\002\000\006\003\242\105\243\001\002" +
    "\000\004\105\u0175\001\002\000\006\003\242\105\243\001" +
    "\002\000\004\103\u0170\001\002\000\050\003\uff5d\004\uff5d" +
    "\010\uff5d\020\uff5d\021\uff5d\022\uff5d\023\uff5d\024\uff5d\025" +
    "\uff5d\036\uff5d\051\uff5d\061\uff5d\064\uff5d\070\uff5d\071\uff5d" +
    "\072\uff5d\073\uff5d\104\uff5d\111\uff5d\001\002\000\020\003" +
    "\374\017\174\027\160\105\172\107\165\110\170\111\166" +
    "\001\002\000\004\106\u0173\001\002\000\004\103\u0174\001" +
    "\002\000\004\065\uff71\001\002\000\004\106\u0176\001\002" +
    "\000\004\077\u0177\001\002\000\056\003\uff08\004\uff08\010" +
    "\uff08\020\uff08\021\uff08\022\uff08\023\uff08\024\uff08\025\uff08" +
    "\036\uff08\051\uff08\061\uff08\064\uff08\065\uff08\066\uff08\067" +
    "\uff08\070\uff08\071\uff08\072\uff08\073\uff08\104\uff08\111\uff08" +
    "\001\002\000\022\003\255\017\261\027\160\046\257\105" +
    "\172\107\165\110\170\111\166\001\002\000\004\106\u017a" +
    "\001\002\000\004\103\u017b\001\002\000\050\003\uff81\004" +
    "\uff81\010\uff81\020\uff81\021\uff81\022\uff81\023\uff81\024\uff81" +
    "\025\uff81\036\uff81\051\uff81\061\uff81\064\uff81\070\uff81\071" +
    "\uff81\072\uff81\073\uff81\104\uff81\111\uff81\001\002\000\004" +
    "\074\u017d\001\002\000\156\010\u0129\020\u0117\021\u013f\022" +
    "\u010c\023\u0114\024\u013b\025\u0109\026\u0141\027\u012a\030\u010b" +
    "\031\u011f\035\u011c\036\u0108\040\u0123\041\u010e\042\u012b\043" +
    "\u0133\044\u013e\045\u013a\046\u011a\047\u011b\050\u011e\051\u0107" +
    "\052\u0126\053\u011d\054\u012d\055\u010d\056\u012e\057\u0121\060" +
    "\u010a\061\u0120\062\u0122\063\u0134\064\u0131\065\u010f\066\u0139" +
    "\067\u012c\070\u0119\071\u0137\072\u0140\073\u0130\075\u0135\077" +
    "\u0125\100\u0112\101\u0118\102\u0116\103\u0115\104\u0113\105\u0138" +
    "\106\u0136\107\u0106\110\u0132\111\u0124\112\u012f\001\002\000" +
    "\004\074\u0188\001\002\000\156\010\u0129\020\u0117\021\u013f" +
    "\022\u010c\023\u0114\024\u013b\025\u0109\026\u0141\027\u012a\030" +
    "\u010b\031\u011f\035\u011c\036\u0108\040\u0123\041\u010e\042\u012b" +
    "\043\u0133\044\u013e\045\u013a\046\u011a\047\u011b\050\u011e\051" +
    "\u0107\052\u0126\053\u011d\054\u012d\055\u010d\056\u012e\057\u0121" +
    "\060\u010a\061\u0120\062\u0122\063\u0134\064\u0131\065\u010f\066" +
    "\u0139\067\u012c\070\u0119\071\u0137\072\u0140\073\u0130\075\u0135" +
    "\077\u0125\100\u0112\101\u0118\102\u0116\103\u0115\104\u0113\105" +
    "\u0138\106\u0136\107\u0106\110\u0132\111\u0124\112\u012f\001\002" +
    "\000\004\074\u0181\001\002\000\004\076\u0182\001\002\000" +
    "\006\037\u0184\111\u0183\001\002\000\004\106\u0187\001\002" +
    "\000\004\111\u0185\001\002\000\004\106\u0186\001\002\000" +
    "\004\077\uff29\001\002\000\004\077\uff27\001\002\000\004" +
    "\076\u0189\001\002\000\006\037\u018b\111\u018a\001\002\000" +
    "\004\106\u018e\001\002\000\004\111\u018c\001\002\000\004" +
    "\106\u018d\001\002\000\004\077\uff28\001\002\000\004\077" +
    "\uff26\001\002\000\014\003\u0192\023\024\024\034\025\035" +
    "\111\u0190\001\002\000\004\035\u0198\001\002\000\004\077" +
    "\u0197\001\002\000\010\003\uff4b\077\uff4b\111\uffd9\001\002" +
    "\000\004\111\u0194\001\002\000\004\035\u0195\001\002\000" +
    "\020\003\374\017\174\027\160\105\172\107\165\110\170" +
    "\111\166\001\002\000\006\003\uff4c\077\uff4c\001\002\000" +
    "\022\003\uff56\017\uff56\027\uff56\046\uff56\105\uff56\107\uff56" +
    "\110\uff56\111\uff56\001\002\000\014\027\160\105\172\107" +
    "\165\110\170\111\166\001\002\000\020\003\uff4d\026\177" +
    "\027\201\030\203\031\202\032\176\077\uff4d\001\002\000" +
    "\004\002\uffff\001\002\000\030\003\167\010\u019d\017\174" +
    "\020\120\021\152\022\157\027\160\105\172\107\165\110" +
    "\170\111\166\001\002\000\004\077\uff92\001\002\000\006" +
    "\003\u019e\105\243\001\002\000\062\003\ufef1\004\ufef1\010" +
    "\ufef1\020\ufef1\021\ufef1\022\ufef1\023\ufef1\024\ufef1\025\ufef1" +
    "\036\ufef1\051\ufef1\061\ufef1\064\ufef1\065\ufef1\066\ufef1\067" +
    "\ufef1\070\ufef1\071\ufef1\072\ufef1\073\ufef1\077\u01a3\104\ufef1" +
    "\106\ufffb\111\ufef1\001\002\000\004\106\u01a0\001\002\000" +
    "\006\003\u01a1\077\u01a2\001\002\000\056\003\ufeee\004\ufeee" +
    "\010\ufeee\020\ufeee\021\ufeee\022\ufeee\023\ufeee\024\ufeee\025" +
    "\ufeee\036\ufeee\051\ufeee\061\ufeee\064\ufeee\065\ufeee\066\ufeee" +
    "\067\ufeee\070\ufeee\071\ufeee\072\ufeee\073\ufeee\104\ufeee\111" +
    "\ufeee\001\002\000\056\003\ufef7\004\ufef7\010\ufef7\020\ufef7" +
    "\021\ufef7\022\ufef7\023\ufef7\024\ufef7\025\ufef7\036\ufef7\051" +
    "\ufef7\061\ufef7\064\ufef7\065\ufef7\066\ufef7\067\ufef7\070\ufef7" +
    "\071\ufef7\072\ufef7\073\ufef7\104\ufef7\111\ufef7\001\002\000" +
    "\056\003\ufef4\004\ufef4\010\ufef4\020\ufef4\021\ufef4\022\ufef4" +
    "\023\ufef4\024\ufef4\025\ufef4\036\ufef4\051\ufef4\061\ufef4\064" +
    "\ufef4\065\ufef4\066\ufef4\067\ufef4\070\ufef4\071\ufef4\072\ufef4" +
    "\073\ufef4\104\ufef4\111\ufef4\001\002\000\022\003\255\017" +
    "\261\027\160\046\257\105\u01a6\107\165\110\170\111\166" +
    "\001\002\000\004\106\u01aa\001\002\000\022\003\255\017" +
    "\261\027\160\046\257\105\172\107\165\110\170\111\166" +
    "\001\002\000\004\106\u01a8\001\002\000\004\103\u01a9\001" +
    "\002\000\050\003\uff83\004\uff83\010\uff83\020\uff83\021\uff83" +
    "\022\uff83\023\uff83\024\uff83\025\uff83\036\uff83\051\uff83\061" +
    "\uff83\064\uff83\070\uff83\071\uff83\072\uff83\073\uff83\104\uff83" +
    "\111\uff83\001\002\000\006\003\u01ab\103\u01ac\001\002\000" +
    "\004\103\u01ad\001\002\000\050\003\uff84\004\uff84\010\uff84" +
    "\020\uff84\021\uff84\022\uff84\023\uff84\024\uff84\025\uff84\036" +
    "\uff84\051\uff84\061\uff84\064\uff84\070\uff84\071\uff84\072\uff84" +
    "\073\uff84\104\uff84\111\uff84\001\002\000\050\003\uff82\004" +
    "\uff82\010\uff82\020\uff82\021\uff82\022\uff82\023\uff82\024\uff82" +
    "\025\uff82\036\uff82\051\uff82\061\uff82\064\uff82\070\uff82\071" +
    "\uff82\072\uff82\073\uff82\104\uff82\111\uff82\001\002\000\056" +
    "\003\ufefd\004\ufefd\010\ufefd\020\ufefd\021\ufefd\022\ufefd\023" +
    "\ufefd\024\ufefd\025\ufefd\036\ufefd\051\ufefd\061\ufefd\064\ufefd" +
    "\065\ufefd\066\ufefd\067\ufefd\070\ufefd\071\ufefd\072\ufefd\073" +
    "\ufefd\104\ufefd\111\ufefd\001\002\000\056\003\uff00\004\uff00" +
    "\010\uff00\020\uff00\021\uff00\022\uff00\023\uff00\024\uff00\025" +
    "\uff00\036\uff00\051\uff00\061\uff00\064\uff00\065\uff00\066\uff00" +
    "\067\uff00\070\uff00\071\uff00\072\uff00\073\uff00\104\uff00\111" +
    "\uff00\001\002\000\014\003\u0192\023\024\024\034\025\035" +
    "\111\u0190\001\002\000\006\003\u01b2\077\u01b3\001\002\000" +
    "\024\003\uff54\017\uff54\027\uff54\046\uff54\077\u01b4\105\uff54" +
    "\107\uff54\110\uff54\111\uff54\001\002\000\022\003\uff57\017" +
    "\uff57\027\uff57\046\uff57\105\uff57\107\uff57\110\uff57\111\uff57" +
    "\001\002\000\022\003\uff55\017\uff55\027\uff55\046\uff55\105" +
    "\uff55\107\uff55\110\uff55\111\uff55\001\002\000\056\003\ufeff" +
    "\004\ufeff\010\ufeff\020\ufeff\021\ufeff\022\ufeff\023\ufeff\024" +
    "\ufeff\025\ufeff\036\ufeff\051\ufeff\061\ufeff\064\ufeff\065\ufeff" +
    "\066\ufeff\067\ufeff\070\ufeff\071\ufeff\072\ufeff\073\ufeff\104" +
    "\ufeff\111\ufeff\001\002\000\004\111\u01b7\001\002\000\006" +
    "\003\242\105\243\001\002\000\016\027\160\105\172\106" +
    "\uff40\107\165\110\170\111\166\001\002\000\004\106\u01ba" +
    "\001\002\000\012\003\uff3b\076\uff3b\077\uff3b\106\uff3b\001" +
    "\002\000\004\104\u01bc\001\002\000\006\003\u01bd\071\u01be" +
    "\001\002\000\010\003\242\071\u01c5\105\243\001\002\000" +
    "\006\003\242\105\243\001\002\000\022\003\255\017\261" +
    "\027\160\046\257\105\172\107\165\110\170\111\166\001" +
    "\002\000\004\106\u01c1\001\002\000\006\003\u01c2\077\u01c3" +
    "\001\002\000\060\003\uff5a\004\uff5a\010\uff5a\020\uff5a\021" +
    "\uff5a\022\uff5a\023\uff5a\024\uff5a\025\uff5a\036\uff5a\051\uff5a" +
    "\061\uff5a\064\uff5a\065\uff5a\066\uff5a\067\uff5a\070\uff5a\071" +
    "\uff5a\072\uff5a\073\uff5a\077\u01c4\104\uff5a\111\uff5a\001\002" +
    "\000\056\003\uff5c\004\uff5c\010\uff5c\020\uff5c\021\uff5c\022" +
    "\uff5c\023\uff5c\024\uff5c\025\uff5c\036\uff5c\051\uff5c\061\uff5c" +
    "\064\uff5c\065\uff5c\066\uff5c\067\uff5c\070\uff5c\071\uff5c\072" +
    "\uff5c\073\uff5c\104\uff5c\111\uff5c\001\002\000\056\003\uff5b" +
    "\004\uff5b\010\uff5b\020\uff5b\021\uff5b\022\uff5b\023\uff5b\024" +
    "\uff5b\025\uff5b\036\uff5b\051\uff5b\061\uff5b\064\uff5b\065\uff5b" +
    "\066\uff5b\067\uff5b\070\uff5b\071\uff5b\072\uff5b\073\uff5b\104" +
    "\uff5b\111\uff5b\001\002\000\006\003\242\105\243\001\002" +
    "\000\022\003\255\017\261\027\160\046\257\105\172\107" +
    "\165\110\170\111\166\001\002\000\004\106\u01c8\001\002" +
    "\000\004\077\u01c9\001\002\000\056\003\uff58\004\uff58\010" +
    "\uff58\020\uff58\021\uff58\022\uff58\023\uff58\024\uff58\025\uff58" +
    "\036\uff58\051\uff58\061\uff58\064\uff58\065\uff58\066\uff58\067" +
    "\uff58\070\uff58\071\uff58\072\uff58\073\uff58\104\uff58\111\uff58" +
    "\001\002\000\022\003\255\017\261\027\160\046\257\105" +
    "\172\107\165\110\170\111\166\001\002\000\004\106\u01cc" +
    "\001\002\000\004\077\u01cd\001\002\000\056\003\uff59\004" +
    "\uff59\010\uff59\020\uff59\021\uff59\022\uff59\023\uff59\024\uff59" +
    "\025\uff59\036\uff59\051\uff59\061\uff59\064\uff59\065\uff59\066" +
    "\uff59\067\uff59\070\uff59\071\uff59\072\uff59\073\uff59\104\uff59" +
    "\111\uff59\001\002\000\006\066\u01dd\104\uff6c\001\002\000" +
    "\056\003\131\004\133\010\132\020\120\021\152\022\115" +
    "\023\024\024\034\025\035\036\114\051\113\061\125\064" +
    "\137\065\ufeec\066\ufeec\067\ufeec\070\122\071\146\072\154" +
    "\073\135\104\ufeec\111\127\001\002\000\010\065\u01d1\066" +
    "\uff6b\104\uff6b\001\002\000\020\003\u01d2\017\174\027\160" +
    "\105\172\107\165\110\170\111\166\001\002\000\022\003" +
    "\374\017\174\027\160\100\uffdf\105\172\107\165\110\170" +
    "\111\166\001\002\000\004\100\u01d4\001\002\000\056\003" +
    "\uff69\004\uff69\010\uff69\020\uff69\021\uff69\022\uff69\023\uff69" +
    "\024\uff69\025\uff69\036\uff69\051\uff69\061\uff69\064\uff69\065" +
    "\uff69\066\uff69\067\uff69\070\uff69\071\uff69\072\uff69\073\uff69" +
    "\104\uff69\111\uff69\001\002\000\004\100\u01d6\001\002\000" +
    "\056\003\uff68\004\uff68\010\uff68\020\uff68\021\uff68\022\uff68" +
    "\023\uff68\024\uff68\025\uff68\036\uff68\051\uff68\061\uff68\064" +
    "\uff68\065\uff68\066\uff68\067\uff68\070\uff68\071\uff68\072\uff68" +
    "\073\uff68\104\uff68\111\uff68\001\002\000\006\066\uff6a\104" +
    "\uff6a\001\002\000\012\065\uff65\066\uff65\067\u01d9\104\uff65" +
    "\001\002\000\006\003\u01da\077\u01db\001\002\000\004\077" +
    "\u01dc\001\002\000\010\065\uff67\066\uff67\104\uff67\001\002" +
    "\000\010\065\uff66\066\uff66\104\uff66\001\002\000\006\003" +
    "\u01e0\100\u01e1\001\002\000\004\104\u01df\001\002\000\056" +
    "\003\uff70\004\uff70\010\uff70\020\uff70\021\uff70\022\uff70\023" +
    "\uff70\024\uff70\025\uff70\036\uff70\051\uff70\061\uff70\064\uff70" +
    "\065\uff70\066\uff70\067\uff70\070\uff70\071\uff70\072\uff70\073" +
    "\uff70\104\uff70\111\uff70\001\002\000\052\003\131\004\133" +
    "\010\132\020\120\021\152\022\115\023\024\024\034\025" +
    "\035\036\114\051\113\061\125\064\137\067\ufeec\070\122" +
    "\071\146\072\154\073\135\100\u01e5\111\127\001\002\000" +
    "\050\003\131\004\133\010\132\020\120\021\152\022\115" +
    "\023\024\024\034\025\035\036\114\051\113\061\125\064" +
    "\137\067\ufeec\070\122\071\146\072\154\073\135\111\127" +
    "\001\002\000\004\067\u01e3\001\002\000\004\077\u01e4\001" +
    "\002\000\004\104\uff6f\001\002\000\050\003\131\004\133" +
    "\010\132\020\120\021\152\022\115\023\024\024\034\025" +
    "\035\036\114\051\113\061\125\064\137\067\ufeec\070\122" +
    "\071\146\072\154\073\135\111\127\001\002\000\004\067" +
    "\u01e7\001\002\000\004\077\u01e8\001\002\000\004\104\uff6d" +
    "\001\002\000\004\067\u01ea\001\002\000\004\077\u01eb\001" +
    "\002\000\004\104\uff6e\001\002\000\004\111\u01ed\001\002" +
    "\000\010\003\u01f0\075\222\111\u01ee\001\002\000\012\003" +
    "\uff34\076\uff34\077\uff34\105\u01fb\001\002\000\006\003\uff39" +
    "\077\uff39\001\002\000\012\003\uff2e\076\uff2e\077\uff2e\111" +
    "\u01f6\001\002\000\010\003\uff38\076\u01f2\077\uff38\001\002" +
    "\000\006\003\u01f0\111\u01ee\001\002\000\006\003\uff37\077" +
    "\uff37\001\002\000\010\003\uff36\076\u01f2\077\uff36\001\002" +
    "\000\006\003\uff35\077\uff35\001\002\000\012\003\uff31\076" +
    "\uff31\077\uff31\105\u01f7\001\002\000\016\027\160\105\172" +
    "\106\u01f9\107\165\110\170\111\166\001\002\000\004\106" +
    "\u01fa\001\002\000\010\003\uff30\076\uff30\077\uff30\001\002" +
    "\000\010\003\uff2f\076\uff2f\077\uff2f\001\002\000\016\027" +
    "\160\105\172\106\u01fc\107\165\110\170\111\166\001\002" +
    "\000\010\003\uff33\076\uff33\077\uff33\001\002\000\004\106" +
    "\u01fe\001\002\000\010\003\uff32\076\uff32\077\uff32\001\002" +
    "\000\006\077\u0208\106\u0207\001\002\000\006\003\u0201\106" +
    "\u0202\001\002\000\004\077\u0206\001\002\000\006\003\u0203" +
    "\077\u0204\001\002\000\060\003\uff05\004\uff05\010\uff05\020" +
    "\uff05\021\uff05\022\uff05\023\uff05\024\uff05\025\uff05\036\uff05" +
    "\051\uff05\061\uff05\064\uff05\065\uff05\066\uff05\067\uff05\070" +
    "\uff05\071\uff05\072\uff05\073\uff05\077\u0205\104\uff05\111\uff05" +
    "\001\002\000\056\003\uff07\004\uff07\010\uff07\020\uff07\021" +
    "\uff07\022\uff07\023\uff07\024\uff07\025\uff07\036\uff07\051\uff07" +
    "\061\uff07\064\uff07\065\uff07\066\uff07\067\uff07\070\uff07\071" +
    "\uff07\072\uff07\073\uff07\104\uff07\111\uff07\001\002\000\056" +
    "\003\uff06\004\uff06\010\uff06\020\uff06\021\uff06\022\uff06\023" +
    "\uff06\024\uff06\025\uff06\036\uff06\051\uff06\061\uff06\064\uff06" +
    "\065\uff06\066\uff06\067\uff06\070\uff06\071\uff06\072\uff06\073" +
    "\uff06\104\uff06\111\uff06\001\002\000\056\003\uff03\004\uff03" +
    "\010\uff03\020\uff03\021\uff03\022\uff03\023\uff03\024\uff03\025" +
    "\uff03\036\uff03\051\uff03\061\uff03\064\uff03\065\uff03\066\uff03" +
    "\067\uff03\070\uff03\071\uff03\072\uff03\073\uff03\104\uff03\111" +
    "\uff03\001\002\000\004\077\u0209\001\002\000\056\003\uff02" +
    "\004\uff02\010\uff02\020\uff02\021\uff02\022\uff02\023\uff02\024" +
    "\uff02\025\uff02\036\uff02\051\uff02\061\uff02\064\uff02\065\uff02" +
    "\066\uff02\067\uff02\070\uff02\071\uff02\072\uff02\073\uff02\104" +
    "\uff02\111\uff02\001\002\000\056\003\uff04\004\uff04\010\uff04" +
    "\020\uff04\021\uff04\022\uff04\023\uff04\024\uff04\025\uff04\036" +
    "\uff04\051\uff04\061\uff04\064\uff04\065\uff04\066\uff04\067\uff04" +
    "\070\uff04\071\uff04\072\uff04\073\uff04\104\uff04\111\uff04\001" +
    "\002\000\004\074\u020b\001\002\000\156\010\u0129\020\u0117" +
    "\021\u013f\022\u010c\023\u0114\024\u013b\025\u0109\026\u0141\027" +
    "\u012a\030\u010b\031\u011f\035\u011c\036\u0108\040\u0123\041\u010e" +
    "\042\u012b\043\u0133\044\u013e\045\u013a\046\u011a\047\u011b\050" +
    "\u011e\051\u0107\052\u0126\053\u011d\054\u012d\055\u010d\056\u012e" +
    "\057\u0121\060\u010a\061\u0120\062\u0122\063\u0134\064\u0131\065" +
    "\u010f\066\u0139\067\u012c\070\u0119\071\u0137\072\u0140\073\u0130" +
    "\075\u0135\077\u0125\100\u0112\101\u0118\102\u0116\103\u0115\104" +
    "\u0113\105\u0138\106\u0136\107\u0106\110\u0132\111\u0124\112\u012f" +
    "\001\002\000\004\074\u0216\001\002\000\156\010\u0129\020" +
    "\u0117\021\u013f\022\u010c\023\u0114\024\u013b\025\u0109\026\u0141" +
    "\027\u012a\030\u010b\031\u011f\035\u011c\036\u0108\040\u0123\041" +
    "\u010e\042\u012b\043\u0133\044\u013e\045\u013a\046\u011a\047\u011b" +
    "\050\u011e\051\u0107\052\u0126\053\u011d\054\u012d\055\u010d\056" +
    "\u012e\057\u0121\060\u010a\061\u0120\062\u0122\063\u0134\064\u0131" +
    "\065\u010f\066\u0139\067\u012c\070\u0119\071\u0137\072\u0140\073" +
    "\u0130\075\u0135\077\u0125\100\u0112\101\u0118\102\u0116\103\u0115" +
    "\104\u0113\105\u0138\106\u0136\107\u0106\110\u0132\111\u0124\112" +
    "\u012f\001\002\000\004\074\u020f\001\002\000\004\076\u0210" +
    "\001\002\000\006\037\u0212\111\u0211\001\002\000\004\106" +
    "\u0215\001\002\000\004\111\u0213\001\002\000\004\106\u0214" +
    "\001\002\000\004\077\uff2d\001\002\000\004\077\uff2b\001" +
    "\002\000\004\076\u0217\001\002\000\006\037\u0218\111\u0219" +
    "\001\002\000\004\111\u021b\001\002\000\004\106\u021a\001" +
    "\002\000\004\077\uff2a\001\002\000\004\106\u021c\001\002" +
    "\000\004\077\uff2c\001\002\000\012\003\u022d\033\u0230\034" +
    "\u022e\035\u022f\001\002\000\010\003\uff43\106\uff43\111\u0228" +
    "\001\002\000\006\003\u0220\106\u0221\001\002\000\006\103" +
    "\u0226\106\u0225\001\002\000\006\003\u0222\103\u0223\001\002" +
    "\000\004\103\u0224\001\002\000\050\003\uff52\004\uff52\010" +
    "\uff52\020\uff52\021\uff52\022\uff52\023\uff52\024\uff52\025\uff52" +
    "\036\uff52\051\uff52\061\uff52\064\uff52\070\uff52\071\uff52\072" +
    "\uff52\073\uff52\104\uff52\111\uff52\001\002\000\050\003\uff50" +
    "\004\uff50\010\uff50\020\uff50\021\uff50\022\uff50\023\uff50\024" +
    "\uff50\025\uff50\036\uff50\051\uff50\061\uff50\064\uff50\070\uff50" +
    "\071\uff50\072\uff50\073\uff50\104\uff50\111\uff50\001\002\000" +
    "\004\103\u0227\001\002\000\050\003\uff4f\004\uff4f\010\uff4f" +
    "\020\uff4f\021\uff4f\022\uff4f\023\uff4f\024\uff4f\025\uff4f\036" +
    "\uff4f\051\uff4f\061\uff4f\064\uff4f\070\uff4f\071\uff4f\072\uff4f" +
    "\073\uff4f\104\uff4f\111\uff4f\001\002\000\050\003\uff51\004" +
    "\uff51\010\uff51\020\uff51\021\uff51\022\uff51\023\uff51\024\uff51" +
    "\025\uff51\036\uff51\051\uff51\061\uff51\064\uff51\070\uff51\071" +
    "\uff51\072\uff51\073\uff51\104\uff51\111\uff51\001\002\000\010" +
    "\033\u022b\034\u0229\035\u022a\001\002\000\006\003\uff44\106" +
    "\uff44\001\002\000\014\027\160\105\172\107\165\110\170" +
    "\111\166\001\002\000\006\003\uff45\106\uff45\001\002\000" +
    "\020\003\uff47\026\177\027\201\030\203\031\202\032\176" +
    "\106\uff47\001\002\000\014\027\160\105\172\107\165\110" +
    "\170\111\166\001\002\000\006\003\uff48\106\uff48\001\002" +
    "\000\014\027\160\105\172\107\165\110\170\111\166\001" +
    "\002\000\006\003\uff49\106\uff49\001\002\000\020\003\uff4a" +
    "\026\177\027\201\030\203\031\202\032\176\106\uff4a\001" +
    "\002\000\020\003\uff46\026\177\027\201\030\203\031\202" +
    "\032\176\106\uff46\001\002\000\004\104\u0234\001\002\000" +
    "\056\003\uff4e\004\uff4e\010\uff4e\020\uff4e\021\uff4e\022\uff4e" +
    "\023\uff4e\024\uff4e\025\uff4e\036\uff4e\051\uff4e\061\uff4e\064" +
    "\uff4e\065\uff4e\066\uff4e\067\uff4e\070\uff4e\071\uff4e\072\uff4e" +
    "\073\uff4e\104\uff4e\111\uff4e\001\002\000\056\003\ufefe\004" +
    "\ufefe\010\ufefe\020\ufefe\021\ufefe\022\ufefe\023\ufefe\024\ufefe" +
    "\025\ufefe\036\ufefe\051\ufefe\061\ufefe\064\ufefe\065\ufefe\066" +
    "\ufefe\067\ufefe\070\ufefe\071\ufefe\072\ufefe\073\ufefe\104\ufefe" +
    "\111\ufefe\001\002\000\014\003\u0255\035\u0256\076\uff9b\077" +
    "\uff9b\101\u0241\001\002\000\004\077\uff9d\001\002\000\006" +
    "\076\u0248\077\uff95\001\002\000\012\003\u023d\076\uff97\077" +
    "\uff97\111\u023b\001\002\000\004\077\uff9e\001\002\000\014" +
    "\003\u023f\035\u0246\076\uff98\077\uff98\101\u0241\001\002\000" +
    "\004\077\uff8c\001\002\000\006\003\u023d\111\u023e\001\002" +
    "\000\006\003\u023f\101\u0241\001\002\000\010\003\u023f\077" +
    "\uff88\101\u0241\001\002\000\004\077\uff8d\001\002\000\016" +
    "\003\060\027\043\105\052\107\046\110\050\111\047\001" +
    "\002\000\016\026\063\027\065\030\067\031\066\032\062" +
    "\102\u0243\001\002\000\010\003\u023f\077\uff8b\101\u0241\001" +
    "\002\000\004\077\uff8a\001\002\000\004\077\uff89\001\002" +
    "\000\026\003\167\017\174\020\120\021\152\022\157\027" +
    "\160\105\172\107\165\110\170\111\166\001\002\000\006" +
    "\076\uff9a\077\uff9a\001\002\000\006\003\u024d\111\u024b\001" +
    "\002\000\006\076\u024a\077\uff96\001\002\000\006\003\u024d" +
    "\111\u024b\001\002\000\012\003\u024f\035\u0250\076\uff9b\077" +
    "\uff9b\001\002\000\006\076\uff93\077\uff93\001\002\000\010" +
    "\076\uff97\077\uff97\111\u024e\001\002\000\010\035\u0246\076" +
    "\uff98\077\uff98\001\002\000\004\035\u0252\001\002\000\026" +
    "\003\167\017\174\020\120\021\152\022\157\027\160\105" +
    "\172\107\165\110\170\111\166\001\002\000\006\076\uff9c" +
    "\077\uff9c\001\002\000\026\003\167\017\174\020\120\021" +
    "\152\022\157\027\160\105\172\107\165\110\170\111\166" +
    "\001\002\000\006\076\uff99\077\uff99\001\002\000\006\076" +
    "\uff94\077\uff94\001\002\000\012\003\u023f\035\u0252\077\uff88" +
    "\101\u0241\001\002\000\030\003\167\010\u0257\017\174\020" +
    "\120\021\152\022\157\027\160\105\172\107\165\110\170" +
    "\111\166\001\002\000\006\003\u0258\105\243\001\002\000" +
    "\062\003\ufef2\004\ufef2\010\ufef2\020\ufef2\021\ufef2\022\ufef2" +
    "\023\ufef2\024\ufef2\025\ufef2\036\ufef2\051\ufef2\061\ufef2\064" +
    "\ufef2\065\ufef2\066\ufef2\067\ufef2\070\ufef2\071\ufef2\072\ufef2" +
    "\073\ufef2\077\u025d\104\ufef2\106\ufffb\111\ufef2\001\002\000" +
    "\004\106\u025a\001\002\000\006\003\u025b\077\u025c\001\002" +
    "\000\056\003\ufeef\004\ufeef\010\ufeef\020\ufeef\021\ufeef\022" +
    "\ufeef\023\ufeef\024\ufeef\025\ufeef\036\ufeef\051\ufeef\061\ufeef" +
    "\064\ufeef\065\ufeef\066\ufeef\067\ufeef\070\ufeef\071\ufeef\072" +
    "\ufeef\073\ufeef\104\ufeef\111\ufeef\001\002\000\056\003\ufef8" +
    "\004\ufef8\010\ufef8\020\ufef8\021\ufef8\022\ufef8\023\ufef8\024" +
    "\ufef8\025\ufef8\036\ufef8\051\ufef8\061\ufef8\064\ufef8\065\ufef8" +
    "\066\ufef8\067\ufef8\070\ufef8\071\ufef8\072\ufef8\073\ufef8\104" +
    "\ufef8\111\ufef8\001\002\000\056\003\ufef5\004\ufef5\010\ufef5" +
    "\020\ufef5\021\ufef5\022\ufef5\023\ufef5\024\ufef5\025\ufef5\036" +
    "\ufef5\051\ufef5\061\ufef5\064\ufef5\065\ufef5\066\ufef5\067\ufef5" +
    "\070\ufef5\071\ufef5\072\ufef5\073\ufef5\104\ufef5\111\ufef5\001" +
    "\002\000\004\077\u0261\001\002\000\014\003\u0255\035\u0250" +
    "\076\uff9b\077\uff9b\101\u0241\001\002\000\004\077\uff9f\001" +
    "\002\000\020\003\uffe9\022\uffe9\023\uffe9\024\uffe9\025\uffe9" +
    "\056\uffe9\060\uffe9\001\002\000\012\003\037\023\024\024" +
    "\034\025\035\001\002\000\020\003\uffe4\022\uffe4\023\uffe4" +
    "\024\uffe4\025\uffe4\056\uffe4\060\uffe4\001\002\000\020\003" +
    "\uffea\022\uffea\023\uffea\024\uffea\025\uffea\056\uffea\060\uffea" +
    "\001\002\000\004\077\u0266\001\002\000\020\003\uffe8\022" +
    "\uffe8\023\uffe8\024\uffe8\025\uffe8\056\uffe8\060\uffe8\001\002" +
    "\000\004\111\u0268\001\002\000\004\035\u0269\001\002\000" +
    "\020\003\060\017\054\027\043\105\052\107\046\110\050" +
    "\111\047\001\002\000\004\077\u026b\001\002\000\020\003" +
    "\uffec\022\uffec\023\uffec\024\uffec\025\uffec\056\uffec\060\uffec" +
    "\001\002\000\004\056\uffe3\001\002\000\022\003\uffe7\022" +
    "\uffe7\023\uffe7\024\uffe7\025\uffe7\056\uffe7\060\uffe7\077\u026f" +
    "\001\002\000\020\003\uffe5\022\uffe5\023\uffe5\024\uffe5\025" +
    "\uffe5\056\uffe5\060\uffe5\001\002\000\020\003\uffe6\022\uffe6" +
    "\023\uffe6\024\uffe6\025\uffe6\056\uffe6\060\uffe6\001\002\000" +
    "\020\003\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb\056\uffeb" +
    "\060\uffeb\001\002\000\004\111\u0272\001\002\000\006\003" +
    "\u01f0\111\u01ee\001\002\000\010\003\ufff1\006\ufff1\007\u027b" +
    "\001\002\000\006\003\u0278\006\u0277\001\002\000\006\003" +
    "\ufff3\006\ufff3\001\002\000\004\055\u027a\001\002\000\004" +
    "\055\ufff6\001\002\000\006\006\u0279\055\ufff4\001\002\000" +
    "\004\055\ufff5\001\002\000\022\003\ufffa\011\ufffa\022\ufffa" +
    "\023\ufffa\024\ufffa\025\ufffa\056\ufffa\060\ufffa\001\002\000" +
    "\006\003\ufff2\006\ufff2\001\002\000\006\003\ufff8\007\ufff8" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u027a\000\010\002\007\004\006\007\004\001\001\000" +
    "\002\001\001\000\004\011\u0273\001\001\000\002\001\001" +
    "\000\006\022\012\023\011\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\123\022\001\001\000\006\022\012" +
    "\023\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\013\027\014\032\017" +
    "\031\040\025\075\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\013" +
    "\027\014\u026b\017\031\040\025\075\026\001\001\000\004" +
    "\075\u0264\001\001\000\010\041\u0237\043\u025f\070\u025d\001" +
    "\001\000\004\003\077\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\037\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\006\052\113\043" +
    "\117\044\001\001\000\004\113\076\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\113\074\001\001\000\006\113" +
    "\043\117\060\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\113\074\001\001\000\002\001\001\000\006\113\043" +
    "\117\073\001\001\000\006\113\043\117\072\001\001\000" +
    "\002\001\001\000\006\113\043\117\071\001\001\000\006" +
    "\113\043\117\070\001\001\000\006\113\043\117\067\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\064\017\105\020\115" +
    "\021\116\024\125\037\122\044\144\046\154\050\142\051" +
    "\141\052\140\056\135\057\110\063\137\064\146\065\143" +
    "\074\123\075\120\076\147\077\111\100\107\101\152\105" +
    "\106\107\133\120\150\121\127\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\041\u0237\043\u0239\070\u0236\001\001" +
    "\000\002\001\001\000\064\017\105\020\115\021\116\024" +
    "\125\037\122\044\144\046\154\050\142\051\141\052\140" +
    "\056\135\057\110\063\137\064\146\065\143\074\123\075" +
    "\120\076\147\077\111\100\107\101\152\105\106\107\133" +
    "\120\150\121\u0232\001\001\000\002\001\001\000\004\122" +
    "\u021e\001\001\000\004\012\u0209\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\061\u01cd\062\u01cf\112\u01ce\001" +
    "\001\000\064\017\105\020\115\021\116\024\125\037\122" +
    "\044\144\046\154\050\142\051\141\052\140\056\135\057" +
    "\110\063\137\064\146\065\143\074\123\075\120\076\147" +
    "\077\111\100\107\101\152\105\106\107\133\120\150\121" +
    "\u01ba\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\u01af\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\u01a3\001\001\000\002\001\001\000\004\047\211" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\u0161\001\001\000\002\001\001\000\064\017\105\020\115" +
    "\021\116\024\125\037\122\044\144\046\154\050\142\051" +
    "\141\052\140\056\135\057\110\063\137\064\146\065\143" +
    "\074\123\075\120\076\147\077\111\100\107\101\152\105" +
    "\106\107\133\120\150\121\u015e\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\372\001\001\000\002\001" +
    "\001\000\010\054\343\055\341\110\344\001\001\000\064" +
    "\017\105\020\115\021\116\024\125\037\122\044\144\046" +
    "\154\050\142\051\141\052\140\056\135\057\110\063\137" +
    "\064\146\065\143\074\123\075\120\076\147\077\111\100" +
    "\107\101\152\105\106\107\133\120\150\121\337\001\001" +
    "\000\004\012\325\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\025\251" +
    "\026\161\027\252\030\255\031\247\034\250\035\257\036" +
    "\253\046\160\001\001\000\064\017\105\020\115\021\116" +
    "\024\125\037\122\044\144\046\154\050\142\051\141\052" +
    "\140\056\135\057\110\063\137\064\146\065\143\074\123" +
    "\075\120\076\147\077\111\100\107\101\152\105\106\107" +
    "\133\120\150\121\246\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\015" +
    "\170\025\162\026\161\045\163\046\160\074\172\001\001" +
    "\000\002\001\001\000\006\026\216\046\160\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\047\211\001\001\000" +
    "\004\074\210\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\025\174\026\161\046\160\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\025\207" +
    "\026\161\046\160\001\001\000\010\025\206\026\161\046" +
    "\160\001\001\000\002\001\001\000\010\025\205\026\161" +
    "\046\160\001\001\000\010\025\204\026\161\046\160\001" +
    "\001\000\010\025\203\026\161\046\160\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\025\213\026\161\046\160\001\001\000\002\001" +
    "\001\000\004\047\215\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\025\224\026\161\046\160" +
    "\072\225\001\001\000\004\073\231\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\025\234\026\161\046\160" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\025" +
    "\233\026\161\046\160\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\243\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\025\224\026\161\046\160\072\244\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\033\317\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\025\265" +
    "\026\161\046\160\001\001\000\002\001\001\000\004\012" +
    "\267\001\001\000\004\032\262\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\025\251\026\161\027\252\030" +
    "\255\035\264\036\253\046\160\001\001\000\010\025\265" +
    "\026\161\046\160\001\001\000\004\032\262\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\025\251\026\161" +
    "\027\270\030\255\046\160\001\001\000\002\001\001\000" +
    "\014\025\272\026\161\027\273\030\255\046\160\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\025\251\026\161\030\315\046\160\001\001\000\012\025" +
    "\251\026\161\030\314\046\160\001\001\000\012\025\251" +
    "\026\161\030\313\046\160\001\001\000\012\025\251\026" +
    "\161\030\312\046\160\001\001\000\012\025\251\026\161" +
    "\030\311\046\160\001\001\000\012\025\251\026\161\030" +
    "\310\046\160\001\001\000\012\025\251\026\161\030\307" +
    "\046\160\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\025" +
    "\251\026\161\027\252\030\255\034\321\035\257\036\253" +
    "\046\160\001\001\000\002\001\001\000\004\033\317\001" +
    "\001\000\010\025\265\026\161\046\160\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\025\251\026\161\027" +
    "\252\030\255\031\326\034\250\035\257\036\253\046\160" +
    "\001\001\000\002\001\001\000\024\025\272\026\161\027" +
    "\252\030\255\031\330\034\250\035\257\036\253\046\160" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\053\364\111\362\001\001\000\004\012\350\001\001" +
    "\000\010\054\343\055\347\110\344\001\001\000\064\017" +
    "\105\020\115\021\116\024\125\037\122\044\144\046\154" +
    "\050\142\051\141\052\140\056\135\057\110\063\137\064" +
    "\146\065\143\074\123\075\120\076\147\077\111\100\107" +
    "\101\152\105\106\107\133\120\150\121\345\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\025\251\026\161\027\252\030\255\031\351\034\250\035" +
    "\257\036\253\046\160\001\001\000\002\001\001\000\024" +
    "\025\272\026\161\027\252\030\255\031\353\034\250\035" +
    "\257\036\253\046\160\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\064\017\105" +
    "\020\115\021\116\024\125\037\122\044\144\046\154\050" +
    "\142\051\141\052\140\056\135\057\110\063\137\064\146" +
    "\065\143\074\123\075\120\076\147\077\111\100\107\101" +
    "\152\105\106\107\133\120\150\121\370\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\015\374\025\162\026\161\046\160\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\005\u0110" +
    "\016\u013c\102\u013b\103\u010f\104\u0126\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\005\u0146\016\u0148\102\u013b\104\u0126\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\102\u0143\104\u0141\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\102\u0143\104\u0141\001\001\000" +
    "\020\015\170\025\162\026\161\045\u014a\046\160\074\172" +
    "\106\u014c\001\001\000\004\067\u015d\001\001\000\016\015" +
    "\170\025\162\026\161\045\u014e\046\160\074\172\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\067\u0150\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\u018e\001\001\000" +
    "\004\012\u017b\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\u0177\001\001\000\002\001\001\000\004\012" +
    "\u0170\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\015\u0171\025\162\026\161\046\160\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\025\251\026" +
    "\161\027\252\030\255\031\u0178\034\250\035\257\036\253" +
    "\046\160\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\016\u017e\102\u013b" +
    "\104\u017d\001\001\000\002\001\001\000\006\102\u0143\104" +
    "\u017f\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\017\u0192\066\u0190\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\015\u0195\025\162\026\161\046\160\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\025\u0198\026\161" +
    "\046\160\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\015\170\025\162\026\161\045\u019b\046\160\074\172" +
    "\001\001\000\002\001\001\000\004\012\u019e\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\025" +
    "\251\026\161\027\252\030\255\031\u01a4\034\250\035\257" +
    "\036\253\046\160\001\001\000\002\001\001\000\024\025" +
    "\272\026\161\027\252\030\255\031\u01a6\034\250\035\257" +
    "\036\253\046\160\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\017\u0192\066\u01b0\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\u01b7" +
    "\001\001\000\012\025\224\026\161\046\160\072\u01b8\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\u01c5\001\001\000\004\012" +
    "\u01be\001\001\000\024\025\251\026\161\027\252\030\255" +
    "\031\u01bf\034\250\035\257\036\253\046\160\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\u01c9\001\001\000" +
    "\024\025\251\026\161\027\252\030\255\031\u01c6\034\250" +
    "\035\257\036\253\046\160\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\025\251\026\161" +
    "\027\252\030\255\031\u01ca\034\250\035\257\036\253\046" +
    "\160\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\060\u01dd\001\001\000\064\017\105\020" +
    "\115\021\116\024\125\037\122\044\144\046\154\050\142" +
    "\051\141\052\140\056\135\057\110\063\137\064\146\065" +
    "\143\074\123\075\120\076\147\077\111\100\107\101\152" +
    "\105\106\107\133\120\150\121\u01d7\001\001\000\010\061" +
    "\u01d6\062\u01cf\112\u01ce\001\001\000\012\015\u01d2\025\162" +
    "\026\161\046\160\001\001\000\012\015\u01d4\025\162\026" +
    "\161\046\160\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\064\017\105\020\115\021\116" +
    "\024\125\037\122\044\144\046\154\050\142\051\141\052" +
    "\140\056\135\057\110\063\137\064\146\065\143\074\123" +
    "\075\120\076\147\077\111\100\107\101\152\105\106\107" +
    "\133\120\150\121\u01e5\001\001\000\064\017\105\020\115" +
    "\021\116\024\125\037\122\044\144\046\154\050\142\051" +
    "\141\052\140\056\135\057\110\063\137\064\146\065\143" +
    "\074\123\075\120\076\147\077\111\100\107\101\152\105" +
    "\106\107\133\120\150\121\u01e1\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\064\017\105\020" +
    "\115\021\116\024\125\037\122\044\144\046\154\050\142" +
    "\051\141\052\140\056\135\057\110\063\137\064\146\065" +
    "\143\074\123\075\120\076\147\077\111\100\107\101\152" +
    "\105\106\107\133\120\150\121\u01e8\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\114\u01f0\115\u01ee\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\116\u01f2\001\001\000" +
    "\004\114\u01f3\001\001\000\002\001\001\000\004\116\u01f4" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\025" +
    "\224\026\161\046\160\072\u01f7\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\025\224\026" +
    "\161\046\160\072\u01fc\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\016\u020c\102\u013b\104\u020b\001\001\000" +
    "\002\001\001\000\006\102\u0143\104\u020d\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\025\u022b\026\161\046" +
    "\160\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\025\u0231\026\161\046\160\001\001\000\002\001\001\000" +
    "\010\025\u0230\026\161\046\160\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\071\u023f\001\001" +
    "\000\002\001\001\000\004\042\u0248\001\001\000\004\070" +
    "\u023b\001\001\000\002\001\001\000\004\071\u023f\001\001" +
    "\000\002\001\001\000\004\070\u023b\001\001\000\004\071" +
    "\u023f\001\001\000\004\071\u0244\001\001\000\002\001\001" +
    "\000\006\113\043\117\u0241\001\001\000\002\001\001\000" +
    "\004\071\u0243\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\015\170\025\162\026\161\045\u0246\046\160\074" +
    "\172\001\001\000\002\001\001\000\004\041\u0253\001\001" +
    "\000\002\001\001\000\004\041\u024b\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\015\170\025\162\026\161\045" +
    "\u0250\046\160\074\172\001\001\000\002\001\001\000\016" +
    "\015\170\025\162\026\161\045\u0252\046\160\074\172\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\071\u0244" +
    "\001\001\000\016\015\170\025\162\026\161\045\u0250\046" +
    "\160\074\172\001\001\000\004\012\u0258\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\071\u023f\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\017\u0266\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\006\u0269\113\043\117\044" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\114\u01f0\115" +
    "\u01ee\001\001\000\002\001\001\000\004\010\u0275\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoC$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoC$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoC$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public ManejadorSintacticoJP msJP = ManejadorSintacticoJP.getInstacia();
    public ManejadorArreglos ma = ManejadorArreglos.getInstancia();
    public ManejadorInstancias mi = ManejadorInstancias.getInstance();
    public ManejadorCuartetos mc = ManejadorCuartetos.getInstancia();
    public ManejadorConstantes manejadorConstantes = ManejadorConstantes.getInstancia();
    public ManejadorTablaPila mtp = ManejadorTablaPila.getInstancia();
    public FrameCTDOA frameCTDOA;

    public SintacticoC(LexicoC lexer) { 
        super(lexer);   
        msJP.nuevoAnalisis();
    }

    public void setFrameCTDOA(FrameCTDOA frameCTDOA) {
        this.frameCTDOA = frameCTDOA;
        this.msJP.setFrameCTDOA(frameCTDOA);
    }

    public void setAccion(String tipo, String mensaje, String accion){
        frameCTDOA.addErrores("ERROR Lexico Tipo: " + tipo + "\t Mensaje: " + mensaje + "\tAcción: ERROR\n");
    }

    @Override
    public void syntax_error(Symbol s){
        try {
            msJP.errorSintax(s.left, s.right, s.value, 
                "Uf, error sintactico cerca de la linea y columna indicada porfavor revisa que el token\n "
                        + "\t\tidicado corresponda a la declaracion de instruccion correspondiente. Vuelve a intentarlo."
            );
        } catch (Exception e) {
            System.out.println("Error " + e.toString());
        }
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SintacticoC$actions {
  private final SintacticoC parser;

  /** Constructor */
  CUP$SintacticoC$actions(SintacticoC parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SintacticoC$do_action(
    int                        CUP$SintacticoC$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoC$parser,
    java.util.Stack            CUP$SintacticoC$stack,
    int                        CUP$SintacticoC$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoC$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoC$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // texto ::= ERROR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",64, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // texto ::= ID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",64, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // texto ::= REAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		float e = (float)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",64, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // texto ::= NUMERO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",64, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // texto ::= PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",64, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // texto ::= PARENTESIS_A 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",64, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // texto ::= CORCHETE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",64, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // texto ::= CORCHETE_A 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",64, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // texto ::= LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",64, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // texto ::= LLAVE_A 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",64, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // texto ::= DOS_PUNTOS 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",64, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // texto ::= PUNTO_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",64, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // texto ::= PUNTO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",64, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // texto ::= PRINTF 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",64, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // texto ::= DO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",64, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // texto ::= WHILE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",64, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // texto ::= FOR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",64, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // texto ::= BREAK 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",64, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // texto ::= DEFAULT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",64, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // texto ::= CASE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",64, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // texto ::= SWITCH 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",64, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // texto ::= ELSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",64, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // texto ::= ELSE_IF 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",64, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // texto ::= IF 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",64, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // texto ::= CONST 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",64, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // texto ::= MAIN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",64, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // texto ::= VOID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",64, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // texto ::= PROGRAMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",64, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // texto ::= SCANF 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",64, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // texto ::= OR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",64, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // texto ::= AND 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",64, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // texto ::= NOT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",64, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // texto ::= MAYOR_IGUAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",64, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // texto ::= MENOR_IGUAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",64, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // texto ::= MAYOR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",64, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // texto ::= MENOR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",64, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // texto ::= DIFERENTE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",64, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // texto ::= IGUAL_IGUAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",64, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // texto ::= IGUAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",64, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // texto ::= DIV 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",64, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // texto ::= POR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",64, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // texto ::= MENOS 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",64, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // texto ::= MAS 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",64, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // texto ::= CLRSCR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",64, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // texto ::= GETCH 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",64, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // texto ::= CHAR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",64, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // texto ::= FLOAT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",64, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // texto ::= INT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",64, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // texto ::= JAVA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",64, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // texto ::= PY 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",64, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // texto ::= VB 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",64, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // texto_cadena ::= texto 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto_cadena",12, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // texto_cadena ::= texto_cadena texto 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		
        if(a.toString() == "") {
            RESULT = new String(e.toString()); 
        } else {
            RESULT = new String(a.toString()  + " " + e.toString());
        }
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto_cadena",12, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // estructuras_p ::= 
            {
              Object RESULT =null;

              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("estructuras_p",79, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // estructuras_p ::= estructuras estructuras_p 
            {
              Object RESULT =null;

              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("estructuras_p",79, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // getch ::= ID IGUAL GETCH ppa PARENTESIS_C error 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		
        parser.msJP.errorSintax(xleft, xright, x, "Error en el bloque de instrucciones de la estructura getch, por favor revisa la entrada en la linea y columna indicada. Se esperaba el token: << ; >>");
        Simbolo s = parser.msJP.metodoBuscarID((String) a, aleft, aright);
        if (s != null) {
            parser.mc.addGetch(s);
        }
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("getch",18, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // getch ::= tipo_dato ID IGUAL GETCH ppa PARENTESIS_C error 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-6)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		
        parser.msJP.errorSintax(xleft, xright, x, "Error en el bloque de instrucciones de la estructura getch, por favor revisa la entrada en la linea y columna indicada. Se esperaba el token: << ; >>");
        if (!(((Tipo) t).equals(Constantes.FLOAT_VAR_PJ))) {
            Object resultado = parser.msJP.declararVariables(new Simbolo((Tipo) t, new Simbolo(null, null, (String) a)), aleft, aright);
            if (resultado != null) {
                if (resultado instanceof Simbolo) {
                    parser.mc.addGetch((Simbolo) resultado);
                }  
            } 
        }
    
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("getch",18, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // getch ::= GETCH ppa PARENTESIS_C error 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		
        parser.msJP.errorSintax(xleft, xright, x, "Error en el bloque de instrucciones de la estructura getch, por favor revisa la entrada en la linea y columna indicada. Se esperaba el token: << ; >>");
        parser.mc.addGetch(null);
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("getch",18, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // getch ::= ID IGUAL GETCH error 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		
        parser.msJP.errorSintax(xleft, xright, x, "Error en el bloque de instrucciones de la estructura getch, por favor revisa la entrada en la linea y columna indicada. Se esperaba el token: << ( >>");
        Simbolo s = parser.msJP.metodoBuscarID((String) a, aleft, aright);
        if (s != null) {
            parser.mc.addGetch(s);
        }
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("getch",18, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // getch ::= tipo_dato ID IGUAL GETCH error 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		
        parser.msJP.errorSintax(xleft, xright, x, "Error en el bloque de instrucciones de la estructura getch, por favor revisa la entrada en la linea y columna indicada. Se esperaba el token: << ( >>");
        if (!(((Tipo) t).equals(Constantes.FLOAT_VAR_PJ))) {
            Object resultado = parser.msJP.declararVariables(new Simbolo((Tipo) t, new Simbolo(null, null, (String) a)), aleft, aright);
            if (resultado != null) {
                if (resultado instanceof Simbolo) {
                    parser.mc.addGetch((Simbolo) resultado);
                }  
            } 
        }
    
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("getch",18, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // getch ::= GETCH error 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		
        parser.msJP.errorSintax(xleft, xright, x, "Error en el bloque de instrucciones de la estructura getch, por favor revisa la entrada en la linea y columna indicada. Se esperaba el token: << ( >>");
        parser.mc.addGetch(null);
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("getch",18, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // getch ::= ID IGUAL GETCH error PUNTO_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		
        parser.msJP.errorSintax(xleft, xright, x, "Error en el bloque de instrucciones de la estructura getch, por favor revisa la entrada en la linea y columna indicada. Se esperaba el token: << ( >>");
        Simbolo s = parser.msJP.metodoBuscarID((String) a, aleft, aright);
        if (s != null) {
            parser.mc.addGetch(s);
        }
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("getch",18, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // getch ::= tipo_dato ID IGUAL GETCH error PUNTO_COMA 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		
        parser.msJP.errorSintax(xleft, xright, x, "Error en el bloque de instrucciones de la estructura getch, por favor revisa la entrada en la linea y columna indicada. Se esperaba el token: << ( >>");
        if (!(((Tipo) t).equals(Constantes.FLOAT_VAR_PJ))) {
            Object resultado = parser.msJP.declararVariables(new Simbolo((Tipo) t, new Simbolo(null, null, (String) a)), aleft, aright);
            if (resultado != null) {
                if (resultado instanceof Simbolo) {
                    parser.mc.addGetch((Simbolo) resultado);
                }  
            } 
        }
    
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("getch",18, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // getch ::= GETCH error PUNTO_COMA 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		
        parser.msJP.errorSintax(xleft, xright, x, "Error en el bloque de instrucciones de la estructura getch, por favor revisa la entrada en la linea y columna indicada. Se esperaba el token: << ( >>");
        parser.mc.addGetch(null);
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("getch",18, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // getch ::= ID IGUAL GETCH ppa PARENTESIS_C PUNTO_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)).value;
		
        Simbolo s = parser.msJP.metodoBuscarID((String) a, aleft, aright);
        if (s != null) {
            parser.mc.addGetch(s);
        }
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("getch",18, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // getch ::= tipo_dato ID IGUAL GETCH ppa PARENTESIS_C PUNTO_COMA 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-6)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)).value;
		
        if (!(((Tipo) t).equals(Constantes.FLOAT_VAR_PJ))) {
            Object resultado = parser.msJP.declararVariables(new Simbolo((Tipo) t, new Simbolo(null, null, (String) a)), aleft, aright);
            if (resultado != null) {
                if (resultado instanceof Simbolo) {
                    parser.mc.addGetch((Simbolo) resultado);
                }  
            } 
        }
    
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("getch",18, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // getch ::= GETCH ppa PARENTESIS_C PUNTO_COMA 
            {
              Object RESULT =null;
		parser.mc.addGetch(null);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("getch",18, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // estructuras ::= error CORCHETE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		parser.msJP.errorSintax(eleft, eright, e, "Error en el bloque de instrucciones de la estructura, por favor revisa la entrada en la linea y columna indicada. \nSe esperaba: << Declaracion variable || Asignacion de variable || if || switch || while || do || scanf || printf >>, recuperado hasta: << } >>");
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("estructuras",78, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // estructuras ::= error PUNTO_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		parser.msJP.errorSintax(eleft, eright, e, "Error en el bloque de instrucciones de la estructura, por favor revisa la entrada en la linea y columna indicada. \nSe esperaba: << Declaracion variable || Asignacion de variable || if || switch || while || do || scanf || printf >>, recuperado hasta: << ; >>");
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("estructuras",78, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // estructuras ::= COMENTARIO 
            {
              Object RESULT =null;
		/* Ignore */
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("estructuras",78, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // estructuras ::= llamada_fp PUNTO_COMA 
            {
              Object RESULT =null;
		
        Object as = null;
        parser.mc.addYRemovePuntero(as, false);
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("estructuras",78, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // estructuras ::= printf PUNTO_COMA 
            {
              Object RESULT =null;
		/* Ignore */
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("estructuras",78, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // estructuras ::= instancia_constructor PUNTO_COMA 
            {
              Object RESULT =null;
		/* Ignore */
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("estructuras",78, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // estructuras ::= declaracion_variables PUNTO_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("estructuras",78, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // estructuras ::= estructura_if 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("estructuras",78, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // estructuras ::= CLRSCR error PUNTO_COMA 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en el bloque de instrucciones clrsrc. Se esperaba el token: << () >>"); parser.mc.addCLRSCR();
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("estructuras",78, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // estructuras ::= CLRSCR PARENTESIS_A error PUNTO_COMA 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en el bloque de instrucciones clrsrc. Se esperaba el token: << ) >>"); parser.mc.addCLRSCR();
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("estructuras",78, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // estructuras ::= CLRSCR error PARENTESIS_C PUNTO_COMA 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en el bloque de instrucciones clrsrc. Se esperaba el token: << ( >>"); parser.mc.addCLRSCR();
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("estructuras",78, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // estructuras ::= CLRSCR PARENTESIS_A PARENTESIS_C error 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en el bloque de instrucciones clrsrc. Se esperaba el token: << ; >>"); parser.mc.addCLRSCR();
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("estructuras",78, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // estructuras ::= CLRSCR PARENTESIS_A PARENTESIS_C error PUNTO_COMA 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en el bloque de instrucciones clrsrc. Se esperaba el token: << ; >>"); parser.mc.addCLRSCR();
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("estructuras",78, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // estructuras ::= CLRSCR PARENTESIS_A PARENTESIS_C PUNTO_COMA 
            {
              Object RESULT =null;
		parser.mc.addCLRSCR();
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("estructuras",78, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // estructuras ::= error CLRSCR PARENTESIS_A PARENTESIS_C PUNTO_COMA 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)).value;
		parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en el bloque de instrucciones clrsrc. Se esperaba el token: << clrsrc >>"); parser.mc.addCLRSCR();
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("estructuras",78, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // estructuras ::= getch 
            {
              Object RESULT =null;
		/* Ignore */
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("estructuras",78, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // estructuras ::= asignacion_var PUNTO_COMA 
            {
              Object RESULT =null;
		/* Ignore */
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("estructuras",78, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // estructuras ::= switch 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("estructuras",78, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // estructuras ::= for 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("estructuras",78, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // estructuras ::= do_while 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("estructuras",78, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // estructuras ::= while 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("estructuras",78, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // estructuras ::= scanf PUNTO_COMA 
            {
              Object RESULT =null;
		/* Ignore */
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("estructuras",78, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // vp ::= COMA error 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion id, de la estructura printf. Se esperaba el token: << ID | &ID >>, no el token indicado."); 
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("vp",53, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // vp ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		parser.msJP.errorSintax(eleft, eright, e, "Error sintactico, en las intrucciones de variables print, no se esperaba el token indicado. Se esperaba el token: << ID | &ID >>");
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("vp",53, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // vp ::= vp COMA AMPERSAND ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.listaPrintf(a, parser.msJP.metodoBuscarID(e, eleft, eright));
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("vp",53, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // vp ::= COMA AMPERSAND ID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.metodoBuscarID(e, eleft, eright);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("vp",53, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // vp ::= vp COMA error ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		
        RESULT = parser.msJP.listaPrintf(a, parser.msJP.metodoBuscarID(e, eleft, eright));
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion id, de la estructura printf. Se esperaba el token: << ID | &ID >>, no el token indicado."); 
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("vp",53, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // vp ::= COMA error ID 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion id, de la estructura printf. Se esperaba el token: << ID | &ID >>, no el token indicado."); 
        RESULT = parser.msJP.metodoBuscarID(e, eleft, eright);
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("vp",53, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // vp ::= vp COMA ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.listaPrintf(a, parser.msJP.metodoBuscarID(e, eleft, eright));
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("vp",53, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // vp ::= COMA ID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.metodoBuscarID(e, eleft, eright);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("vp",53, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // valores ::= AMPERSAND asignacion vp 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.listaPrintfVal(a, e);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("valores",68, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // valores ::= AMPERSAND asignacion 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("valores",68, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // valores ::= asignacion vp 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.listaPrintfVal(a, e);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("valores",68, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // valores ::= asignacion 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("valores",68, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // printf ::= PRINTF PARENTESIS_A COMILLAS COMILLAS PARENTESIS_C 
            {
              Object RESULT =null;
		
        parser.mc.imprimir(new Simbolo(null, "\"\""));
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("printf",67, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // printf ::= PRINTF PARENTESIS_A COMILLAS texto_cadena COMILLAS PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		
        parser.mc.imprimir(new Simbolo(null, "\"" + e + "\""));
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("printf",67, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // printf ::= PRINTF PARENTESIS_A COMILLAS texto_p COMILLAS COMA valores PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		
        RESULT = parser.msJP.comprobarPrint(a, e, eleft, eright);
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("printf",67, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // tipo_dato_almacenar ::= LEER_FLOAT 
            {
              Object RESULT =null;
		RESULT = 2;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("tipo_dato_almacenar",66, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // tipo_dato_almacenar ::= LEER_CHAR 
            {
              Object RESULT =null;
		RESULT = 3;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("tipo_dato_almacenar",66, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // tipo_dato_almacenar ::= LEER_INT 
            {
              Object RESULT =null;
		RESULT = 1;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("tipo_dato_almacenar",66, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // txt ::= tipo_dato_almacenar 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = new SimboloPrint((int )e, null);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("txt",3, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // txt ::= texto_cadena tipo_dato_almacenar 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = new SimboloPrint((int )e, a.toString());
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("txt",3, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // texto_p ::= txt 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = a;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto_p",65, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // texto_p ::= texto_p txt 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.listaNumeros(a, e);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto_p",65, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // scanf ::= error SCANF ppa COMILLAS tipo_dato_almacenar COMILLAS COMA ID PARENTESIS_C 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-8)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-8)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion scanf. Se esperaba el token: << scanf >>, no el token indicado."); 
        Simbolo s = parser.msJP.metodoBuscarID(e, eleft, eright);
        if(s != null) {
            parser.mc.imprimirScanf((int)a, s);
        } 
        RESULT = s;   
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("scanf",63, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // scanf ::= error SCANF ppa COMILLAS texto_cadena tipo_dato_almacenar COMILLAS COMA ID PARENTESIS_C 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-9)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-9)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-9)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion scanf. Se esperaba el token: << scanf >>, no el token indicado."); 
        parser.mc.imprimir(new Simbolo(null, "\"" + i + "\""));
        Simbolo s = parser.msJP.metodoBuscarID(e, eleft, eright);
        if(s != null) {
            parser.mc.imprimirScanf((int)a, s);
        } 
        RESULT = s;   
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("scanf",63, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-9)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // scanf ::= error SCANF ppa COMILLAS tipo_dato_almacenar COMILLAS COMA AMPERSAND ID PARENTESIS_C 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-9)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-9)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-9)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion scanf. Se esperaba el token: << scanf >>, no el token indicado."); 
        Simbolo s = parser.msJP.metodoBuscarID(e, eleft, eright);
        if(s != null) {
            parser.mc.imprimirScanf((int)a, s);
        } 
        RESULT = s;   
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("scanf",63, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-9)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // scanf ::= error SCANF ppa COMILLAS texto_cadena tipo_dato_almacenar COMILLAS COMA AMPERSAND ID PARENTESIS_C 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-10)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-10)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-10)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion scanf. Se esperaba el token: << scanf >>, no el token indicado."); 
        parser.mc.imprimir(new Simbolo(null, "\"" + i + "\""));
        Simbolo s = parser.msJP.metodoBuscarID(e, eleft, eright);
        if(s != null) {
            parser.mc.imprimirScanf((int)a, s);
        } 
        RESULT = s;   
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("scanf",63, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-10)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // scanf ::= SCANF ppa COMILLAS tipo_dato_almacenar COMILLAS COMA ID PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		
        Simbolo s = parser.msJP.metodoBuscarID(e, eleft, eright);
        if(s != null) {
            parser.mc.imprimirScanf((int)a, s);
        } 
        RESULT = s;   
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("scanf",63, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // scanf ::= SCANF ppa COMILLAS texto_cadena tipo_dato_almacenar COMILLAS COMA ID PARENTESIS_C 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		
        parser.mc.imprimir(new Simbolo(null, "\"" + i + "\""));
        Simbolo s = parser.msJP.metodoBuscarID(e, eleft, eright);
        if(s != null) {
            parser.mc.imprimirScanf((int)a, s);
        } 
        RESULT = s;   
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("scanf",63, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // scanf ::= SCANF ppa COMILLAS tipo_dato_almacenar COMILLAS COMA AMPERSAND ID PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		
        Simbolo s = parser.msJP.metodoBuscarID(e, eleft, eright);
        if(s != null) {
            parser.mc.imprimirScanf((int)a, s);
        } 
        RESULT = s;   
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("scanf",63, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // scanf ::= SCANF ppa COMILLAS texto_cadena tipo_dato_almacenar COMILLAS COMA AMPERSAND ID PARENTESIS_C 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		
        parser.mc.imprimir(new Simbolo(null, "\"" + i + "\""));
        Simbolo s = parser.msJP.metodoBuscarID(e, eleft, eright);
        if(s != null) {
            parser.mc.imprimirScanf((int) a, s);
        } 
        RESULT = s;   
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("scanf",63, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-9)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // i_ins ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		parser.msJP.errorSintax(eleft, eright, e, "Error sintactico en la declaracion de un objeto, no se esperaba el token indicado. Estructura esperada: << ID | ID ( params ) | ID () >>");
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("i_ins",74, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // i_ins ::= error ID PARENTESIS_A parametros PARENTESIS_C 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion instancia de objetos. Se esperaba el token: << ID >>, no el token indicado."); 
        if(a != null) {
            RESULT =  new Simbolo(null, a, e);
        } 
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("i_ins",74, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // i_ins ::= error ID PARENTESIS_A PARENTESIS_C 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion instancia de objetos. Se esperaba el token: << ID >>, no el token indicado."); 
        RESULT =  new Simbolo(null, new ArrayList<>(), e);
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("i_ins",74, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // i_ins ::= error ID 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT =  new Simbolo(null, new ArrayList<>(), e);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("i_ins",74, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // i_ins ::= ID PARENTESIS_A parametros PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		
        if(a != null) {
            RESULT =  new Simbolo(null, a, e);
        } 
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("i_ins",74, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // i_ins ::= ID PARENTESIS_A PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		RESULT =  new Simbolo(null, new ArrayList<>(), e);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("i_ins",74, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // i_ins ::= ID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT =  new Simbolo(null, new ArrayList<>(), e);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("i_ins",74, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // instancia_pp ::= COMA i_ins instancia_pp 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.lista(a, e);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("instancia_pp",76, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // instancia_pp ::= COMA i_ins 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.lista(null, a);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("instancia_pp",76, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // instancia_p ::= i_ins instancia_pp 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.lista(a, e);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("instancia_p",75, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // instancia_p ::= i_ins 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.lista(null, e);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("instancia_p",75, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // instancia_constructor ::= JAVA PUNTO ID instancia_p 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		
        RESULT = parser.msJP.agregarInstancias((List<Simbolo>) e, a, aleft, aright);
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("instancia_constructor",59, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // llamada_fp ::= JAVA PUNTO ID PUNTO ID PARENTESIS_A parametros PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		RESULT = parser.mi.buscarInstancia(e, a, aleft, aright, i, "");
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("llamada_fp",58, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // llamada_fp ::= VB PUNTO ID ppa parametros PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		RESULT = parser.mi.searchSimbolo(null, a, 1, aleft, aright, e, "");
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("llamada_fp",58, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // llamada_fp ::= PY PUNTO ID ppa parametros PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		RESULT = parser.mi.searchSimbolo(null, a, 3, aleft, aright, e, "");
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("llamada_fp",58, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // parametros_p ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		 
        RESULT = new ArrayList<>();
        parser.msJP.errorSintax(eleft, eright, e, "Error sintactico en la instruccion de llamada a una funcion, no se esperaba el token indicado para el reconocimiento de parametros. Se esperaba: << Param | Param, Param ... >>");
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("parametros_p",57, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // parametros_p ::= parametros_p COMA operaciones_aritmeticas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.lista(a, e);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("parametros_p",57, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // parametros_p ::= COMA operaciones_aritmeticas 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.lista(null, e);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("parametros_p",57, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // parametros ::= 
            {
              Object RESULT =null;

              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("parametros",56, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // parametros ::= operaciones_aritmeticas 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.lista(null, e);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("parametros",56, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // parametros ::= operaciones_aritmeticas parametros_p 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		
        List<Simbolo> lista = new ArrayList<>();
        if (e != null) {
            if (e instanceof Simbolo) { 
                lista.add((Simbolo) e);
            }
        }
        if (a != null) {
            if (a instanceof Simbolo) { 
                lista.add((Simbolo) a);
            } else  {   
                lista.addAll((List<Simbolo>) a);
            }
        }
        RESULT = lista;
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("parametros",56, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // operaciones_asignacion ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		parser.msJP.errorSintax(eleft, eright, e, "Error sintactico en la asignacion de incremento en la estructura for. Se espera la estructura: << ID = (Entero | Decimal | Operacion Aritmetica) | ID++ | ID-->>");
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("operaciones_asignacion",80, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // operaciones_asignacion ::= error ID MENOS_MENOS 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion incremento de la estructura for. Se recupero hasta el token: << ID >>, no el token indicado."); 
        RESULT = (new Simbolo(Constantes.INT_VAR_PJ, -2, a));
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("operaciones_asignacion",80, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // operaciones_asignacion ::= error ID MAS_MAS 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion incremento de la estructura for. Se recupero hasta el token: << ID >>."); 
        RESULT = (new Simbolo(Constantes.INT_VAR_PJ, -1, a));
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("operaciones_asignacion",80, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // operaciones_asignacion ::= ID error operaciones_aritmeticas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion incremento de la estructura for. Se recupero hasta el token: << = >>."); 
        Simbolo nuevo;
        if(e != null) {
            nuevo = new Simbolo(((Simbolo) e).getTipo(), e, a);
        } else { 
            nuevo = null;
        }
        RESULT = nuevo;
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("operaciones_asignacion",80, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // operaciones_asignacion ::= error ID IGUAL operaciones_aritmeticas 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion de incremento en la estructura for. Se recupero hasta el token: << ID >>."); 
        Simbolo nuevo;
        if(e != null) {
            nuevo = new Simbolo(((Simbolo) e).getTipo(), e, a);
        } else { 
            nuevo = null;
        }
        RESULT = nuevo;
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("operaciones_asignacion",80, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // operaciones_asignacion ::= ID MENOS_MENOS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		RESULT = (new Simbolo(Constantes.INT_VAR_PJ, -2, a));
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("operaciones_asignacion",80, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // operaciones_asignacion ::= ID MAS_MAS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		RESULT = (new Simbolo(Constantes.INT_VAR_PJ, -1, a));
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("operaciones_asignacion",80, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // operaciones_asignacion ::= ID IGUAL operaciones_aritmeticas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		
        Simbolo nuevo;
        if(e != null) {
            nuevo = new Simbolo(((Simbolo) e).getTipo(), e, a);
        } else { 
            nuevo = null;
        }
        RESULT = nuevo;
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("operaciones_asignacion",80, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // var ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		parser.msJP.errorSintax(eleft, eright, e, "Error sintactico en la declaracion de datos, de la instruccion for. Se esperaba el token: << Identificador >>.");
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("var",52, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // var ::= tipo_dato ID IGUAL dato 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.comprobarAsignacionFor(i, e, eleft, eright, (Tipo) a);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("var",52, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // var ::= ID IGUAL operaciones_aritmeticas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.comprobarAsignacionFor(e, a, aleft, aright, null);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("var",52, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // for ::= for_asignacion estructuras_p CORCHETE_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		
        if(((For) a).getA() != null && ((For) a).getE() != null && ((For) a).getI() != null) {
            RESULT = parser.msJP.contruirEstructuraCiloDW(o, true, 3);
        } else {
            RESULT = parser.msJP.contruirEstructuraCiloDW(o, null, 3);;
        }
        parser.mc.actualizar();
        parser.mc.imprimirResto();
        parser.msJP.removerCualquierSimbolo(((For) a).getA());
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("for",51, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // for_asignacion ::= for_condicional operaciones_asignacion error CORCHETE_A 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion de la estructura for. Se esperaba el token: << ) >>, no el token indicado."); 
        For f = (For) a;
        f.setI(i);
        RESULT = parser.mc.addForJPA(f, (Simbolo) i);
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("for_asignacion",62, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // for_asignacion ::= for_condicional operaciones_asignacion PARENTESIS_C error CORCHETE_A 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion de la estructura for. Se recupero hasta el token: << { >>."); 
        For f = (For) a;
        f.setI(i);
        RESULT = parser.mc.addForJPA(f, (Simbolo) i);
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("for_asignacion",62, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // for_asignacion ::= for_condicional operaciones_asignacion error PARENTESIS_C CORCHETE_A 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion de la estructura for. Se recupero hasta el token: << ) >>."); 
        For f = (For) a;
        f.setI(i);
        RESULT = parser.mc.addForJPA(f, (Simbolo) i);
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("for_asignacion",62, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // for_asignacion ::= for_condicional operaciones_asignacion PARENTESIS_C CORCHETE_A 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		
        For f = (For) a;
        f.setI(i);
        RESULT = parser.mc.addForJPA(f, (Simbolo) i);
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("for_asignacion",62, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // for_condicional ::= for_var condicional PUNTO_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		 
        ((For) a).setE(e);
        parser.mc.etiqueta();
        RESULT = a;
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("for_condicional",61, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // for_var ::= FOR ppa var error 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion de la estructura for. Se esperaba el token: << ; >>, no el token indicado."); 
        RESULT = new For(a, parser.mc.addForJPV((Simbolo) a));
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("for_var",60, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // for_var ::= FOR ppa var error PUNTO_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		
        RESULT = new For(a, parser.mc.addForJPV((Simbolo) a));
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion de la estructura for. Se recupero hasta el token: << ; >>."); 
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("for_var",60, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // for_var ::= error FOR ppa var PUNTO_COMA 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en el bloque de instrucciones. Se a recuperado hasta el token: << for >>."); 
        RESULT = new For(a, parser.mc.addForJPV((Simbolo) a));
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("for_var",60, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // for_var ::= FOR ppa var PUNTO_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		RESULT = new For(a, parser.mc.addForJPV((Simbolo) a));
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("for_var",60, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // do_while ::= do_while_p estructuras_p CORCHETE_C error ppa condicional PARENTESIS_C PUNTO_COMA 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-7)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-6)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion de la estructura do while. Se esperaba el token: << while >>, no el token indicado."); 
        RESULT = parser.msJP.contruirEstructuraCiloDW(e, a, 2);
        parser.mc.escribirEtiquetasInicio(false);
        parser.mc.escribirEtiquetaFin();
        parser.mc.finDoWhile((String) i);
        parser.mc.imprimirResto();
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("do_while",50, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // do_while ::= do_while_p estructuras_p CORCHETE_C error WHILE ppa condicional PARENTESIS_C PUNTO_COMA 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-8)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-8)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-7)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-7)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion de la estructura do while. Se recupero hasta el token: << while >>."); 
        RESULT = parser.msJP.contruirEstructuraCiloDW(e, a, 2);
        parser.mc.escribirEtiquetasInicio(false);
        parser.mc.escribirEtiquetaFin();
        parser.mc.finDoWhile((String) i);
        parser.mc.imprimirResto();
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("do_while",50, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // do_while ::= do_while_p estructuras_p CORCHETE_C WHILE ppa condicional PARENTESIS_C error 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-7)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion de la estructura do while. Se esperaba el token: << ; >>, no el token indicado."); 
        RESULT = parser.msJP.contruirEstructuraCiloDW(e, a, 2);
        parser.mc.escribirEtiquetasInicio(false);
        parser.mc.escribirEtiquetaFin();
        parser.mc.finDoWhile((String) i);
        parser.mc.imprimirResto();
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("do_while",50, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // do_while ::= do_while_p estructuras_p CORCHETE_C WHILE ppa condicional PARENTESIS_C error PUNTO_COMA 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-8)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-8)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-7)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-7)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion de la estructura do while. Se recupero hasta el token: << ; >>."); 
        RESULT = parser.msJP.contruirEstructuraCiloDW(e, a, 2);
        parser.mc.escribirEtiquetasInicio(false);
        parser.mc.escribirEtiquetaFin();
        parser.mc.finDoWhile((String) i);
        parser.mc.imprimirResto();
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("do_while",50, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // do_while ::= do_while_p estructuras_p CORCHETE_C WHILE ppa condicional PARENTESIS_C PUNTO_COMA 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-7)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		
        RESULT = parser.msJP.contruirEstructuraCiloDW(e, a, 2);
        parser.mc.escribirEtiquetasInicio(false);
        parser.mc.escribirEtiquetaFin();
        parser.mc.finDoWhile((String) i);
        parser.mc.imprimirResto();
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("do_while",50, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // do_while_p ::= error DO CORCHETE_A 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en el bloque de instrucciones. Se a recuperado hasta el token: << do >>."); 
        RESULT = parser.mc.addDoWhile();
        parser.mc.nuevoAnalisisBoolean();
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("do_while_p",15, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // do_while_p ::= DO CORCHETE_A 
            {
              Object RESULT =null;
		
        RESULT = parser.mc.addDoWhile();
        parser.mc.nuevoAnalisisBoolean();
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("do_while_p",15, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // while ::= while_p estructuras_p CORCHETE_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		
        RESULT = parser.msJP.contruirEstructuraCiloDW(e, ((While) a).getA(), 1);
        parser.mc.finWhile(((While) a).getIdEtiqueta());
        parser.mc.imprimirResto();
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("while",49, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // while_p ::= while_n ppa condicional PARENTESIS_C error CORCHETE_A 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion de la estructura while. Se recupero hasta el token: << { >>, no el token indicado."); 
        parser.mc.nuevoAnalisisBoolean();
        parser.mc.escribirEtiquetasInicio(false);
        parser.mc.addEtiquetasEstructuras();
        ((While) w).setA(a);
        RESULT = w;
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("while_p",39, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // while_p ::= while_n ppa PARENTESIS_A condicional PARENTESIS_C CORCHETE_A 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion de la estructura while. Se recupero hasta el token: << ( >>, no el token indicado."); 
        parser.mc.nuevoAnalisisBoolean();
        parser.mc.escribirEtiquetasInicio(false);
        parser.mc.addEtiquetasEstructuras();
        ((While) w).setA(a);
        RESULT = w;
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("while_p",39, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // while_p ::= while_n ppa condicional PARENTESIS_C CORCHETE_A 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		
        parser.mc.nuevoAnalisisBoolean();
        parser.mc.escribirEtiquetasInicio(false);
        parser.mc.addEtiquetasEstructuras();
        ((While) w).setA(a);
        RESULT = w;
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("while_p",39, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // while_n ::= error WHILE 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico el bloque de instrucciones. Se a recuperado hasta el token: << while >>."); 
        RESULT = new While(parser.mc.addWhile(), null);
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("while_n",38, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // while_n ::= WHILE 
            {
              Object RESULT =null;
		RESULT = new While(parser.mc.addWhile(), null);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("while_n",38, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // caso ::= caso_p estructuras_p 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		
        RESULT = parser.msJP.crearEstructuraCases(a, e, aleft, aright, false);
        parser.mc.finCadaCaso();
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("caso",48, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // caso ::= caso_p estructuras_p BREAK error PUNTO_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion de la estructura switch - case. Se recupero hasta el token: << ; >>, no el token indicado."); 
        RESULT = parser.msJP.crearEstructuraCases(a, e, aleft, aright, false);
        parser.mc.finCadaCaso();
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("caso",48, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // caso ::= caso_p estructuras_p BREAK PUNTO_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		
        RESULT = parser.msJP.crearEstructuraCases(a, e, aleft, aright, false);
        parser.mc.finCadaCaso();
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("caso",48, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // caso_p ::= CASE error dato DOS_PUNTOS 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		      
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion de la estructura switch - case. Se esperaba el token: << : >>, no el token indicado."); 
        parser.mc.condicional((Simbolo) a); RESULT = a;
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("caso_p",72, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // caso_p ::= CASE dato DOS_PUNTOS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		parser.mc.condicional((Simbolo) a); RESULT = a;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("caso_p",72, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // cantidad_casos ::= caso cantidad_casos 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.lista(a, e);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("cantidad_casos",47, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // cantidad_casos ::= caso 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("cantidad_casos",47, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // caso_default ::= 
            {
              Object RESULT =null;
		parser.mc.etiquetaGoto();
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("caso_default",46, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // caso_default ::= DEFAULT error estructuras_p BREAK PUNTO_COMA 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		  
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion de la estructura switch. Se recupero hasta el token: << : >>, no el token indicado."); 
        parser.mc.etiquetaGoto();
        RESULT = parser.msJP.crearEstructuraCases(null, a, aleft, aright, true);
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("caso_default",46, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // caso_default ::= DEFAULT error DOS_PUNTOS estructuras_p BREAK PUNTO_COMA 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		  
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion de la estructura switch. Se recupero hasta el token: << : >>, no el token indicado."); 
        parser.mc.etiquetaGoto();
        RESULT = parser.msJP.crearEstructuraCases(null, a, aleft, aright, true);
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("caso_default",46, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // caso_default ::= DEFAULT DOS_PUNTOS estructuras_p BREAK PUNTO_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		  
        parser.mc.etiquetaGoto();
        RESULT = parser.msJP.crearEstructuraCases(null, a, aleft, aright, true);
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("caso_default",46, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // switch ::= switch_p cantidad_casos caso_default CORCHETE_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		
        RESULT = parser.msJP.crearCase(e, i, a, eleft, eright);
        parser.mc.etqFinTurno();
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("switch",45, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // switch_p ::= error SWITCH ppa dato PARENTESIS_C CORCHETE_A 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en el bloque de instrucciones. Se a recuperado hasta el token: << switch >>."); 
        parser.mc.setEtiquetaSwitch((Simbolo) a); RESULT = a;
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("switch_p",14, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // switch_p ::= SWITCH ppa dato error CORCHETE_A 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion switch. Se esperaba el token: << ) >>, no el token indicado."); 
        parser.mc.setEtiquetaSwitch((Simbolo) a); RESULT = a;
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("switch_p",14, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // switch_p ::= SWITCH ppa dato error PARENTESIS_C CORCHETE_A 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion switch. Se esperaba el token: << ) >>, no el token indicado."); 
        parser.mc.setEtiquetaSwitch((Simbolo) a); RESULT = a;
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("switch_p",14, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // switch_p ::= SWITCH ppa dato PARENTESIS_C CORCHETE_A 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		parser.mc.setEtiquetaSwitch((Simbolo) a); RESULT = a;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("switch_p",14, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // estructura_if ::= if else_if_p else 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.construirCondicionalIf(a, e, i);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("estructura_if",44, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // estructura_if ::= if else_if_p 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.construirCondicionalIf(a, e, null);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("estructura_if",44, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // else_if_p ::= 
            {
              Object RESULT =null;

              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("else_if_p",43, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // else_if_p ::= else_if else_if_p 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.lista(a, e);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("else_if_p",43, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // else_if ::= ie estructuras_p CORCHETE_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		RESULT = parser.msJP.crearEstructuraCondicional(e, a, 2); parser.mc.imprimirResto();
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("else_if",42, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // else ::= ee estructuras_p CORCHETE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		RESULT = parser.msJP.crearEstructuraCondicional(e, false, 3); parser.mc.imprimirResto();
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("else",41, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // if ::= ii estructuras_p CORCHETE_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		RESULT = parser.msJP.crearEstructuraCondicional(e, a, 1); parser.mc.imprimirResto();
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("if",40, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // ee ::= ELSE error CORCHETE_A 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion else. Se esperaba el token: << { >>, no el token indicado."); 
        parser.mc.escribirEtiquetasInicio(false); parser.mc.escribirEtiquetaFin(); parser.mc.nuevoAnalisisBoolean(); 
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("ee",71, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // ee ::= ELSE CORCHETE_A 
            {
              Object RESULT =null;
		parser.mc.escribirEtiquetasInicio(false); parser.mc.escribirEtiquetaFin(); parser.mc.nuevoAnalisisBoolean(); 
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("ee",71, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // ie ::= ELSE_IF ppa PARENTESIS_A condicional PARENTESIS_C error CORCHETE_A 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion else if. Se esperaba el token: << { >>, no el token indicado."); 
        parser.mc.escribirEtiquetasInicio(false); parser.mc.escribirEtiquetaFin(); parser.mc.nuevoAnalisisBoolean(); RESULT = e;
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("ie",70, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // ie ::= ELSE_IF ppa PARENTESIS_A condicional PARENTESIS_C CORCHETE_A 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		  
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion else if. Se esperaba el token: << ( >>, no el token indicado."); 
        parser.mc.escribirEtiquetasInicio(false); parser.mc.escribirEtiquetaFin(); parser.mc.nuevoAnalisisBoolean(); RESULT = e;
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("ie",70, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // ie ::= ELSE_IF ppa condicional PARENTESIS_C CORCHETE_A 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		parser.mc.escribirEtiquetasInicio(false); parser.mc.escribirEtiquetaFin(); parser.mc.nuevoAnalisisBoolean(); RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("ie",70, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // ii ::= error IF ppa condicional PARENTESIS_C CORCHETE_A 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en el bloque de instrucciones. Se a recuperado hasta el token: << if >>."); 
        parser.mc.escribirEtiquetasInicio(false); parser.mc.escribirEtiquetaFin(); parser.mc.nuevoAnalisisBoolean(); RESULT = e;
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("ii",69, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // ii ::= IF ppa condicional PARENTESIS_C error CORCHETE_A 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion if. Se esperaba el token: << { >>, no el token indicado."); 
        parser.mc.escribirEtiquetasInicio(false); parser.mc.escribirEtiquetaFin(); parser.mc.nuevoAnalisisBoolean(); RESULT = e;
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("ii",69, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // ii ::= IF ppa PARENTESIS_A condicional PARENTESIS_C CORCHETE_A 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion if. Se recupero hasta el token: << ( >>."); 
        parser.mc.escribirEtiquetasInicio(false); parser.mc.escribirEtiquetaFin(); parser.mc.nuevoAnalisisBoolean(); RESULT = e;
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("ii",69, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // ii ::= IF ppa condicional PARENTESIS_C CORCHETE_A 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		parser.mc.escribirEtiquetasInicio(false); parser.mc.escribirEtiquetaFin(); parser.mc.nuevoAnalisisBoolean(); RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("ii",69, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // dimension ::= LLAVE_A operaciones_aritmeticas LLAVE_C dimension 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.ma.listaDimensiones(a, e, eleft, eright);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("dimension",37, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // dimension ::= LLAVE_A operaciones_aritmeticas LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		
        if(e != null) {
            if (((Simbolo) e).getTipo() != Constantes.CHAR_VAR_PJ && 
                Constantes.FLOAT_VAR_PJ.isFatherOf(((Simbolo) e).getTipo().getSymbol())) {  
                RESULT = ((Simbolo) e);
            } else {
                parser.msJP.errorSemantico(eleft, eright, "Arreglo", "Error, comprobacion de tipos en la dimension de arreglos.");
            }
        } else { 
            RESULT = null;
        }
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("dimension",37, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // arreglo ::= ID dimension 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		
        if(e == null) {
            RESULT = null;
        } else {
            RESULT = new Simbolo(null, e, a);
        }   
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("arreglo",36, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // dimension_const ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		parser.msJP.errorSintax(eleft, eright, e, "Error sintactico en la instruccion en la declaracion de arreglos. Se esperaba la estructura: << [ ID | Entero | Decimal | Operacion Aritmetica ]... >>.");
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("dimension_const",55, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // dimension_const ::= error dimension_const 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion de arreglo. Se esperaba la estructura: << [ ID | Entero | Decimal | Operacion Aritmetica ]... >>, no el token indicado."); 
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("dimension_const",55, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // dimension_const ::= LLAVE_A op_aritmetica_const LLAVE_C dimension_const 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.ma.listaDimensiones(a, e, eleft, eright);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("dimension_const",55, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // dimension_const ::= LLAVE_A op_aritmetica_const LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("dimension_const",55, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // arreglo_const ::= error arreglo_const 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion de arreglo. Se recupero hasta el token: << Identificador >>.");  RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("arreglo_const",54, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // arreglo_const ::= ID dimension_const 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		
        if(e == null) {
            RESULT = null;
        } else {
            RESULT = new Simbolo(null, e, a);
        }   
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("arreglo_const",54, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // asignacion ::= error llamada_fp 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		 
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion llamada a un procedimiento. Se recupero hasta el token: << Identificador >>."); 
        if(a != null) {
            Tipo tipo = ((Simbolo) a).getTipoFuncion();
            if(tipo != null && tipo.getNombre().equals("Funcion")) {
                RESULT = a;
            } else {
                parser.msJP.errorSemantico(aleft, aright, "Asignacion", "Error, la instancia es un metodo y no puede asignarse.");
                RESULT = null;
            }
        }
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("asignacion",35, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // asignacion ::= llamada_fp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		 
        if(a != null) {
            Tipo tipo = ((Simbolo) a).getTipoFuncion();
            if(tipo != null && tipo.getNombre().equals("Funcion")) {
                RESULT = a;
            } else {
                parser.msJP.errorSemantico(aleft, aright, "Asignacion", "Error, la instancia es un metodo y no puede asignarse.");
                RESULT = null;
            }
        }
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("asignacion",35, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // asignacion ::= dato 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("asignacion",35, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // asignacion_var ::= arreglo IGUAL asignacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		
        if(e != null) { 
            parser.msJP.asignacionArreglos(a, aleft, aright, (Simbolo) e);
        } else { 
            parser.msJP.asignacionArreglos(null, aleft, aright, null);
        }
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("asignacion_var",34, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // asignacion_var ::= ID IGUAL asignacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		
        if(e != null) {      
            parser.msJP.asignacionVariables(new Simbolo(((Simbolo) e).getTipo(), ((Simbolo) e), a), aleft, aright);
        } else { 
            parser.msJP.asignacionVariables(null, aleft, aright);
        }
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("asignacion_var",34, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // lista_id_p ::= lista_id_p COMA lista_id_valores 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.lista(a, e);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("lista_id_p",32, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // lista_id_p ::= COMA lista_id_valores 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("lista_id_p",32, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // lista_ids ::= lista_id_valores 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("lista_ids",33, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // lista_ids ::= lista_id_valores lista_id_p 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.lista(a, e);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("lista_ids",33, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // lista_id_valores ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		
        parser.msJP.errorSintax(eleft, eright, e, "Error sintactico en la declaracion de variables, no se esperaba el token indicado. Se esperaba la estructura << ID = ( Operacion Aritmetica | Entero | Decimal | Caracter) | ID >>");
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("lista_id_valores",31, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // lista_id_valores ::= error ID 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en el bloque de instrucciones. Se a recuperado hasta el token: << Identificador >>."); 
        RESULT = new Simbolo(null, null, e.toString());
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("lista_id_valores",31, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // lista_id_valores ::= ID error IGUAL asignacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion asignacion de valores. Se recupero haste el token: << = >>."); 
        if(e != null) {        
            RESULT = new Simbolo(((Simbolo) e).getTipo(), ((Simbolo) e), a);
        } else { 
            RESULT = e;
        }
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("lista_id_valores",31, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // lista_id_valores ::= error ID IGUAL asignacion 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en el bloque de instrucciones. Se a recuperado hasta el token: << Identificador >>."); 
        if(e != null) {        
            RESULT = new Simbolo(((Simbolo) e).getTipo(), ((Simbolo) e), a);
        } else { 
            RESULT = e;
        }
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("lista_id_valores",31, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // lista_id_valores ::= ID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = new Simbolo(null, null, e.toString());
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("lista_id_valores",31, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // lista_id_valores ::= ID IGUAL asignacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		
        if(e != null) {        
            RESULT = new Simbolo(((Simbolo) e).getTipo(), ((Simbolo) e), a);
        } else { 
            RESULT = e;
        }
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("lista_id_valores",31, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // declaracion_variables ::= tipo_dato arreglo_const 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.declararArreglo(e, eleft, eright, (Tipo) a);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("declaracion_variables",29, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // declaracion_variables ::= tipo_dato lista_ids 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.declararVariables(new Simbolo((Tipo)a, e), aleft, aright);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("declaracion_variables",29, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // declaracion_variables_g ::= tipo_dato lista_ids 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.declararVariablesGlobales(new Simbolo((Tipo)a, e), aleft, aright);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("declaracion_variables_g",30, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // condicional_not ::= operaciones_logicas 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		parser.mc.gotoEscribir(); RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("condicional_not",28, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // condicional_not ::= NOT ppa operaciones_logicas error 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion operacion logica. Se esperaba el token: << ) >>, no el token indicado."); 
        RESULT = parser.msJP.comprobacionCondicional(a, true, 3, aleft, aright);
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("condicional_not",28, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // condicional_not ::= NOT ppa operaciones_logicas error PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion operacion logica. Se esperaba el token: << ) >>, no el token indicado."); 
        RESULT = parser.msJP.comprobacionCondicional(a, true, 3, aleft, aright);
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("condicional_not",28, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // condicional_not ::= NOT ppa PARENTESIS_A operaciones_logicas PARENTESIS_C 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		  
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion operacion logica. No se esperaba el token: << " + ((Symbol) x).value + " >>."); 
        RESULT = parser.msJP.comprobacionCondicional(a, true, 3, aleft, aright);
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("condicional_not",28, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // condicional_not ::= NOT ppa operaciones_logicas PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		RESULT = parser.msJP.comprobacionCondicional(a, true, 3, aleft, aright);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("condicional_not",28, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // condicional_and ::= condicional_not 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = a;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("condicional_and",27, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // condicional_and ::= condicional_and and condicional_and 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.comprobacionCondicional(a, e, 1, cleft, cright);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("condicional_and",27, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // condicional_or ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		parser.msJP.errorSintax(eleft, eright, e, "Error sintactico en las operacionaciones logicas, de la intruccion condicional. Se esperaba la estructura: << Op1 (&&, ||) Op2 >>");
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("condicional_or",26, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // condicional_or ::= condicional_and 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = a;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("condicional_or",26, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // condicional_or ::= condicional_or or condicional_or 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.comprobacionCondicional(a, e, 2, cleft, cright);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("condicional_or",26, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // or ::= OR 
            {
              Object RESULT =null;
		parser.mc.or(); parser.mc.condicionalOR(); if (!parser.mc.ultimoAgregadorEtiqueta()) { parser.mc.escribirEtiqueta();}
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("or",25, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // and ::= AND 
            {
              Object RESULT =null;
		parser.mc.and(); parser.mc.condicionalAND(); parser.mc.escribirEtiqueta();
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("and",24, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // condicional ::= error CORCHETE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		
        parser.mc.nuevoAnalisisBoolean();  
        parser.msJP.errorSintax(eleft, eright, e, "Error sintactico en las operacionaciones logicas, de la intruccion condicional. Se esperaba la estructura: << Op1 (&& , ||) Op2 >>");
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("condicional",23, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // condicional ::= condicional_or 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		parser.mc.nuevoAnalisisBoolean(); RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("condicional",23, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // tipos_comparacion ::= error 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion operacion de comparacion. Se esperaba el token: << ID | Entero | Decimal | Operacion Aritmetica | Caracter >>, no el token indicado.");
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("tipos_comparacion",22, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // tipos_comparacion ::= error CARACTER 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion operacion de comparacion. Se esperaba el token: << ID | Entero | Decimal | Operacion Aritmetica | Caracter >>, no el token indicado."); RESULT = new Simbolo(Constantes.CHAR_VAR_PJ, a);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("tipos_comparacion",22, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // tipos_comparacion ::= error operaciones_aritmeticas 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion operacion de comparacion. Se esperaba el token: << ID | Entero | Decimal | Operacion Aritmetica | Caracter >>, no el token indicado."); RESULT = a;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("tipos_comparacion",22, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // tipos_comparacion ::= CARACTER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = new Simbolo(Constantes.CHAR_VAR_PJ, a);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("tipos_comparacion",22, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // tipos_comparacion ::= operaciones_aritmeticas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = a;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("tipos_comparacion",22, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // operaciones_logicas ::= tipos_comparacion error tipos_comparacion 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion operaciones de comaparacion. Se esperaba el token: << < | > | <= | >= | != >>, no el token indicado.");
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",21, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // operaciones_logicas ::= tipos_comparacion MAYOR_IGUAL tipos_comparacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.comprobarOperacionesLogicas(a, e, 6, cleft, cright);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",21, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // operaciones_logicas ::= tipos_comparacion MAYOR tipos_comparacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.comprobarOperacionesLogicas(a, e, 5, cleft, cright);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",21, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // operaciones_logicas ::= tipos_comparacion MENOR_IGUAL tipos_comparacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.comprobarOperacionesLogicas(a, e, 4, cleft, cright);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",21, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // operaciones_logicas ::= tipos_comparacion MENOR tipos_comparacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.comprobarOperacionesLogicas(a, e, 3, cleft, cright);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",21, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // operaciones_logicas ::= tipos_comparacion DIFERENTE tipos_comparacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.comprobarOperacionesLogicas(a, e, 2, cleft, cright);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",21, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // operaciones_logicas ::= tipos_comparacion IGUAL_IGUAL tipos_comparacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.comprobarOperacionesLogicas(a, e, 1, cleft, cright);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",21, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // estruct_op ::= arreglo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.buscarArreglo(e, eleft, eright);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("estruct_op",20, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // estruct_op ::= REAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		float e = (float)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = new Simbolo(Constantes.FLOAT_VAR_VB_PY, e);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("estruct_op",20, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // estruct_op ::= NUMERO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = new Simbolo(Constantes.INT_VAR_VB_PY, e);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("estruct_op",20, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // estruct_op ::= ID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.metodoBuscarID(e.toString(), eleft, eright);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("estruct_op",20, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // estruct_op ::= PARENTESIS_A operaciones_aritmeticas PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("estruct_op",20, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // operaciones_aritmeticas ::= estruct_op 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("operaciones_aritmeticas",19, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // operaciones_aritmeticas ::= MENOS estruct_op 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.modificarVariables(e, eleft, eright);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("operaciones_aritmeticas",19, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // operaciones_aritmeticas ::= operaciones_aritmeticas MOD operaciones_aritmeticas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.realizarOperaciones(a, e, aleft, aright, eleft, eright, 5);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("operaciones_aritmeticas",19, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // operaciones_aritmeticas ::= operaciones_aritmeticas DIV operaciones_aritmeticas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.realizarOperaciones(a, e, aleft, aright, eleft, eright, 4);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("operaciones_aritmeticas",19, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // operaciones_aritmeticas ::= operaciones_aritmeticas POR operaciones_aritmeticas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.realizarOperaciones(a, e, aleft, aright, eleft, eright, 3);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("operaciones_aritmeticas",19, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // operaciones_aritmeticas ::= operaciones_aritmeticas MENOS operaciones_aritmeticas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.realizarOperaciones(a, e, aleft, aright, eleft, eright, 2);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("operaciones_aritmeticas",19, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // operaciones_aritmeticas ::= operaciones_aritmeticas MAS operaciones_aritmeticas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.realizarOperaciones(a, e, aleft, aright, eleft, eright, 1);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("operaciones_aritmeticas",19, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // est_const ::= error est_const 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion operacion aritmetica o valores. Se esperaba el token: << ID | Entero | Decimal >>, no el token indicado."); RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("est_const",73, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // est_const ::= REAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		float e = (float)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = new Simbolo(Constantes.FLOAT_VAR_VB_PY, e);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("est_const",73, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // est_const ::= NUMERO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = new Simbolo(Constantes.INT_VAR_VB_PY, e);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("est_const",73, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // est_const ::= ID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.manejadorConstantes.isConstante(e.toString(), eleft, eright);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("est_const",73, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // est_const ::= PARENTESIS_A op_aritmetica_const PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("est_const",73, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // op_aritmetica_const ::= est_const 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("op_aritmetica_const",77, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // op_aritmetica_const ::= MENOS est_const 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.manejadorConstantes.realizarOperaciones(e, e, eleft, eright, eleft, eright, 6);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("op_aritmetica_const",77, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // op_aritmetica_const ::= op_aritmetica_const MOD op_aritmetica_const 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.manejadorConstantes.realizarOperaciones(a, e, aleft, aright, eleft, eright, 5);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("op_aritmetica_const",77, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // op_aritmetica_const ::= op_aritmetica_const DIV op_aritmetica_const 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.manejadorConstantes.realizarOperaciones(a, e, aleft, aright, eleft, eright, 4);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("op_aritmetica_const",77, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // op_aritmetica_const ::= op_aritmetica_const POR op_aritmetica_const 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.manejadorConstantes.realizarOperaciones(a, e, aleft, aright, eleft, eright, 3);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("op_aritmetica_const",77, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // op_aritmetica_const ::= op_aritmetica_const MENOS op_aritmetica_const 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.manejadorConstantes.realizarOperaciones(a, e, aleft, aright, eleft, eright, 2);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("op_aritmetica_const",77, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // op_aritmetica_const ::= op_aritmetica_const MAS op_aritmetica_const 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.manejadorConstantes.realizarOperaciones(a, e, aleft, aright, eleft, eright, 1);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("op_aritmetica_const",77, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // librerias_p ::= 
            {
              Object RESULT =null;

              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("librerias_p",17, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // librerias_p ::= librerias librerias_p 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.lista(a, e);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("librerias_p",17, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // librerias ::= INCLUDE LIBRERIA_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.agregarLibreria(a.toString(), aleft, aright, 4);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("librerias",16, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // librerias ::= INCLUDE LIBRERIA_PYTHON 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		parser.msJP.agregarLibreria(a.toString(), aleft, aright, 3);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("librerias",16, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // librerias ::= INCLUDE LIBRERIA_CLASES 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		parser.msJP.agregarLibreria(a.toString(), aleft, aright, 2);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("librerias",16, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // librerias ::= INCLUDE LIBRERIA_JAVA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		parser.msJP.agregarLibreria(a.toString(), aleft, aright, 5);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("librerias",16, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // librerias ::= INCLUDE LIBRERIA_VB 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		parser.msJP.agregarLibreria(a.toString(), aleft, aright, 1);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("librerias",16, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // tipo_dato ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		  
        RESULT = Constantes.INT_VAR_PJ;
        parser.msJP.errorSintax(eleft, eright, e, "Error sintactico en la instruccion tipo de dato de una variable. Se esperaba el token: << int | char | float >>");
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("tipo_dato",13, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // tipo_dato ::= CHAR 
            {
              Object RESULT =null;
		RESULT = Constantes.CHAR_VAR_PJ;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("tipo_dato",13, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // tipo_dato ::= FLOAT 
            {
              Object RESULT =null;
		RESULT = Constantes.FLOAT_VAR_PJ;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("tipo_dato",13, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // tipo_dato ::= INT 
            {
              Object RESULT =null;
		RESULT = Constantes.INT_VAR_PJ;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("tipo_dato",13, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // dato_const ::= op_aritmetica_const 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("dato_const",4, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // dato_const ::= CARACTER 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = new Simbolo(Constantes.CHAR_VAR_PJ, e);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("dato_const",4, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // dato ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		parser.msJP.errorSintax(eleft, eright, e, "Error sintactico en los datos que se asignaran. Se esperaba token: << ID | Operacion Aritmetica | Entero | Decimal >>");
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("dato",11, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // dato ::= operaciones_aritmeticas 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("dato",11, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // dato ::= CARACTER 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = new Simbolo(Constantes.CHAR_VAR_PJ, e);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("dato",11, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // cv_p ::= 
            {
              Object RESULT =null;

              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("cv_p",10, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // cv_p ::= constante cv_p 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.lista(a, e);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("cv_p",10, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // constante ::= error PUNTO_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		parser.msJP.errorSintax(eleft, eright, e, "Error sintactico en la declaracion de la constante o variable, se esperaba: << COMENTARIO || VARIABLE || CONSTANTES >> en el area de variables y constantes.");
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("constante",9, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // constante ::= instancia_constructor PUNTO_COMA 
            {
              Object RESULT =null;
		/* Ignore */
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("constante",9, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // constante ::= instancia_constructor error PUNTO_COMA 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion declaracion de instancias. Se esperaba el token: << ; >>, no el token indicado.");
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("constante",9, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // constante ::= instancia_constructor error 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion declaracion de instancias. Se esperaba el token: << ; >>, no el token indicado.");
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("constante",9, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // constante ::= error instancia_constructor PUNTO_COMA 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion declaracion de instancias. Se esperaba el token: << JAVA >>, no el token indicado.");
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("constante",9, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // constante ::= tipo_dato arreglo_const PUNTO_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		RESULT = parser.msJP.declararArreglo(e, eleft, eright, (Tipo) a);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("constante",9, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // constante ::= error COMENTARIO 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en el bloque de instrucciones. Se a recuperado jaste el token: << Comentario >>.");
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("constante",9, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // constante ::= declaracion_variables_g PUNTO_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("constante",9, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // constante ::= error CONST tipo_dato ID IGUAL dato_const PUNTO_COMA 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-6)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-6)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en el bloque de instrucciones de declaracion de constantes. Se esperaba la declaracion de una constante.");
        RESULT = parser.manejadorConstantes.declaracionConstante(new Simbolo((Tipo) e, i, a), eleft, eright);
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("constante",9, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // constante ::= CONST tipo_dato ID IGUAL dato_const error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		  
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion declaracion de constantes. Se esperaba el token: << ; >>, no el token indicado.");
        RESULT = parser.manejadorConstantes.declaracionConstante(new Simbolo((Tipo) e, i, a), eleft, eright);
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("constante",9, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // constante ::= CONST tipo_dato ID IGUAL error PUNTO_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion declaracion de constantes. Se esperaba el token: << Entero | Decimal | Operacion Aritmetica >>, no el token indicado.");
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("constante",9, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // constante ::= CONST tipo_dato ID IGUAL dato_const error PUNTO_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion declaracion de constantes. Se esperaba el token: << ; >>, no el token indicado.");
        RESULT = parser.manejadorConstantes.declaracionConstante(new Simbolo((Tipo) e, i, a), eleft, eright);
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("constante",9, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // constante ::= CONST tipo_dato ID IGUAL dato_const PUNTO_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		RESULT = parser.manejadorConstantes.declaracionConstante(new Simbolo((Tipo) e, i, a), eleft, eright);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("constante",9, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // cod_java ::= error 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la declaracion del programa. Se esperaba el token: << %%JAVA >>, no el token indicado.");
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("cod_java",7, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // cod_java ::= error COD_JAVA 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la declaracion del programa. Se esperaba el token: << %%JAVA >>, no el token indicado.");
        try {
            parser.msJP.setContadorLineas(0);
            LexicoJava lj = new LexicoJava(new StringReader((e.toString().replaceAll("%%JAVA", ""))));
            lj.setFrameCTDOA(parser.frameCTDOA);
            SintacticoJava sintacticoj = new SintacticoJava(lj);
            sintacticoj.setContadorLineas(eright);
            sintacticoj.setFrameCTDOA(parser.frameCTDOA);
            sintacticoj.parse();
        } catch( Exception ex) { 
            //ex.printStackTrace();
            parser.msJP.setContadorLineas(0);
            System.out.println(ex.toString());
            JOptionPane.showMessageDialog(null, "Errores, analizando el codigo de Java.", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
        parser.msJP.nuevoAnalisis();
        parser.msJP.setContadorLineas(0);
        ManejadorHeap mh = ManejadorHeap.getInstancia();
        mh.setPrincipal(false);
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("cod_java",7, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // cod_java ::= COD_JAVA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		
        try {
            parser.msJP.setContadorLineas(0);
            LexicoJava lj = new LexicoJava(new StringReader((e.toString().replaceAll("%%JAVA", ""))));
            lj.setFrameCTDOA(parser.frameCTDOA);
            SintacticoJava sintacticoj = new SintacticoJava(lj);
            sintacticoj.setContadorLineas(eright);
            sintacticoj.setFrameCTDOA(parser.frameCTDOA);
            sintacticoj.parse();
        } catch( Exception ex) { 
            //ex.printStackTrace();
            parser.msJP.setContadorLineas(0);
            System.out.println(ex.toString());
            JOptionPane.showMessageDialog(null, "Errores, analizando el codigo de Java.", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
        parser.msJP.nuevoAnalisis();
        parser.msJP.setContadorLineas(0);
        ManejadorHeap mh = ManejadorHeap.getInstancia();
        mh.setPrincipal(false);
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("cod_java",7, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // cod_py ::= error 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la declaracion del programa. Se esperaba el token: << %%PY >>, no el token indicado.");
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("cod_py",6, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // cod_py ::= error COD_PY 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la declaracion del programa. Se esperaba el token: << %%PY >>, no el token indicado.");
        try {
            LexicoPython lexicoPython = new LexicoPython(new StringReader(e.toString().replaceAll("%%PY", "")));
            lexicoPython.setFrameCTDOA(parser.frameCTDOA); 
            SintacticoPython sintacticoPython = new SintacticoPython(lexicoPython);
            sintacticoPython.setContadorLineas(eright);
            sintacticoPython.setFrameCTDOA(parser.frameCTDOA);
            sintacticoPython.setContadorLineas(eright);
            sintacticoPython.parse();
        } catch( Exception ex) {
            //ex.printStackTrace();
            System.out.println(ex.toString());
            JOptionPane.showMessageDialog(null, "Errores, analizando el codigo de Python.", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
        parser.msJP.setContadorLineas(0);
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("cod_py",6, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // cod_py ::= COD_PY 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		
        try {
            LexicoPython lexicoPython = new LexicoPython(new StringReader(e.toString().replaceAll("%%PY", "")));
            lexicoPython.setFrameCTDOA(parser.frameCTDOA); 
            SintacticoPython sintacticoPython = new SintacticoPython(lexicoPython);
            sintacticoPython.setContadorLineas(eright);
            sintacticoPython.setFrameCTDOA(parser.frameCTDOA);
            sintacticoPython.setContadorLineas(eright);
            sintacticoPython.parse();
        } catch( Exception ex) {
            //ex.printStackTrace();
            System.out.println(ex.toString());
            JOptionPane.showMessageDialog(null, "Errores, analizando el codigo de Python.", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
        parser.msJP.setContadorLineas(0);
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("cod_py",6, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // cod_vb ::= error 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la declaracion del programa. Se esperaba el token: << %%VB >>, no el token indicado.");
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("cod_vb",5, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // cod_vb ::= error COD_VB 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		  
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la declaracion del programa. Se esperaba el token: << %%VB >>, no el token indicado.");
        try {
            parser.msJP.setContadorLineas(0);
            LexicoVisualBasic lexicoVisualBasic = new LexicoVisualBasic(new StringReader(e.toString().replaceAll("%%VB", "")));
            lexicoVisualBasic.setFrameCTDOA(parser.frameCTDOA);
            SintacticoVisualBasic sintacticoVisualBasic = new SintacticoVisualBasic(lexicoVisualBasic);
            sintacticoVisualBasic.setFrameCTDOA(parser.frameCTDOA);
            sintacticoVisualBasic.parse();
            parser.msJP.setContadorLineas(0);
        } catch (Exception ex) {    
            parser.msJP.setContadorLineas(0);
            //ex.printStackTrace();
            System.out.println(ex.toString());
            JOptionPane.showMessageDialog(null, "Errores, analizando el codigo de Visual Basic.", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("cod_vb",5, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // cod_vb ::= COD_VB 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		        
        try {
            parser.msJP.setContadorLineas(0);
            LexicoVisualBasic lexicoVisualBasic = new LexicoVisualBasic(new StringReader(e.toString().replaceAll("%%VB", "")));
            lexicoVisualBasic.setFrameCTDOA(parser.frameCTDOA);
            SintacticoVisualBasic sintacticoVisualBasic = new SintacticoVisualBasic(lexicoVisualBasic);
            sintacticoVisualBasic.setFrameCTDOA(parser.frameCTDOA);
            sintacticoVisualBasic.parse();
            parser.msJP.setContadorLineas(0);
        } catch (Exception ex) {    
            parser.msJP.setContadorLineas(0);
            //ex.printStackTrace();
            System.out.println(ex.toString());
            JOptionPane.showMessageDialog(null, "Errores, analizando el codigo de Visual Basic.", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("cod_vb",5, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // estructura_principal ::= cod_vb cod_java cod_py PROGRAMA 
            {
              Object RESULT =null;

              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("estructura_principal",2, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ppa ::= error 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		parser.msJP.errorSintax(xleft, xright, x, "Error sintactico la estructura del programa. Se esperaba el token: << ( >>");
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("ppa",8, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ppa ::= PARENTESIS_A 
            {
              Object RESULT =null;

              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("ppa",8, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // main ::= VOID MAIN PARENTESIS_A PARENTESIS_C CORCHETE_A 
            {
              Object RESULT =null;

              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("main",1, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		parser.msJP.errorSintax(eleft, eright, e, "Error sintactico en la declaracion del programa. Se espera la estructura: << %%VB (Codigo Visual Basic) %%PY (Codigo Python) %%JAVA (Codigo Java) %%PROGRAMA (Codigo Programa)>>, vuelve a intentarlo.");
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= estructura_principal librerias_p NT$0 cv_p main estructuras_p CORCHETE_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)).value;
		
        parser.mtp.addTamanio(); 
        parser.mc.finProcedimiento(false, false);
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
parser.mtp.addP();
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("NT$0",81, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoC$parser.done_parsing();
          return CUP$SintacticoC$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

