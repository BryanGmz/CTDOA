
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Jan 08 22:47:34 CST 2021
//----------------------------------------------------

package proyectofinal.ctdoa.backend.analizador.java;

import java_cup.runtime.*;
import proyectofinal.ctdoa.backend.objetos.*;
import proyectofinal.ctdoa.backend.manejadores.*;
import java.util.ArrayList;
import java.util.List;
import proyectofinal.ctdoa.frontend.gui.FrameCTDOA;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Jan 08 22:47:34 CST 2021
  */
public class SintacticoJava extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SintacticoJava() {super();}

  /** Constructor which sets the default scanner. */
  public SintacticoJava(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoJava(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\320\000\002\002\004\000\002\002\003\000\002\005" +
    "\003\000\002\005\003\000\002\047\006\000\002\047\006" +
    "\000\002\047\007\000\002\003\005\000\002\003\004\000" +
    "\002\004\004\000\002\004\002\000\002\022\004\000\002" +
    "\023\003\000\002\010\003\000\002\010\003\000\002\016" +
    "\010\000\002\016\011\000\002\016\010\000\002\110\005" +
    "\000\002\113\004\000\002\113\002\000\002\114\004\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\007\004\000\002\007\002\000\002\011" +
    "\004\000\002\011\005\000\002\011\004\000\002\012\003" +
    "\000\002\012\003\000\002\012\004\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\017\005\000\002" +
    "\017\005\000\002\017\005\000\002\017\005\000\002\017" +
    "\005\000\002\017\004\000\002\017\003\000\002\020\005" +
    "\000\002\020\003\000\002\020\005\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\006\000\002" +
    "\020\004\000\002\020\006\000\002\020\004\000\002\020" +
    "\004\000\002\020\004\000\002\021\005\000\002\021\006" +
    "\000\002\021\005\000\002\021\004\000\002\021\004\000" +
    "\002\021\005\000\002\021\005\000\002\021\003\000\002" +
    "\024\005\000\002\024\005\000\002\024\005\000\002\024" +
    "\005\000\002\024\005\000\002\024\005\000\002\024\005" +
    "\000\002\025\003\000\002\025\003\000\002\026\003\000" +
    "\002\026\004\000\002\033\003\000\002\034\003\000\002" +
    "\027\005\000\002\027\003\000\002\027\003\000\002\030" +
    "\005\000\002\030\003\000\002\031\006\000\002\031\006" +
    "\000\002\031\006\000\002\031\003\000\002\032\005\000" +
    "\002\032\003\000\002\032\003\000\002\032\003\000\002" +
    "\036\006\000\002\036\006\000\002\036\007\000\002\036" +
    "\007\000\002\035\004\000\002\040\004\000\002\041\003" +
    "\000\002\041\003\000\002\041\003\000\002\043\003\000" +
    "\002\043\004\000\002\042\004\000\002\042\005\000\002" +
    "\060\005\000\002\060\006\000\002\060\005\000\002\060" +
    "\006\000\002\044\005\000\002\044\006\000\002\044\005" +
    "\000\002\045\003\000\002\045\003\000\002\046\004\000" +
    "\002\046\004\000\002\046\004\000\002\015\005\000\002" +
    "\015\004\000\002\015\004\000\002\015\003\000\002\051" +
    "\003\000\002\051\004\000\002\052\007\000\002\052\010" +
    "\000\002\052\010\000\002\050\005\000\002\057\004\000" +
    "\002\057\005\000\002\056\012\000\002\056\013\000\002" +
    "\056\012\000\002\063\006\000\002\063\007\000\002\063" +
    "\006\000\002\063\007\000\002\064\005\000\002\065\006" +
    "\000\002\061\005\000\002\062\005\000\002\062\006\000" +
    "\002\062\006\000\002\062\007\000\002\062\003\000\002" +
    "\073\007\000\002\073\010\000\002\074\007\000\002\075" +
    "\004\000\002\075\005\000\002\075\004\000\002\066\005" +
    "\000\002\067\005\000\002\070\005\000\002\071\004\000" +
    "\002\071\002\000\002\072\004\000\002\072\005\000\002" +
    "\076\007\000\002\076\010\000\002\077\006\000\002\100" +
    "\007\000\002\100\005\000\002\100\002\000\002\101\003" +
    "\000\002\101\004\000\002\103\005\000\002\103\006\000" +
    "\002\103\005\000\002\102\006\000\002\102\004\000\002" +
    "\037\011\000\002\037\012\000\002\104\005\000\002\105" +
    "\004\000\002\105\005\000\002\105\002\000\002\106\005" +
    "\000\002\106\006\000\002\106\003\000\002\013\011\000" +
    "\002\013\012\000\002\107\005\000\002\112\004\000\002" +
    "\112\004\000\002\112\004\000\002\112\004\000\002\112" +
    "\003\000\002\112\003\000\002\112\003\000\002\112\003" +
    "\000\002\112\003\000\002\112\004\000\002\112\004\000" +
    "\002\112\010\000\002\112\011\000\002\112\011\000\002" +
    "\112\010\000\002\112\010\000\002\112\010\000\002\112" +
    "\004\000\002\112\004\000\002\111\004\000\002\111\002" +
    "\000\002\053\006\000\002\054\004\000\002\054\003\000" +
    "\002\054\002\000\002\055\004\000\002\055\005\000\002" +
    "\055\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01c2\000\010\002\ufff7\003\006\047\011\001\002\000" +
    "\010\003\ufff5\047\ufff5\057\ufff5\001\002\000\004\002\000" +
    "\001\002\000\010\047\u01bf\051\u01bd\057\u01be\001\002\000" +
    "\010\003\165\047\160\057\uffe6\001\002\000\010\002\ufff7" +
    "\003\006\047\011\001\002\000\004\051\151\001\002\000" +
    "\016\003\uffed\011\023\012\022\013\021\047\uffed\057\uffed" +
    "\001\002\000\004\002\014\001\002\000\004\002\001\001" +
    "\002\000\006\003\030\070\026\001\002\000\010\003\ufff6" +
    "\047\ufff6\057\ufff6\001\002\000\004\054\025\001\002\000" +
    "\016\003\uffed\011\023\012\022\013\021\047\uffed\057\uffed" +
    "\001\002\000\006\003\uffdd\070\uffdd\001\002\000\006\003" +
    "\uffde\070\uffde\001\002\000\006\003\uffdf\070\uffdf\001\002" +
    "\000\010\003\uffee\047\uffee\057\uffee\001\002\000\016\003" +
    "\uffec\011\uffec\012\uffec\013\uffec\047\uffec\057\uffec\001\002" +
    "\000\012\003\143\021\144\054\uffa0\055\uffa0\001\002\000" +
    "\006\054\uff9e\055\136\001\002\000\010\054\uff9f\055\uff9f" +
    "\070\033\001\002\000\004\054\uffa3\001\002\000\006\054" +
    "\uffa1\055\uffa1\001\002\000\004\021\034\001\002\000\030" +
    "\003\046\005\054\007\047\015\036\060\051\062\055\063" +
    "\050\064\052\066\043\067\045\070\044\001\002\000\010" +
    "\003\uff93\054\uff93\055\uff93\001\002\000\016\003\067\007" +
    "\047\060\051\066\043\067\045\070\044\001\002\000\010" +
    "\003\uff92\054\uff92\055\uff92\001\002\000\046\003\uffd6\014" +
    "\uffd6\015\uffd6\016\uffd6\017\uffd6\020\uffd6\022\uffd6\023\uffd6" +
    "\024\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6\032\uffd6\033" +
    "\uffd6\054\uffd6\055\uffd6\061\uffd6\001\002\000\026\003\uffe1" +
    "\014\102\015\104\016\106\017\105\020\101\022\uffe1\054" +
    "\uffe1\055\uffe1\061\uffe1\001\002\000\006\054\uff97\055\uff97" +
    "\001\002\000\046\003\uffd2\014\uffd2\015\uffd2\016\uffd2\017" +
    "\uffd2\020\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2" +
    "\027\uffd2\030\uffd2\032\uffd2\033\uffd2\054\uffd2\055\uffd2\061" +
    "\uffd2\001\002\000\050\003\uffd4\014\uffd4\015\uffd4\016\uffd4" +
    "\017\uffd4\020\uffd4\022\uffd4\023\uffd4\024\uffd4\025\uffd4\026" +
    "\uffd4\027\uffd4\030\uffd4\032\uffd4\033\uffd4\054\uffd4\055\uffd4" +
    "\060\116\061\uffd4\001\002\000\046\003\uffd1\014\uffd1\015" +
    "\uffd1\016\uffd1\017\uffd1\020\uffd1\022\uffd1\023\uffd1\024\uffd1" +
    "\025\uffd1\026\uffd1\027\uffd1\030\uffd1\032\uffd1\033\uffd1\054" +
    "\uffd1\055\uffd1\061\uffd1\001\002\000\020\003\073\005\134" +
    "\007\075\060\076\066\070\067\074\070\071\001\002\000" +
    "\004\010\132\001\002\000\006\003\056\060\057\001\002" +
    "\000\020\003\067\007\047\015\036\060\051\066\043\067" +
    "\045\070\044\001\002\000\006\003\056\060\057\001\002" +
    "\000\046\003\uffd0\014\uffd0\015\uffd0\016\uffd0\017\uffd0\020" +
    "\uffd0\022\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0" +
    "\030\uffd0\032\uffd0\033\uffd0\054\uffd0\055\uffd0\061\uffd0\001" +
    "\002\000\014\003\uffe2\022\uffe2\054\uffe2\055\uffe2\061\uffe2" +
    "\001\002\000\006\003\056\060\057\001\002\000\012\003" +
    "\uff8b\054\uff8b\055\uff8b\061\064\001\002\000\006\004\062" +
    "\061\061\001\002\000\010\003\uff91\054\uff91\055\uff91\001" +
    "\002\000\010\003\uff8d\054\uff8d\055\uff8d\001\002\000\004" +
    "\061\063\001\002\000\010\003\uff8e\054\uff8e\055\uff8e\001" +
    "\002\000\010\003\uff8c\054\uff8c\055\uff8c\001\002\000\010" +
    "\003\uff8f\054\uff8f\055\uff8f\001\002\000\016\014\102\015" +
    "\104\016\106\017\105\020\101\061\130\001\002\000\016" +
    "\003\073\007\075\060\076\066\070\067\074\070\071\001" +
    "\002\000\046\003\uffcc\014\uffcc\015\uffcc\016\uffcc\017\uffcc" +
    "\020\uffcc\022\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc\027" +
    "\uffcc\030\uffcc\032\uffcc\033\uffcc\054\uffcc\055\uffcc\061\uffcc" +
    "\001\002\000\050\003\uffce\014\uffce\015\uffce\016\uffce\017" +
    "\uffce\020\uffce\022\uffce\023\uffce\024\uffce\025\uffce\026\uffce" +
    "\027\uffce\030\uffce\032\uffce\033\uffce\054\uffce\055\uffce\060" +
    "\116\061\uffce\001\002\000\046\003\uffca\014\uffca\015\uffca" +
    "\016\uffca\017\uffca\020\uffca\022\uffca\023\uffca\024\uffca\025" +
    "\uffca\026\uffca\027\uffca\030\uffca\032\uffca\033\uffca\054\uffca" +
    "\055\uffca\061\uffca\001\002\000\036\003\ufff3\004\ufff3\005" +
    "\ufff3\007\ufff3\011\ufff3\012\ufff3\013\ufff3\015\ufff3\031\ufff3" +
    "\060\ufff3\061\ufff3\066\ufff3\067\ufff3\070\ufff3\001\002\000" +
    "\046\003\uffcb\014\uffcb\015\uffcb\016\uffcb\017\uffcb\020\uffcb" +
    "\022\uffcb\023\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb\030" +
    "\uffcb\032\uffcb\033\uffcb\054\uffcb\055\uffcb\061\uffcb\001\002" +
    "\000\004\010\114\001\002\000\036\003\ufff4\004\ufff4\005" +
    "\ufff4\007\ufff4\011\ufff4\012\ufff4\013\ufff4\015\ufff4\031\ufff4" +
    "\060\ufff4\061\ufff4\066\ufff4\067\ufff4\070\ufff4\001\002\000" +
    "\020\003\067\007\047\015\036\060\051\066\043\067\045" +
    "\070\044\001\002\000\016\014\102\015\104\016\106\017" +
    "\105\020\101\061\103\001\002\000\020\003\067\007\047" +
    "\015\036\060\051\066\043\067\045\070\044\001\002\000" +
    "\020\003\067\007\047\015\036\060\051\066\043\067\045" +
    "\070\044\001\002\000\046\003\uffcf\014\uffcf\015\uffcf\016" +
    "\uffcf\017\uffcf\020\uffcf\022\uffcf\023\uffcf\024\uffcf\025\uffcf" +
    "\026\uffcf\027\uffcf\030\uffcf\032\uffcf\033\uffcf\054\uffcf\055" +
    "\uffcf\061\uffcf\001\002\000\020\003\067\007\047\015\036" +
    "\060\051\066\043\067\045\070\044\001\002\000\020\003" +
    "\067\007\047\015\036\060\051\066\043\067\045\070\044" +
    "\001\002\000\020\003\067\007\047\015\036\060\051\066" +
    "\043\067\045\070\044\001\002\000\046\003\uffda\014\uffda" +
    "\015\uffda\016\uffda\017\uffda\020\uffda\022\uffda\023\uffda\024" +
    "\uffda\025\uffda\026\uffda\027\uffda\030\uffda\032\uffda\033\uffda" +
    "\054\uffda\055\uffda\061\uffda\001\002\000\046\003\uffd9\014" +
    "\uffd9\015\uffd9\016\uffd9\017\uffd9\020\uffd9\022\uffd9\023\uffd9" +
    "\024\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9\032\uffd9\033" +
    "\uffd9\054\uffd9\055\uffd9\061\uffd9\001\002\000\046\003\uffdb" +
    "\014\uffdb\015\uffdb\016\106\017\105\020\101\022\uffdb\023" +
    "\uffdb\024\uffdb\025\uffdb\026\uffdb\027\uffdb\030\uffdb\032\uffdb" +
    "\033\uffdb\054\uffdb\055\uffdb\061\uffdb\001\002\000\046\003" +
    "\uffdc\014\uffdc\015\uffdc\016\106\017\105\020\101\022\uffdc" +
    "\023\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc\032" +
    "\uffdc\033\uffdc\054\uffdc\055\uffdc\061\uffdc\001\002\000\046" +
    "\003\uffd8\014\uffd8\015\uffd8\016\uffd8\017\uffd8\020\uffd8\022" +
    "\uffd8\023\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8" +
    "\032\uffd8\033\uffd8\054\uffd8\055\uffd8\061\uffd8\001\002\000" +
    "\004\070\115\001\002\000\046\003\uffcd\014\uffcd\015\uffcd" +
    "\016\uffcd\017\uffcd\020\uffcd\022\uffcd\023\uffcd\024\uffcd\025" +
    "\uffcd\026\uffcd\027\uffcd\030\uffcd\032\uffcd\033\uffcd\054\uffcd" +
    "\055\uffcd\061\uffcd\001\002\000\022\003\067\007\047\015" +
    "\036\060\051\061\uff35\066\043\067\045\070\044\001\002" +
    "\000\004\061\127\001\002\000\022\003\123\014\102\015" +
    "\104\016\106\017\105\020\101\055\121\061\uff36\001\002" +
    "\000\020\003\067\007\047\015\036\060\051\066\043\067" +
    "\045\070\044\001\002\000\006\055\124\061\uff37\001\002" +
    "\000\006\055\uff32\061\uff32\001\002\000\020\003\067\007" +
    "\047\015\036\060\051\066\043\067\045\070\044\001\002" +
    "\000\020\014\102\015\104\016\106\017\105\020\101\055" +
    "\uff33\061\uff33\001\002\000\020\014\102\015\104\016\106" +
    "\017\105\020\101\055\uff34\061\uff34\001\002\000\046\003" +
    "\uff38\014\uff38\015\uff38\016\uff38\017\uff38\020\uff38\022\uff38" +
    "\023\uff38\024\uff38\025\uff38\026\uff38\027\uff38\030\uff38\032" +
    "\uff38\033\uff38\054\uff38\055\uff38\061\uff38\001\002\000\046" +
    "\003\uffd5\014\uffd5\015\uffd5\016\uffd5\017\uffd5\020\uffd5\022" +
    "\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5" +
    "\032\uffd5\033\uffd5\054\uffd5\055\uffd5\061\uffd5\001\002\000" +
    "\010\003\uff90\054\uff90\055\uff90\001\002\000\004\070\133" +
    "\001\002\000\046\003\uffd3\014\uffd3\015\uffd3\016\uffd3\017" +
    "\uffd3\020\uffd3\022\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3" +
    "\027\uffd3\030\uffd3\032\uffd3\033\uffd3\054\uffd3\055\uffd3\061" +
    "\uffd3\001\002\000\014\003\uffe0\022\uffe0\054\uffe0\055\uffe0" +
    "\061\uffe0\001\002\000\046\003\uffd7\014\uffd7\015\uffd7\016" +
    "\uffd7\017\uffd7\020\uffd7\022\uffd7\023\uffd7\024\uffd7\025\uffd7" +
    "\026\uffd7\027\uffd7\030\uffd7\032\uffd7\033\uffd7\054\uffd7\055" +
    "\uffd7\061\uffd7\001\002\000\006\003\030\070\026\001\002" +
    "\000\006\054\uff9d\055\140\001\002\000\006\003\030\070" +
    "\026\001\002\000\006\054\uff9b\055\uff9b\001\002\000\006" +
    "\054\uff9c\055\uff9c\001\002\000\032\003\046\005\054\007" +
    "\047\015\036\021\146\060\051\062\055\063\050\064\052" +
    "\066\043\067\045\070\044\001\002\000\030\003\046\005" +
    "\054\007\047\015\036\060\051\062\055\063\050\064\052" +
    "\066\043\067\045\070\044\001\002\000\006\054\uff9a\055" +
    "\uff9a\001\002\000\030\003\046\005\054\007\047\015\036" +
    "\060\051\062\055\063\050\064\052\066\043\067\045\070" +
    "\044\001\002\000\006\054\uff98\055\uff98\001\002\000\006" +
    "\054\uff99\055\uff99\001\002\000\004\070\152\001\002\000" +
    "\006\003\154\056\155\001\002\000\016\003\ufffd\011\ufffd" +
    "\012\ufffd\013\ufffd\047\ufffd\057\ufffd\001\002\000\016\003" +
    "\ufffe\011\ufffe\012\ufffe\013\ufffe\047\ufffe\057\ufffe\001\002" +
    "\000\016\003\uffff\011\uffff\012\uffff\013\uffff\047\uffff\057" +
    "\uffff\001\002\000\004\002\ufff8\001\002\000\010\003\uffea" +
    "\047\uffea\057\uffea\001\002\000\014\011\023\012\022\013" +
    "\021\050\u01ae\070\u01ac\001\002\000\010\003\uffeb\047\uffeb" +
    "\057\uffeb\001\002\000\010\003\uffe9\047\uffe9\057\uffe9\001" +
    "\002\000\046\003\213\006\172\007\206\011\023\012\022" +
    "\013\021\034\225\035\232\037\201\040\205\043\217\045" +
    "\212\057\uff39\062\055\063\050\064\052\065\214\070\207" +
    "\001\002\000\004\057\u01a9\001\002\000\012\003\uffe8\047" +
    "\u0189\057\uffe8\070\u0188\001\002\000\010\003\165\047\160" +
    "\057\uffe6\001\002\000\046\003\213\006\172\007\206\011" +
    "\023\012\022\013\021\034\225\035\232\037\201\040\205" +
    "\043\217\045\212\057\uff39\062\055\063\050\064\052\065" +
    "\214\070\207\001\002\000\046\003\213\006\172\007\206" +
    "\011\023\012\022\013\021\034\225\035\232\037\201\040" +
    "\205\043\217\045\212\057\uff39\062\055\063\050\064\052" +
    "\065\214\070\207\001\002\000\006\003\030\070\026\001" +
    "\002\000\006\003\073\060\076\001\002\000\046\003\213" +
    "\006\172\007\206\011\023\012\022\013\021\034\225\035" +
    "\232\037\201\040\205\043\217\045\212\057\uff39\062\055" +
    "\063\050\064\052\065\214\070\207\001\002\000\054\003" +
    "\uff45\006\uff45\007\uff45\011\uff45\012\uff45\013\uff45\034\uff45" +
    "\035\uff45\036\uff45\037\uff45\040\uff45\043\uff45\044\uff45\045" +
    "\uff45\046\uff45\057\uff45\062\uff45\063\uff45\064\uff45\065\uff45" +
    "\070\uff45\001\002\000\004\054\u017e\001\002\000\006\003" +
    "\u0170\070\u016f\001\002\000\004\046\u015f\001\002\000\046" +
    "\003\213\006\172\007\206\011\023\012\022\013\021\034" +
    "\225\035\232\037\201\040\205\043\217\045\212\057\uff39" +
    "\062\055\063\050\064\052\065\214\070\207\001\002\000" +
    "\006\003\073\060\076\001\002\000\004\054\u0145\001\002" +
    "\000\004\054\u0144\001\002\000\004\054\u0143\001\002\000" +
    "\006\003\073\060\076\001\002\000\004\010\u0135\001\002" +
    "\000\010\003\u0131\021\u0132\060\116\001\002\000\004\057" +
    "\u0130\001\002\000\004\054\u012f\001\002\000\022\003\046" +
    "\005\054\007\047\015\036\060\051\066\043\067\045\070" +
    "\044\001\002\000\050\003\046\005\054\006\372\007\373" +
    "\010\363\015\036\034\364\035\374\037\u0100\040\370\043" +
    "\367\045\365\054\376\057\377\060\051\065\375\066\043" +
    "\067\045\070\371\001\002\000\006\003\073\060\076\001" +
    "\002\000\046\003\213\006\172\007\206\011\023\012\022" +
    "\013\021\034\225\035\232\037\201\040\205\043\217\045" +
    "\212\057\uff39\062\055\063\050\064\052\065\214\070\207" +
    "\001\002\000\054\003\uff46\006\uff46\007\uff46\011\uff46\012" +
    "\uff46\013\uff46\034\uff46\035\uff46\036\uff46\037\uff46\040\uff46" +
    "\043\uff46\044\uff46\045\uff46\046\uff46\057\uff46\062\uff46\063" +
    "\uff46\064\uff46\065\uff46\070\uff46\001\002\000\006\003\073" +
    "\060\076\001\002\000\054\003\uff49\006\uff49\007\uff49\011" +
    "\uff49\012\uff49\013\uff49\034\uff49\035\uff49\036\uff49\037\uff49" +
    "\040\uff49\043\uff49\044\uff49\045\uff49\046\uff49\057\uff49\062" +
    "\uff49\063\uff49\064\uff49\065\uff49\070\uff49\001\002\000\060" +
    "\003\uff69\006\uff69\007\uff69\011\uff69\012\uff69\013\uff69\034" +
    "\uff69\035\uff69\036\uff69\037\uff69\040\uff69\041\322\042\uff69" +
    "\043\uff69\044\uff69\045\uff69\046\uff69\057\uff69\062\uff69\063" +
    "\uff69\064\uff69\065\uff69\070\uff69\001\002\000\046\003\213" +
    "\006\172\007\206\011\023\012\022\013\021\034\225\035" +
    "\232\037\201\040\205\043\217\045\212\057\uff39\062\055" +
    "\063\050\064\052\065\214\070\207\001\002\000\006\003" +
    "\305\060\076\001\002\000\054\003\uff47\006\uff47\007\uff47" +
    "\011\uff47\012\uff47\013\uff47\034\uff47\035\uff47\036\uff47\037" +
    "\uff47\040\uff47\043\uff47\044\uff47\045\uff47\046\uff47\057\uff47" +
    "\062\uff47\063\uff47\064\uff47\065\uff47\070\uff47\001\002\000" +
    "\006\003\uff8a\060\uff8a\001\002\000\054\003\uff48\006\uff48" +
    "\007\uff48\011\uff48\012\uff48\013\uff48\034\uff48\035\uff48\036" +
    "\uff48\037\uff48\040\uff48\043\uff48\044\uff48\045\uff48\046\uff48" +
    "\057\uff48\062\uff48\063\uff48\064\uff48\065\uff48\070\uff48\001" +
    "\002\000\024\003\245\005\242\007\047\015\036\031\240" +
    "\060\051\066\043\067\045\070\044\001\002\000\004\054" +
    "\235\001\002\000\054\003\213\006\172\007\206\011\023" +
    "\012\022\013\021\034\225\035\232\036\uff39\037\201\040" +
    "\205\043\217\044\uff39\045\212\046\uff39\057\uff39\062\055" +
    "\063\050\064\052\065\214\070\207\001\002\000\004\056" +
    "\233\001\002\000\046\003\uff84\006\uff84\007\uff84\011\uff84" +
    "\012\uff84\013\uff84\034\uff84\035\uff84\037\uff84\040\uff84\043" +
    "\uff84\045\uff84\057\uff84\062\uff84\063\uff84\064\uff84\065\uff84" +
    "\070\uff84\001\002\000\012\036\uff3a\044\uff3a\046\uff3a\057" +
    "\uff3a\001\002\000\054\003\uff43\006\uff43\007\uff43\011\uff43" +
    "\012\uff43\013\uff43\034\uff43\035\uff43\036\uff43\037\uff43\040" +
    "\uff43\043\uff43\044\uff43\045\uff43\046\uff43\057\uff43\062\uff43" +
    "\063\uff43\064\uff43\065\uff43\070\uff43\001\002\000\012\032" +
    "\uffb0\033\uffb0\054\uffb0\061\uffb0\001\002\000\042\003\uffba" +
    "\014\102\015\104\016\106\017\105\020\101\023\uffba\024" +
    "\uffba\025\uffba\026\uffba\027\uffba\030\uffba\032\uffba\033\uffba" +
    "\054\uffba\061\uffba\001\002\000\006\003\073\060\076\001" +
    "\002\000\012\032\uffac\033\uffac\054\uffac\061\uffac\001\002" +
    "\000\030\003\uffb9\023\uffb9\024\uffb9\025\uffb9\026\uffb9\027" +
    "\uffb9\030\uffb9\032\uffb9\033\uffb9\054\uffb9\061\uffb9\001\002" +
    "\000\004\054\276\001\002\000\010\033\273\054\uffb8\061" +
    "\uffb8\001\002\000\026\003\073\007\075\033\uffb2\054\uffb2" +
    "\057\271\060\076\061\uffb2\066\070\067\074\070\071\001" +
    "\002\000\012\032\266\033\uffb3\054\uffb3\061\uffb3\001\002" +
    "\000\020\003\251\023\250\024\252\025\253\026\255\027" +
    "\254\030\256\001\002\000\022\003\067\005\242\007\047" +
    "\015\036\060\051\066\043\067\045\070\044\001\002\000" +
    "\022\003\067\005\242\007\047\015\036\060\051\066\043" +
    "\067\045\070\044\001\002\000\022\003\067\005\242\007" +
    "\047\015\036\060\051\066\043\067\045\070\044\001\002" +
    "\000\022\003\067\005\242\007\047\015\036\060\051\066" +
    "\043\067\045\070\044\001\002\000\022\003\067\005\242" +
    "\007\047\015\036\060\051\066\043\067\045\070\044\001" +
    "\002\000\022\003\067\005\242\007\047\015\036\060\051" +
    "\066\043\067\045\070\044\001\002\000\022\003\067\005" +
    "\242\007\047\015\036\060\051\066\043\067\045\070\044" +
    "\001\002\000\014\003\uffbc\032\uffbc\033\uffbc\054\uffbc\061" +
    "\uffbc\001\002\000\014\003\uffbd\032\uffbd\033\uffbd\054\uffbd" +
    "\061\uffbd\001\002\000\014\003\uffbe\032\uffbe\033\uffbe\054" +
    "\uffbe\061\uffbe\001\002\000\014\003\uffbf\032\uffbf\033\uffbf" +
    "\054\uffbf\061\uffbf\001\002\000\014\003\uffc0\032\uffc0\033" +
    "\uffc0\054\uffc0\061\uffc0\001\002\000\014\003\uffbb\032\uffbb" +
    "\033\uffbb\054\uffbb\061\uffbb\001\002\000\014\003\uffc1\032" +
    "\uffc1\033\uffc1\054\uffc1\061\uffc1\001\002\000\024\003\uffb6" +
    "\005\uffb6\007\uffb6\015\uffb6\031\uffb6\060\uffb6\066\uffb6\067" +
    "\uffb6\070\uffb6\001\002\000\024\003\067\005\242\007\047" +
    "\015\036\031\240\060\051\066\043\067\045\070\044\001" +
    "\002\000\012\032\266\033\uffb1\054\uffb1\061\uffb1\001\002" +
    "\000\006\054\uffb7\061\uffb7\001\002\000\024\003\275\005" +
    "\242\007\047\015\036\031\240\060\051\066\043\067\045" +
    "\070\044\001\002\000\024\003\uffb5\005\uffb5\007\uffb5\015" +
    "\uffb5\031\uffb5\060\uffb5\066\uffb5\067\uffb5\070\uffb5\001\002" +
    "\000\010\033\273\054\uffb4\061\uffb4\001\002\000\024\003" +
    "\073\007\075\033\uffb2\054\uffb2\060\076\061\uffb2\066\070" +
    "\067\074\070\071\001\002\000\006\003\uff7b\070\uff7b\001" +
    "\002\000\022\003\301\005\242\007\047\015\036\060\051" +
    "\066\043\067\045\070\044\001\002\000\006\003\303\061" +
    "\304\001\002\000\020\003\073\007\075\060\076\061\302" +
    "\066\070\067\074\070\071\001\002\000\012\032\uffad\033" +
    "\uffad\054\uffad\061\uffad\001\002\000\012\032\uffae\033\uffae" +
    "\054\uffae\061\uffae\001\002\000\012\032\uffaf\033\uffaf\054" +
    "\uffaf\061\uffaf\001\002\000\024\003\ufff3\005\ufff3\007\ufff3" +
    "\015\ufff3\031\ufff3\060\314\066\ufff3\067\ufff3\070\ufff3\001" +
    "\002\000\024\003\245\005\242\007\047\015\036\031\240" +
    "\060\051\066\043\067\045\070\044\001\002\000\004\061" +
    "\310\001\002\000\006\003\311\056\312\001\002\000\004" +
    "\056\313\001\002\000\046\003\uff88\006\uff88\007\uff88\011" +
    "\uff88\012\uff88\013\uff88\034\uff88\035\uff88\037\uff88\040\uff88" +
    "\043\uff88\045\uff88\057\uff88\062\uff88\063\uff88\064\uff88\065" +
    "\uff88\070\uff88\001\002\000\046\003\uff86\006\uff86\007\uff86" +
    "\011\uff86\012\uff86\013\uff86\034\uff86\035\uff86\037\uff86\040" +
    "\uff86\043\uff86\045\uff86\057\uff86\062\uff86\063\uff86\064\uff86" +
    "\065\uff86\070\uff86\001\002\000\024\003\245\005\242\007" +
    "\047\015\036\031\240\060\051\066\043\067\045\070\044" +
    "\001\002\000\004\061\316\001\002\000\004\056\317\001" +
    "\002\000\046\003\uff87\006\uff87\007\uff87\011\uff87\012\uff87" +
    "\013\uff87\034\uff87\035\uff87\037\uff87\040\uff87\043\uff87\045" +
    "\uff87\057\uff87\062\uff87\063\uff87\064\uff87\065\uff87\070\uff87" +
    "\001\002\000\004\057\321\001\002\000\054\003\uff85\006" +
    "\uff85\007\uff85\011\uff85\012\uff85\013\uff85\034\uff85\035\uff85" +
    "\036\uff85\037\uff85\040\uff85\043\uff85\044\uff85\045\uff85\046" +
    "\uff85\057\uff85\062\uff85\063\uff85\064\uff85\065\uff85\070\uff85" +
    "\001\002\000\006\003\073\060\076\001\002\000\056\003" +
    "\uff68\006\uff68\007\uff68\011\uff68\012\uff68\013\uff68\034\uff68" +
    "\035\uff68\036\uff68\037\uff68\040\uff68\042\332\043\uff68\044" +
    "\uff68\045\uff68\046\uff68\057\uff68\062\uff68\063\uff68\064\uff68" +
    "\065\uff68\070\uff68\001\002\000\060\003\uff69\006\uff69\007" +
    "\uff69\011\uff69\012\uff69\013\uff69\034\uff69\035\uff69\036\uff69" +
    "\037\uff69\040\uff69\041\322\042\uff69\043\uff69\044\uff69\045" +
    "\uff69\046\uff69\057\uff69\062\uff69\063\uff69\064\uff69\065\uff69" +
    "\070\uff69\001\002\000\046\003\213\006\172\007\206\011" +
    "\023\012\022\013\021\034\225\035\232\037\201\040\205" +
    "\043\217\045\212\057\uff39\062\055\063\050\064\052\065" +
    "\214\070\207\001\002\000\004\057\327\001\002\000\060" +
    "\003\uff6b\006\uff6b\007\uff6b\011\uff6b\012\uff6b\013\uff6b\034" +
    "\uff6b\035\uff6b\036\uff6b\037\uff6b\040\uff6b\041\uff6b\042\uff6b" +
    "\043\uff6b\044\uff6b\045\uff6b\046\uff6b\057\uff6b\062\uff6b\063" +
    "\uff6b\064\uff6b\065\uff6b\070\uff6b\001\002\000\056\003\uff6a" +
    "\006\uff6a\007\uff6a\011\uff6a\012\uff6a\013\uff6a\034\uff6a\035" +
    "\uff6a\036\uff6a\037\uff6a\040\uff6a\042\uff6a\043\uff6a\044\uff6a" +
    "\045\uff6a\046\uff6a\057\uff6a\062\uff6a\063\uff6a\064\uff6a\065" +
    "\uff6a\070\uff6a\001\002\000\046\003\213\006\172\007\206" +
    "\011\023\012\022\013\021\034\225\035\232\037\201\040" +
    "\205\043\217\045\212\057\uff39\062\055\063\050\064\052" +
    "\065\214\070\207\001\002\000\006\003\334\056\335\001" +
    "\002\000\054\003\uff67\006\uff67\007\uff67\011\uff67\012\uff67" +
    "\013\uff67\034\uff67\035\uff67\036\uff67\037\uff67\040\uff67\043" +
    "\uff67\044\uff67\045\uff67\046\uff67\057\uff67\062\uff67\063\uff67" +
    "\064\uff67\065\uff67\070\uff67\001\002\000\050\003\uff6e\006" +
    "\uff6e\007\uff6e\011\uff6e\012\uff6e\013\uff6e\034\uff6e\035\uff6e" +
    "\037\uff6e\040\uff6e\043\uff6e\045\uff6e\056\336\057\uff6e\062" +
    "\uff6e\063\uff6e\064\uff6e\065\uff6e\070\uff6e\001\002\000\046" +
    "\003\uff70\006\uff70\007\uff70\011\uff70\012\uff70\013\uff70\034" +
    "\uff70\035\uff70\037\uff70\040\uff70\043\uff70\045\uff70\057\uff70" +
    "\062\uff70\063\uff70\064\uff70\065\uff70\070\uff70\001\002\000" +
    "\046\003\uff6f\006\uff6f\007\uff6f\011\uff6f\012\uff6f\013\uff6f" +
    "\034\uff6f\035\uff6f\037\uff6f\040\uff6f\043\uff6f\045\uff6f\057" +
    "\uff6f\062\uff6f\063\uff6f\064\uff6f\065\uff6f\070\uff6f\001\002" +
    "\000\004\057\340\001\002\000\054\003\uff6c\006\uff6c\007" +
    "\uff6c\011\uff6c\012\uff6c\013\uff6c\034\uff6c\035\uff6c\036\uff6c" +
    "\037\uff6c\040\uff6c\043\uff6c\044\uff6c\045\uff6c\046\uff6c\057" +
    "\uff6c\062\uff6c\063\uff6c\064\uff6c\065\uff6c\070\uff6c\001\002" +
    "\000\024\003\245\005\242\007\047\015\036\031\240\060" +
    "\051\066\043\067\045\070\044\001\002\000\004\061\343" +
    "\001\002\000\004\056\344\001\002\000\046\003\uff71\006" +
    "\uff71\007\uff71\011\uff71\012\uff71\013\uff71\034\uff71\035\uff71" +
    "\037\uff71\040\uff71\043\uff71\045\uff71\057\uff71\062\uff71\063" +
    "\uff71\064\uff71\065\uff71\070\uff71\001\002\000\022\003\046" +
    "\005\054\007\047\015\036\060\051\066\043\067\045\070" +
    "\044\001\002\000\004\061\347\001\002\000\004\056\350" +
    "\001\002\000\004\046\uff66\001\002\000\004\057\352\001" +
    "\002\000\060\003\uff6d\006\uff6d\007\uff6d\011\uff6d\012\uff6d" +
    "\013\uff6d\034\uff6d\035\uff6d\036\uff6d\037\uff6d\040\uff6d\041" +
    "\uff6d\042\uff6d\043\uff6d\044\uff6d\045\uff6d\046\uff6d\057\uff6d" +
    "\062\uff6d\063\uff6d\064\uff6d\065\uff6d\070\uff6d\001\002\000" +
    "\020\003\356\004\354\007\047\060\051\066\043\067\045" +
    "\070\044\001\002\000\006\014\uffaa\061\uffaa\001\002\000" +
    "\006\014\uffa9\061\uffa9\001\002\000\022\003\073\007\075" +
    "\014\uffa8\060\076\061\uffa8\066\070\067\074\070\071\001" +
    "\002\000\006\014\360\061\361\001\002\000\020\003\356" +
    "\004\354\007\047\060\051\066\043\067\045\070\044\001" +
    "\002\000\004\054\uffa6\001\002\000\006\014\uffab\061\uffab" +
    "\001\002\000\004\070\u012a\001\002\000\006\003\uff89\060" +
    "\uff89\001\002\000\022\003\046\005\054\007\047\015\036" +
    "\060\051\066\043\067\045\070\044\001\002\000\004\054" +
    "\uffe3\001\002\000\006\003\073\060\076\001\002\000\006" +
    "\003\073\060\076\001\002\000\022\014\uffd4\015\uffd4\016" +
    "\uffd4\017\uffd4\020\uffd4\021\u011f\054\uffd4\060\116\001\002" +
    "\000\006\003\073\060\076\001\002\000\004\010\u0117\001" +
    "\002\000\004\056\u0116\001\002\000\006\003\073\060\076" +
    "\001\002\000\054\003\uff3c\006\uff3c\007\uff3c\011\uff3c\012" +
    "\uff3c\013\uff3c\034\uff3c\035\uff3c\036\uff3c\037\uff3c\040\uff3c" +
    "\043\uff3c\044\uff3c\045\uff3c\046\uff3c\057\uff3c\062\uff3c\063" +
    "\uff3c\064\uff3c\065\uff3c\070\uff3c\001\002\000\054\003\uff3b" +
    "\006\uff3b\007\uff3b\011\uff3b\012\uff3b\013\uff3b\034\uff3b\035" +
    "\uff3b\036\uff3b\037\uff3b\040\uff3b\043\uff3b\044\uff3b\045\uff3b" +
    "\046\uff3b\057\uff3b\062\uff3b\063\uff3b\064\uff3b\065\uff3b\070" +
    "\uff3b\001\002\000\006\003\073\060\076\001\002\000\014" +
    "\003\u0105\011\023\012\022\013\021\070\u0102\001\002\000" +
    "\004\021\u0111\001\002\000\004\070\u010e\001\002\000\004" +
    "\054\u010d\001\002\000\016\003\uff74\011\023\012\022\013" +
    "\021\054\uff74\070\u0106\001\002\000\004\021\u010b\001\002" +
    "\000\004\070\u0108\001\002\000\004\021\u0109\001\002\000" +
    "\022\003\046\005\054\007\047\015\036\060\051\066\043" +
    "\067\045\070\044\001\002\000\006\003\uff75\054\uff75\001" +
    "\002\000\020\003\067\007\047\015\036\060\051\066\043" +
    "\067\045\070\044\001\002\000\020\003\uff76\014\102\015" +
    "\104\016\106\017\105\020\101\054\uff76\001\002\000\024" +
    "\003\uff7c\005\uff7c\007\uff7c\015\uff7c\031\uff7c\060\uff7c\066" +
    "\uff7c\067\uff7c\070\uff7c\001\002\000\004\021\u010f\001\002" +
    "\000\022\003\046\005\054\007\047\015\036\060\051\066" +
    "\043\067\045\070\044\001\002\000\006\003\uff77\054\uff77" +
    "\001\002\000\020\003\067\007\047\015\036\060\051\066" +
    "\043\067\045\070\044\001\002\000\020\003\uff78\014\102" +
    "\015\104\016\106\017\105\020\101\054\uff78\001\002\000" +
    "\020\003\356\004\354\007\047\060\051\066\043\067\045" +
    "\070\044\001\002\000\006\014\360\061\u0115\001\002\000" +
    "\004\054\uffa4\001\002\000\046\003\uff83\006\uff83\007\uff83" +
    "\011\uff83\012\uff83\013\uff83\034\uff83\035\uff83\037\uff83\040" +
    "\uff83\043\uff83\045\uff83\057\uff83\062\uff83\063\uff83\064\uff83" +
    "\065\uff83\070\uff83\001\002\000\004\070\u0118\001\002\000" +
    "\020\014\uffd3\015\uffd3\016\uffd3\017\uffd3\020\uffd3\021\u0119" +
    "\054\uffd3\001\002\000\030\003\046\005\054\007\047\015" +
    "\036\060\051\062\055\063\050\064\052\066\043\067\045" +
    "\070\044\001\002\000\004\054\u011b\001\002\000\054\003" +
    "\uff41\006\uff41\007\uff41\011\uff41\012\uff41\013\uff41\034\uff41" +
    "\035\uff41\036\uff41\037\uff41\040\uff41\043\uff41\044\uff41\045" +
    "\uff41\046\uff41\057\uff41\062\uff41\063\uff41\064\uff41\065\uff41" +
    "\070\uff41\001\002\000\020\003\356\004\354\007\047\060" +
    "\051\066\043\067\045\070\044\001\002\000\006\014\360" +
    "\061\u011e\001\002\000\004\054\uffa5\001\002\000\030\003" +
    "\046\005\054\007\047\015\036\060\051\062\055\063\050" +
    "\064\052\066\043\067\045\070\044\001\002\000\004\054" +
    "\uff95\001\002\000\024\003\245\005\242\007\047\015\036" +
    "\031\240\060\051\066\043\067\045\070\044\001\002\000" +
    "\004\061\u0123\001\002\000\004\056\u0124\001\002\000\046" +
    "\003\uff72\006\uff72\007\uff72\011\uff72\012\uff72\013\uff72\034" +
    "\uff72\035\uff72\037\uff72\040\uff72\043\uff72\045\uff72\057\uff72" +
    "\062\uff72\063\uff72\064\uff72\065\uff72\070\uff72\001\002\000" +
    "\022\003\046\005\054\007\047\015\036\060\051\066\043" +
    "\067\045\070\044\001\002\000\004\061\u0127\001\002\000" +
    "\004\056\u0128\001\002\000\004\046\uff65\001\002\000\004" +
    "\054\uffe4\001\002\000\004\021\u012b\001\002\000\030\003" +
    "\046\005\054\007\047\015\036\060\051\062\055\063\050" +
    "\064\052\066\043\067\045\070\044\001\002\000\004\054" +
    "\u012d\001\002\000\054\003\uff3e\006\uff3e\007\uff3e\011\uff3e" +
    "\012\uff3e\013\uff3e\034\uff3e\035\uff3e\036\uff3e\037\uff3e\040" +
    "\uff3e\043\uff3e\044\uff3e\045\uff3e\046\uff3e\057\uff3e\062\uff3e" +
    "\063\uff3e\064\uff3e\065\uff3e\070\uff3e\001\002\000\004\054" +
    "\uffe5\001\002\000\054\003\uff4a\006\uff4a\007\uff4a\011\uff4a" +
    "\012\uff4a\013\uff4a\034\uff4a\035\uff4a\036\uff4a\037\uff4a\040" +
    "\uff4a\043\uff4a\044\uff4a\045\uff4a\046\uff4a\057\uff4a\062\uff4a" +
    "\063\uff4a\064\uff4a\065\uff4a\070\uff4a\001\002\000\010\003" +
    "\uffef\047\uffef\057\uffef\001\002\000\030\003\046\005\054" +
    "\007\047\015\036\060\051\062\055\063\050\064\052\066" +
    "\043\067\045\070\044\001\002\000\030\003\046\005\054" +
    "\007\047\015\036\060\051\062\055\063\050\064\052\066" +
    "\043\067\045\070\044\001\002\000\004\054\uff96\001\002" +
    "\000\004\054\uff94\001\002\000\004\070\u0136\001\002\000" +
    "\006\003\u0137\021\u0138\001\002\000\030\003\046\005\054" +
    "\007\047\015\036\060\051\062\055\063\050\064\052\066" +
    "\043\067\045\070\044\001\002\000\030\003\046\005\054" +
    "\007\047\015\036\060\051\062\055\063\050\064\052\066" +
    "\043\067\045\070\044\001\002\000\006\003\u013a\054\u013b" +
    "\001\002\000\056\003\uff3d\006\uff3d\007\uff3d\011\uff3d\012" +
    "\uff3d\013\uff3d\034\uff3d\035\uff3d\036\uff3d\037\uff3d\040\uff3d" +
    "\043\uff3d\044\uff3d\045\uff3d\046\uff3d\054\u013c\057\uff3d\062" +
    "\uff3d\063\uff3d\064\uff3d\065\uff3d\070\uff3d\001\002\000\054" +
    "\003\uff42\006\uff42\007\uff42\011\uff42\012\uff42\013\uff42\034" +
    "\uff42\035\uff42\036\uff42\037\uff42\040\uff42\043\uff42\044\uff42" +
    "\045\uff42\046\uff42\057\uff42\062\uff42\063\uff42\064\uff42\065" +
    "\uff42\070\uff42\001\002\000\054\003\uff40\006\uff40\007\uff40" +
    "\011\uff40\012\uff40\013\uff40\034\uff40\035\uff40\036\uff40\037" +
    "\uff40\040\uff40\043\uff40\044\uff40\045\uff40\046\uff40\057\uff40" +
    "\062\uff40\063\uff40\064\uff40\065\uff40\070\uff40\001\002\000" +
    "\004\054\u013e\001\002\000\054\003\uff3f\006\uff3f\007\uff3f" +
    "\011\uff3f\012\uff3f\013\uff3f\034\uff3f\035\uff3f\036\uff3f\037" +
    "\uff3f\040\uff3f\043\uff3f\044\uff3f\045\uff3f\046\uff3f\057\uff3f" +
    "\062\uff3f\063\uff3f\064\uff3f\065\uff3f\070\uff3f\001\002\000" +
    "\024\003\245\005\242\007\047\015\036\031\240\060\051" +
    "\066\043\067\045\070\044\001\002\000\004\061\u0141\001" +
    "\002\000\004\056\u0142\001\002\000\046\003\uff73\006\uff73" +
    "\007\uff73\011\uff73\012\uff73\013\uff73\034\uff73\035\uff73\037" +
    "\uff73\040\uff73\043\uff73\045\uff73\057\uff73\062\uff73\063\uff73" +
    "\064\uff73\065\uff73\070\uff73\001\002\000\054\003\uff44\006" +
    "\uff44\007\uff44\011\uff44\012\uff44\013\uff44\034\uff44\035\uff44" +
    "\036\uff44\037\uff44\040\uff44\043\uff44\044\uff44\045\uff44\046" +
    "\uff44\057\uff44\062\uff44\063\uff44\064\uff44\065\uff44\070\uff44" +
    "\001\002\000\054\003\uff4b\006\uff4b\007\uff4b\011\uff4b\012" +
    "\uff4b\013\uff4b\034\uff4b\035\uff4b\036\uff4b\037\uff4b\040\uff4b" +
    "\043\uff4b\044\uff4b\045\uff4b\046\uff4b\057\uff4b\062\uff4b\063" +
    "\uff4b\064\uff4b\065\uff4b\070\uff4b\001\002\000\054\003\uff4d" +
    "\006\uff4d\007\uff4d\011\uff4d\012\uff4d\013\uff4d\034\uff4d\035" +
    "\uff4d\036\uff4d\037\uff4d\040\uff4d\043\uff4d\044\uff4d\045\uff4d" +
    "\046\uff4d\057\uff4d\062\uff4d\063\uff4d\064\uff4d\065\uff4d\070" +
    "\uff4d\001\002\000\014\003\u0105\011\023\012\022\013\021" +
    "\070\u0102\001\002\000\006\003\u0148\054\u0149\001\002\000" +
    "\026\003\uff7d\005\uff7d\007\uff7d\015\uff7d\031\uff7d\054\u014a" +
    "\060\uff7d\066\uff7d\067\uff7d\070\uff7d\001\002\000\024\003" +
    "\uff7f\005\uff7f\007\uff7f\015\uff7f\031\uff7f\060\uff7f\066\uff7f" +
    "\067\uff7f\070\uff7f\001\002\000\024\003\uff7e\005\uff7e\007" +
    "\uff7e\015\uff7e\031\uff7e\060\uff7e\066\uff7e\067\uff7e\070\uff7e" +
    "\001\002\000\004\057\u014c\001\002\000\006\003\u014d\034" +
    "\u014e\001\002\000\006\034\u0154\060\u0153\001\002\000\004" +
    "\060\u014f\001\002\000\024\003\245\005\242\007\047\015" +
    "\036\031\240\060\051\066\043\067\045\070\044\001\002" +
    "\000\004\061\u0151\001\002\000\004\054\u0152\001\002\000" +
    "\054\003\uff82\006\uff82\007\uff82\011\uff82\012\uff82\013\uff82" +
    "\034\uff82\035\uff82\036\uff82\037\uff82\040\uff82\043\uff82\044" +
    "\uff82\045\uff82\046\uff82\057\uff82\062\uff82\063\uff82\064\uff82" +
    "\065\uff82\070\uff82\001\002\000\024\003\245\005\242\007" +
    "\047\015\036\031\240\060\051\066\043\067\045\070\044" +
    "\001\002\000\004\060\u0155\001\002\000\024\003\245\005" +
    "\242\007\047\015\036\031\240\060\051\066\043\067\045" +
    "\070\044\001\002\000\004\061\u0157\001\002\000\004\054" +
    "\u0158\001\002\000\054\003\uff81\006\uff81\007\uff81\011\uff81" +
    "\012\uff81\013\uff81\034\uff81\035\uff81\036\uff81\037\uff81\040" +
    "\uff81\043\uff81\044\uff81\045\uff81\046\uff81\057\uff81\062\uff81" +
    "\063\uff81\064\uff81\065\uff81\070\uff81\001\002\000\004\061" +
    "\u015a\001\002\000\004\054\u015b\001\002\000\054\003\uff80" +
    "\006\uff80\007\uff80\011\uff80\012\uff80\013\uff80\034\uff80\035" +
    "\uff80\036\uff80\037\uff80\040\uff80\043\uff80\044\uff80\045\uff80" +
    "\046\uff80\057\uff80\062\uff80\063\uff80\064\uff80\065\uff80\070" +
    "\uff80\001\002\000\006\044\u0168\057\uff61\001\002\000\054" +
    "\003\213\006\172\007\206\011\023\012\022\013\021\034" +
    "\225\035\232\036\uff39\037\201\040\205\043\217\044\uff39" +
    "\045\212\046\uff39\057\uff39\062\055\063\050\064\052\065" +
    "\214\070\207\001\002\000\010\044\uff60\046\u015f\057\uff60" +
    "\001\002\000\022\003\046\005\054\007\047\015\036\060" +
    "\051\066\043\067\045\070\044\001\002\000\006\003\u0161" +
    "\022\u0162\001\002\000\056\003\uff5c\006\uff5c\007\uff5c\011" +
    "\uff5c\012\uff5c\013\uff5c\022\u0163\034\uff5c\035\uff5c\036\uff5c" +
    "\037\uff5c\040\uff5c\043\uff5c\044\uff5c\045\uff5c\046\uff5c\057" +
    "\uff5c\062\uff5c\063\uff5c\064\uff5c\065\uff5c\070\uff5c\001\002" +
    "\000\054\003\uff5e\006\uff5e\007\uff5e\011\uff5e\012\uff5e\013" +
    "\uff5e\034\uff5e\035\uff5e\036\uff5e\037\uff5e\040\uff5e\043\uff5e" +
    "\044\uff5e\045\uff5e\046\uff5e\057\uff5e\062\uff5e\063\uff5e\064" +
    "\uff5e\065\uff5e\070\uff5e\001\002\000\054\003\uff5d\006\uff5d" +
    "\007\uff5d\011\uff5d\012\uff5d\013\uff5d\034\uff5d\035\uff5d\036" +
    "\uff5d\037\uff5d\040\uff5d\043\uff5d\044\uff5d\045\uff5d\046\uff5d" +
    "\057\uff5d\062\uff5d\063\uff5d\064\uff5d\065\uff5d\070\uff5d\001" +
    "\002\000\006\044\uff5f\057\uff5f\001\002\000\012\036\u0166" +
    "\044\uff5a\046\uff5a\057\uff5a\001\002\000\004\054\u0167\001" +
    "\002\000\010\044\uff5b\046\uff5b\057\uff5b\001\002\000\004" +
    "\022\u016b\001\002\000\004\057\u016a\001\002\000\054\003" +
    "\uff64\006\uff64\007\uff64\011\uff64\012\uff64\013\uff64\034\uff64" +
    "\035\uff64\036\uff64\037\uff64\040\uff64\043\uff64\044\uff64\045" +
    "\uff64\046\uff64\057\uff64\062\uff64\063\uff64\064\uff64\065\uff64" +
    "\070\uff64\001\002\000\050\003\213\006\172\007\206\011" +
    "\023\012\022\013\021\034\225\035\232\036\uff39\037\201" +
    "\040\205\043\217\045\212\057\uff39\062\055\063\050\064" +
    "\052\065\214\070\207\001\002\000\006\036\u016d\057\uff62" +
    "\001\002\000\004\054\u016e\001\002\000\004\057\uff63\001" +
    "\002\000\010\021\u017a\052\u017b\053\u0179\001\002\000\006" +
    "\061\uffc2\070\u0174\001\002\000\004\061\u0172\001\002\000" +
    "\004\056\u0173\001\002\000\046\003\uff7a\006\uff7a\007\uff7a" +
    "\011\uff7a\012\uff7a\013\uff7a\034\uff7a\035\uff7a\037\uff7a\040" +
    "\uff7a\043\uff7a\045\uff7a\057\uff7a\062\uff7a\063\uff7a\064\uff7a" +
    "\065\uff7a\070\uff7a\001\002\000\010\021\u0176\052\u0177\053" +
    "\u0175\001\002\000\004\061\uffc3\001\002\000\020\003\067" +
    "\007\047\015\036\060\051\066\043\067\045\070\044\001" +
    "\002\000\004\061\uffc4\001\002\000\016\014\102\015\104" +
    "\016\106\017\105\020\101\061\uffc8\001\002\000\004\061" +
    "\uffc5\001\002\000\020\003\u017d\007\047\015\036\060\051" +
    "\066\043\067\045\070\044\001\002\000\004\061\uffc6\001" +
    "\002\000\016\014\102\015\104\016\106\017\105\020\101" +
    "\061\uffc9\001\002\000\020\003\073\007\075\060\076\061" +
    "\uffc7\066\070\067\074\070\071\001\002\000\054\003\uff4c" +
    "\006\uff4c\007\uff4c\011\uff4c\012\uff4c\013\uff4c\034\uff4c\035" +
    "\uff4c\036\uff4c\037\uff4c\040\uff4c\043\uff4c\044\uff4c\045\uff4c" +
    "\046\uff4c\057\uff4c\062\uff4c\063\uff4c\064\uff4c\065\uff4c\070" +
    "\uff4c\001\002\000\004\057\u0180\001\002\000\054\003\uff79" +
    "\006\uff79\007\uff79\011\uff79\012\uff79\013\uff79\034\uff79\035" +
    "\uff79\036\uff79\037\uff79\040\uff79\043\uff79\044\uff79\045\uff79" +
    "\046\uff79\057\uff79\062\uff79\063\uff79\064\uff79\065\uff79\070" +
    "\uff79\001\002\000\020\003\356\004\354\007\047\060\051" +
    "\066\043\067\045\070\044\001\002\000\006\014\360\061" +
    "\u0183\001\002\000\004\054\uffa7\001\002\000\004\054\uffa2" +
    "\001\002\000\004\057\u0186\001\002\000\010\003\uff57\047" +
    "\uff57\057\uff57\001\002\000\004\057\uffe7\001\002\000\006" +
    "\003\073\060\076\001\002\000\014\011\023\012\022\013" +
    "\021\050\u018c\070\u018a\001\002\000\006\003\073\060\076" +
    "\001\002\000\004\070\u019c\001\002\000\004\070\u018d\001" +
    "\002\000\006\003\073\060\076\001\002\000\012\011\023" +
    "\012\022\013\021\061\uff54\001\002\000\004\061\u019a\001" +
    "\002\000\004\070\u0191\001\002\000\010\003\u0193\055\u0192" +
    "\061\uff56\001\002\000\010\011\023\012\022\013\021\001" +
    "\002\000\006\055\uff51\061\uff51\001\002\000\006\055\u0195" +
    "\061\uff55\001\002\000\010\011\023\012\022\013\021\001" +
    "\002\000\004\070\u0197\001\002\000\006\055\uff52\061\uff52" +
    "\001\002\000\004\070\u0199\001\002\000\006\055\uff53\061" +
    "\uff53\001\002\000\004\056\u019b\001\002\000\046\003\uff4f" +
    "\006\uff4f\007\uff4f\011\uff4f\012\uff4f\013\uff4f\034\uff4f\035" +
    "\uff4f\037\uff4f\040\uff4f\043\uff4f\045\uff4f\057\uff4f\062\uff4f" +
    "\063\uff4f\064\uff4f\065\uff4f\070\uff4f\001\002\000\006\003" +
    "\073\060\076\001\002\000\012\011\023\012\022\013\021" +
    "\061\uff54\001\002\000\004\061\u019f\001\002\000\004\056" +
    "\u01a0\001\002\000\046\003\uff58\006\uff58\007\uff58\011\uff58" +
    "\012\uff58\013\uff58\034\uff58\035\uff58\037\uff58\040\uff58\043" +
    "\uff58\045\uff58\057\uff58\062\uff58\063\uff58\064\uff58\065\uff58" +
    "\070\uff58\001\002\000\012\011\023\012\022\013\021\061" +
    "\uff54\001\002\000\004\061\u01a3\001\002\000\004\056\u01a4" +
    "\001\002\000\046\003\ufff1\006\ufff1\007\ufff1\011\ufff1\012" +
    "\ufff1\013\ufff1\034\ufff1\035\ufff1\037\ufff1\040\ufff1\043\ufff1" +
    "\045\ufff1\057\ufff1\062\ufff1\063\ufff1\064\ufff1\065\ufff1\070" +
    "\ufff1\001\002\000\012\011\023\012\022\013\021\061\uff54" +
    "\001\002\000\004\061\u01a7\001\002\000\004\056\u01a8\001" +
    "\002\000\046\003\ufff0\006\ufff0\007\ufff0\011\ufff0\012\ufff0" +
    "\013\ufff0\034\ufff0\035\ufff0\037\ufff0\040\ufff0\043\ufff0\045" +
    "\ufff0\057\ufff0\062\ufff0\063\ufff0\064\ufff0\065\ufff0\070\ufff0" +
    "\001\002\000\010\002\ufffa\003\ufffa\047\ufffa\001\002\000" +
    "\004\057\u01ab\001\002\000\010\003\uff4e\047\uff4e\057\uff4e" +
    "\001\002\000\006\003\073\060\076\001\002\000\004\070" +
    "\u01b4\001\002\000\004\070\u01af\001\002\000\006\003\073" +
    "\060\076\001\002\000\012\011\023\012\022\013\021\061" +
    "\uff54\001\002\000\004\061\u01b2\001\002\000\004\056\u01b3" +
    "\001\002\000\046\003\uff50\006\uff50\007\uff50\011\uff50\012" +
    "\uff50\013\uff50\034\uff50\035\uff50\037\uff50\040\uff50\043\uff50" +
    "\045\uff50\057\uff50\062\uff50\063\uff50\064\uff50\065\uff50\070" +
    "\uff50\001\002\000\006\003\073\060\076\001\002\000\012" +
    "\011\023\012\022\013\021\061\uff54\001\002\000\004\061" +
    "\u01b7\001\002\000\004\056\u01b8\001\002\000\046\003\uff59" +
    "\006\uff59\007\uff59\011\uff59\012\uff59\013\uff59\034\uff59\035" +
    "\uff59\037\uff59\040\uff59\043\uff59\045\uff59\057\uff59\062\uff59" +
    "\063\uff59\064\uff59\065\uff59\070\uff59\001\002\000\012\011" +
    "\023\012\022\013\021\061\uff54\001\002\000\004\061\u01bb" +
    "\001\002\000\004\056\u01bc\001\002\000\046\003\ufff2\006" +
    "\ufff2\007\ufff2\011\ufff2\012\ufff2\013\ufff2\034\ufff2\035\ufff2" +
    "\037\ufff2\040\ufff2\043\ufff2\045\ufff2\057\ufff2\062\ufff2\063" +
    "\ufff2\064\ufff2\065\ufff2\070\ufff2\001\002\000\004\070\u01c3" +
    "\001\002\000\010\002\ufff9\003\ufff9\047\ufff9\001\002\000" +
    "\004\051\u01c0\001\002\000\004\070\u01c1\001\002\000\006" +
    "\003\154\056\155\001\002\000\016\003\ufffb\011\ufffb\012" +
    "\ufffb\013\ufffb\047\ufffb\057\ufffb\001\002\000\006\003\154" +
    "\056\155\001\002\000\016\003\ufffc\011\ufffc\012\ufffc\013" +
    "\ufffc\047\ufffc\057\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01c2\000\016\002\012\003\007\004\004\022\003\023" +
    "\006\047\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\006\165\007\163\013\162\016" +
    "\167\037\166\104\156\107\160\110\161\001\001\000\014" +
    "\003\007\004\155\022\003\023\006\047\011\001\001\000" +
    "\002\001\001\000\012\014\014\035\016\113\015\114\017" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\041" +
    "\026\043\030\060\031\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\014\014\035\016\113\023\114\017\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\042\136\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\012\034\017" +
    "\040\020\037\045\041\046\036\053\052\001\001\000\002" +
    "\001\001\000\006\020\134\053\052\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\010\076\053\071\001\001\000\002\001\001\000\004" +
    "\015\130\001\001\000\010\017\065\020\037\053\052\001" +
    "\001\000\004\015\064\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\057\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\010\076\053\071\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\017\077\020\037\053\052\001\001\000" +
    "\002\001\001\000\010\017\112\020\037\053\052\001\001" +
    "\000\010\017\111\020\037\053\052\001\001\000\002\001" +
    "\001\000\010\017\110\020\037\053\052\001\001\000\010" +
    "\017\107\020\037\053\052\001\001\000\010\017\106\020" +
    "\037\053\052\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\017\117\020\037" +
    "\053\052\054\116\001\001\000\002\001\001\000\004\055" +
    "\121\001\001\000\010\017\125\020\037\053\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\017\124\020" +
    "\037\053\052\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\041\141\060\031\001\001\000\002\001" +
    "\001\000\006\041\140\060\031\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\012\034\017\040\020\037\045" +
    "\146\046\036\053\052\001\001\000\016\012\034\017\040" +
    "\020\037\045\144\046\036\053\052\001\001\000\002\001" +
    "\001\000\016\012\034\017\040\020\037\045\147\046\036" +
    "\053\052\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\152\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\u01ac\001\001\000\002\001\001" +
    "\000\002\001\001\000\060\011\227\014\170\036\201\040" +
    "\202\044\210\046\174\050\217\051\222\052\221\053\203" +
    "\056\225\057\177\061\223\063\226\064\175\065\172\066" +
    "\220\072\215\073\214\076\176\077\173\111\u01a9\112\230" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\006" +
    "\165\007\u0186\013\162\016\167\037\166\104\156\107\160" +
    "\110\161\001\001\000\060\011\227\014\170\036\201\040" +
    "\202\044\210\046\174\050\217\051\222\052\221\053\203" +
    "\056\225\057\177\061\223\063\226\064\175\065\172\066" +
    "\220\072\215\073\214\076\176\077\173\111\u0184\112\230" +
    "\001\001\000\060\011\227\014\170\036\201\040\202\044" +
    "\210\046\174\050\217\051\222\052\221\053\203\056\225" +
    "\057\177\061\223\063\226\064\175\065\172\066\220\072" +
    "\215\073\214\076\176\077\173\111\207\112\230\001\001" +
    "\000\010\041\026\043\u0183\060\031\001\001\000\004\010" +
    "\u0180\001\001\000\060\011\227\014\170\036\201\040\202" +
    "\044\210\046\174\050\217\051\222\052\221\053\203\056" +
    "\225\057\177\061\223\063\226\064\175\065\172\066\220" +
    "\072\215\073\214\076\176\077\173\111\u017e\112\230\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\u0170" +
    "\001\001\000\010\101\u015b\102\u015d\103\u015c\001\001\000" +
    "\060\011\227\014\170\036\201\040\202\044\210\046\174" +
    "\050\217\051\222\052\221\053\203\056\225\057\177\061" +
    "\223\063\226\064\175\065\172\066\220\072\215\073\214" +
    "\076\176\077\173\111\u014a\112\230\001\001\000\004\010" +
    "\u0145\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\u013e\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\012\u012d\017\040\020\037\053\052\001\001\000\012\012" +
    "\365\017\040\020\037\053\052\001\001\000\004\010\352" +
    "\001\001\000\060\011\227\014\170\036\201\040\202\044" +
    "\210\046\174\050\217\051\222\052\221\053\203\056\225" +
    "\057\177\061\223\063\226\064\175\065\172\066\220\072" +
    "\215\073\214\076\176\077\173\111\350\112\230\001\001" +
    "\000\002\001\001\000\004\010\344\001\001\000\002\001" +
    "\001\000\010\070\323\071\322\074\324\001\001\000\060" +
    "\011\227\014\170\036\201\040\202\044\210\046\174\050" +
    "\217\051\222\052\221\053\203\056\225\057\177\061\223" +
    "\063\226\064\175\065\172\066\220\072\215\073\214\076" +
    "\176\077\173\111\317\112\230\001\001\000\004\010\305" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\017\236\020\037\024\240\025\246\026\242" +
    "\027\243\030\245\031\235\053\052\001\001\000\002\001" +
    "\001\000\060\011\227\014\170\036\201\040\202\044\210" +
    "\046\174\050\217\051\222\052\221\053\203\056\225\057" +
    "\177\061\223\063\226\064\175\065\172\066\220\072\215" +
    "\073\214\076\176\077\173\111\233\112\230\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\276\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\034\271\001\001\000\006\010\076\053" +
    "\071\001\001\000\004\033\266\001\001\000\002\001\001" +
    "\000\012\017\236\020\037\025\264\053\052\001\001\000" +
    "\012\017\236\020\037\025\263\053\052\001\001\000\012" +
    "\017\236\020\037\025\262\053\052\001\001\000\012\017" +
    "\236\020\037\025\261\053\052\001\001\000\012\017\236" +
    "\020\037\025\260\053\052\001\001\000\012\017\236\020" +
    "\037\025\257\053\052\001\001\000\012\017\236\020\037" +
    "\025\256\053\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\017\236\020\037\024\240\025\246\030\267\031\235" +
    "\053\052\001\001\000\004\033\266\001\001\000\002\001" +
    "\001\000\022\017\236\020\037\024\240\025\246\027\273" +
    "\030\245\031\235\053\052\001\001\000\002\001\001\000" +
    "\004\034\271\001\001\000\006\010\076\053\071\001\001" +
    "\000\002\001\001\000\014\017\236\020\037\024\277\025" +
    "\246\053\052\001\001\000\002\001\001\000\006\010\076" +
    "\053\071\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\017\236\020\037" +
    "\024\240\025\246\026\306\027\243\030\245\031\235\053" +
    "\052\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\017" +
    "\236\020\037\024\240\025\246\026\314\027\243\030\245" +
    "\031\235\053\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\340\001\001\000\006\067\332\075\330\001" +
    "\001\000\010\070\323\071\327\074\324\001\001\000\060" +
    "\011\227\014\170\036\201\040\202\044\210\046\174\050" +
    "\217\051\222\052\221\053\203\056\225\057\177\061\223" +
    "\063\226\064\175\065\172\066\220\072\215\073\214\076" +
    "\176\077\173\111\325\112\230\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\060\011\227\014" +
    "\170\036\201\040\202\044\210\046\174\050\217\051\222" +
    "\052\221\053\203\056\225\057\177\061\223\063\226\064" +
    "\175\065\172\066\220\072\215\073\214\076\176\077\173" +
    "\111\336\112\230\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\017\236\020" +
    "\037\024\240\025\246\026\341\027\243\030\245\031\235" +
    "\053\052\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\012\345\017\040\020\037\053\052" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\020\354" +
    "\032\356\053\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\010\076\053\071\001\001\000\002\001\001" +
    "\000\010\020\354\032\361\053\052\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\012\u0128\017\040\020\037\053\052\001\001\000" +
    "\002\001\001\000\004\010\u0124\001\001\000\004\010\u0120" +
    "\001\001\000\002\001\001\000\004\010\u011b\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\u0112\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\u0100\001" +
    "\001\000\006\014\u0102\062\u0103\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\u0106\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\012\u0109\017\040\020\037\053\052\001\001\000" +
    "\002\001\001\000\010\017\u010b\020\037\053\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\012\u010f\017\040\020\037\053\052\001\001\000\002" +
    "\001\001\000\010\017\u0111\020\037\053\052\001\001\000" +
    "\002\001\001\000\010\020\354\032\u0113\053\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\012\034\017\040" +
    "\020\037\045\u0119\046\036\053\052\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\020\354\032\u011c\053\052" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\012" +
    "\034\017\040\020\037\045\u011f\046\036\053\052\001\001" +
    "\000\002\001\001\000\024\017\236\020\037\024\240\025" +
    "\246\026\u0121\027\243\030\245\031\235\053\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\012\u0125\017\040\020\037\053\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\012\034\017\040\020\037" +
    "\045\u012b\046\036\053\052\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\012\034\017\040\020\037\045\u0133\046" +
    "\036\053\052\001\001\000\016\012\034\017\040\020\037" +
    "\045\u0132\046\036\053\052\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\012\034\017\040\020\037\045\u013c\046\036\053\052\001" +
    "\001\000\016\012\034\017\040\020\037\045\u0138\046\036" +
    "\053\052\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\017\236\020\037\024\240\025\246\026" +
    "\u013f\027\243\030\245\031\235\053\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\014\u0102" +
    "\062\u0146\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\017" +
    "\236\020\037\024\240\025\246\026\u014f\027\243\030\245" +
    "\031\235\053\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\017\236\020\037\024\240" +
    "\025\246\026\u0158\027\243\030\245\031\235\053\052\001" +
    "\001\000\002\001\001\000\024\017\236\020\037\024\240" +
    "\025\246\026\u0155\027\243\030\245\031\235\053\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\100\u0168\001\001\000\060\011\227\014\170\036\201" +
    "\040\202\044\210\046\174\050\217\051\222\052\221\053" +
    "\203\056\225\057\177\061\223\063\226\064\175\065\172" +
    "\066\220\072\215\073\214\076\176\077\173\111\u0164\112" +
    "\230\001\001\000\010\101\u0163\102\u015d\103\u015c\001\001" +
    "\000\012\012\u015f\017\040\020\037\053\052\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\060\011\227\014\170\036\201\040" +
    "\202\044\210\046\174\050\217\051\222\052\221\053\203" +
    "\056\225\057\177\061\223\063\226\064\175\065\172\066" +
    "\220\072\215\073\214\076\176\077\173\111\u016b\112\230" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\017\u0177\020\037\053\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\017\u017b\020\037\053\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\010\076\053\071\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\020\354\032\u0181\053\052\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\u01a4\001\001\000" +
    "\004\014\u018a\001\001\000\004\010\u01a0\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\u018d\001\001\000" +
    "\006\014\u018f\105\u018e\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\106\u0193\001\001\000\004\014\u0197\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\u0195" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\u019c\001\001\000\006\014\u018f\105\u019d\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\014\u018f\105\u01a1\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\014\u018f\105\u01a5" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\u01b8\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\u01af\001\001\000\006\014\u018f\105\u01b0" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\u01b4\001\001\000\006\014\u018f\105\u01b5" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\014\u018f\105\u01b9\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\u01c1\001\001\000\002\001\001\000\004\005\u01c3\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoJava$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoJava$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoJava$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public ManejadorSintacticoJP msJP = ManejadorSintacticoJP.getInstacia();
    public ManejadorInstancias mi = ManejadorInstancias.getInstance();
    public ManejadorCuartetos mc = ManejadorCuartetos.getInstancia();
    public ManejadorHeap mh = ManejadorHeap.getInstancia();
    public ManejadorTablaPila mtp = ManejadorTablaPila.getInstancia();
    public ManejadorBuscarMetodos mbm = ManejadorBuscarMetodos.getInstancia();
    public ManejadorThis mt = ManejadorThis.getInstancia();
    public int contadorLineas;
    private FrameCTDOA frameCTDOA;

    public SintacticoJava(LexicoJava lexer) { 
        super(lexer);   
        msJP.nuevoAnalisis();
    }

    public void setContadorLineas(int contadorLineas){
        this.contadorLineas = contadorLineas;
        msJP.setContadorLineas(contadorLineas);
    }

    public void setFrameCTDOA(FrameCTDOA frameCTDOA) {
        this.frameCTDOA = frameCTDOA;
        msJP.setFrameCTDOA(frameCTDOA);
    }

    public void setAccion(String tipo, String mensaje, String accion){
        frameCTDOA.addErrores("ERROR Lexico Tipo: " + tipo + "\t Mensaje: " + mensaje + "\tAcción: ERROR\n");
    }

    @Override
    public void syntax_error(Symbol s){
        try {
            msJP.errorSintax(s.left, s.right, s.value, 
                "Uf, error sintactico en el codigo JAVA, cerca de la linea y columna indicada porfavor revisa que el token\n "
                        + "\t\tidicado corresponda a la declaracion de instruccion correspondiente. Vuelve a intentarlo."
            );
        } catch (Exception e) {
            System.out.println("Error " + e.toString());
        }
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SintacticoJava$actions {
  private final SintacticoJava parser;

  /** Constructor */
  CUP$SintacticoJava$actions(SintacticoJava parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SintacticoJava$do_action(
    int                        CUP$SintacticoJava$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoJava$parser,
    java.util.Stack            CUP$SintacticoJava$stack,
    int                        CUP$SintacticoJava$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoJava$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoJava$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // param_p ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		 
        RESULT = new ArrayList<>();
        parser.msJP.errorSintax(eleft, eright, e, "Error sintactico en la instruccion de llamada a una funcion, no se esperaba el token indicado para el reconocimiento de parametros. Estructura esperada: << (Operacion Aritmetica | Entero | Decimal | Caracter)... >>");
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("param_p",43, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // param_p ::= param_p COMA operaciones_aritmeticas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = parser.msJP.lista(a, e);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("param_p",43, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // param_p ::= COMA operaciones_aritmeticas 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("param_p",43, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // param ::= 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("param",42, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // param ::= operaciones_aritmeticas 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("param",42, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // param ::= operaciones_aritmeticas param_p 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		
        List<Simbolo> lista = new ArrayList<>();
        if (e != null) {
            lista.add((Simbolo) e);
        }
        if(a instanceof Simbolo) {
            lista.add((Simbolo) a);
        } else {
            lista.addAll((List<Simbolo>) a);
        }
        RESULT = lista;
    
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("param",42, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // llamada_fp ::= ID PARENTESIS_A param PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		RESULT = parser.mbm.buscarMetodo("JAVA_" + parser.mc.getClaseActual() + "_", a, e, aleft, aright, 3, false);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("llamada_fp",41, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // estructuras_p ::= 
            {
              Object RESULT =null;
		RESULT = null;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("estructuras_p",71, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // estructuras_p ::= estructuras estructuras_p 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = parser.msJP.simbolosReturn(e, a, aleft, aright);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("estructuras_p",71, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // estructuras ::= error CORCHETE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		parser.msJP.errorSintax(eleft, eright, e, "Error en el bloque de instrucciones de la estructura, por favor revisa la entrada en la linea y columna indicada. \nSe espera: << Declaracion variables || Asignacion variables || if || switch || do || while || for || System.out >>, recuperado hasta: << } >>");
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("estructuras",72, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // estructuras ::= error PUNTO_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		parser.msJP.errorSintax(eleft, eright, e, "Error en el bloque de instrucciones de la estructura, por favor revisa la entrada en la linea y columna indicada. \nSe espera: << Declaracion variables || Asignacion variables || if || switch || do || while || for || System.out >>, recuperado hasta: << ; >>");
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("estructuras",72, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // estructuras ::= THIS PUNTO ID IGUAL asignacion error 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		      
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en el bloque de instrucciones this. Se esperaba el token: << ; >");
        parser.msJP.asignacionVariablesThis(a, e, aleft, aright);
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("estructuras",72, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // estructuras ::= error PUNTO ID IGUAL asignacion PUNTO_COMA 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-5)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		      
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en el bloque de instrucciones this. Se esperaba el token: << this >>");
        parser.msJP.asignacionVariablesThis(a, e, aleft, aright);
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("estructuras",72, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // estructuras ::= THIS PUNTO ID error asignacion PUNTO_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		      
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en el bloque de instrucciones this. Se esperaba el token: << = >>");
        parser.msJP.asignacionVariablesThis(a, e, aleft, aright);
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("estructuras",72, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // estructuras ::= THIS PUNTO ID IGUAL asignacion error PUNTO_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		      
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en el bloque de instrucciones this. Se recupero hasta el token: << ; >>");
        parser.msJP.asignacionVariablesThis(a, e, aleft, aright);
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("estructuras",72, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // estructuras ::= error THIS PUNTO ID IGUAL asignacion PUNTO_COMA 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-6)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-6)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en el bloque de instrucciones this. Se recupero hasta el token: << this >>");
        parser.msJP.asignacionVariablesThis(a, e, aleft, aright);
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("estructuras",72, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // estructuras ::= THIS PUNTO ID IGUAL asignacion PUNTO_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		parser.msJP.asignacionVariablesThis(a, e, aleft, aright);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("estructuras",72, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // estructuras ::= return PUNTO_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		RESULT = e;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("estructuras",72, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // estructuras ::= llamada_fp PUNTO_COMA 
            {
              Object RESULT =null;
		
        Object as = null;
        parser.mc.addYRemovePuntero(as, false);
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("estructuras",72, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // estructuras ::= switch 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("estructuras",72, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // estructuras ::= estructura_if 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("estructuras",72, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // estructuras ::= for 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("estructuras",72, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // estructuras ::= do_while 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("estructuras",72, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // estructuras ::= while 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("estructuras",72, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // estructuras ::= asignacion_variables PUNTO_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		
        if(e != null) {      
            parser.msJP.asignacionVariables(e, eleft, eright);
        } else { 
            parser.msJP.asignacionVariables(null, eleft, eright);
        }
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("estructuras",72, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // estructuras ::= declaracion_variables PUNTO_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		RESULT = a;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("estructuras",72, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // estructuras ::= solicitud_datos PUNTO_COMA 
            {
              Object RESULT =null;
		RESULT = null;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("estructuras",72, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // estructuras ::= mensaje_terminal PUNTO_COMA 
            {
              Object RESULT =null;
		RESULT = null;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("estructuras",72, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // metodos ::= metodos_p estructuras_p CORCHETE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		
    RESULT = parser.msJP.metodos(((Procedimiento) e).getE(), i, ((Procedimiento) e).getU(), ileft, iright);
    parser.mc.finProcedimiento(false, false);
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("metodos",69, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // metodos_p ::= error PUBLIC VOID ID ppa parametros PARENTESIS_C CORCHETE_A 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-7)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-7)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-7)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en el bloque de instrucciones. Se a recuperado hasta el token: << public >>"); 
        parser.mc.addCuartetoProcedimientoJava(a, "JAVA", e, null); 
        RESULT = new Procedimiento(a, e);
        parser.mtp.addThis();
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("metodos_p",9, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // metodos_p ::= PUBLIC VOID ID ppa parametros PARENTESIS_C CORCHETE_A 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		
        parser.mc.addCuartetoProcedimientoJava(a, "JAVA", e, null); 
        RESULT = new Procedimiento(a, e);
        parser.mtp.addThis();
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("metodos_p",9, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // parametros_p ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		 
        RESULT = new ArrayList<>();
        parser.msJP.errorSintax(eleft, eright, e, "Error sintactico en la instruccion de parametros. Se esperaba el token: << Param, Param_n,... >>");
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("parametros_p",68, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // parametros_p ::= parametros_p COMA tipo_dato ID 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		
        Simbolo s = parser.msJP.declaraUnaVariableParametro((Tipo) e, a, aleft, aright);
        List<Simbolo> listaSimbolos = new ArrayList<>();
        if(i != null) {
            if(i instanceof Simbolo) {
                listaSimbolos.add((Simbolo) i);
            } else {
                listaSimbolos = (List<Simbolo>) i;
            }
        }
        if(s != null) {
            listaSimbolos.add((Simbolo) s);
        }
        RESULT = listaSimbolos;
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("parametros_p",68, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // parametros_p ::= COMA tipo_dato ID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = parser.msJP.declaraUnaVariableParametro((Tipo) e, a, aleft, aright);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("parametros_p",68, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // parametros ::= 
            {
              Object RESULT =null;
		RESULT = new ArrayList<>();
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("parametros",67, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // parametros ::= tipo_dato ID parametros_p 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		
        Simbolo s = parser.msJP.declaraUnaVariableParametro((Tipo) e, a, aleft, aright);
        List<Simbolo> listaSimbolos = new ArrayList<>();
        if(i != null) {
            if(i instanceof Simbolo) {
                listaSimbolos.add((Simbolo) i);
            } else {
                listaSimbolos = (List<Simbolo>) i;
            }
        }
        if(s != null) {
            listaSimbolos.add((Simbolo) s);
        }
        RESULT = listaSimbolos;
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("parametros",67, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // parametros ::= tipo_dato ID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = parser.msJP.declaraUnaVariableParametro((Tipo) e, a, aleft, aright);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("parametros",67, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // funcion ::= funcion_p estructuras_p CORCHETE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		
        RESULT = parser.msJP.funcion(((Procedimiento) e).getE(), ((Procedimiento) e).getA(), o, null, ((Procedimiento) e).getU(), oleft, oright);
        parser.mc.finProcedimiento(false, true);
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("funcion",66, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // funcion_p ::= error PUBLIC tipo_dato ID ppa parametros PARENTESIS_C CORCHETE_A 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-7)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-7)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-7)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en el bloque de instrucciones. Se a recuperado hasta el token: << public >>"); 
        parser.mc.addCuartetoProcedimientoJava(e, "JAVA", i, (Tipo) a);
        Simbolo  s = new Simbolo((Tipo) a, null, e);
        Funcion f = new Funcion();
        f.setParametros(i);
        s.setValor(f);
        s.setTipo(new Tipo("Funcion", Constantes.FUNCION));
        s.setTipoFuncion((Tipo) a);
        RESULT = new Procedimiento(e, i, (Tipo) a);
        parser.mtp.addThis();
        parser.msJP.declaraUnaVariable(s, aleft, aright);
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("funcion_p",29, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // funcion_p ::= PUBLIC tipo_dato ID ppa parametros PARENTESIS_C CORCHETE_A 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		
        parser.mc.addCuartetoProcedimientoJava(e, "JAVA", i, (Tipo) a);
        Simbolo  s = new Simbolo((Tipo) a, null, e);
        Funcion f = new Funcion();
        f.setParametros(i);
        s.setValor(f);
        s.setTipo(new Tipo("Funcion", Constantes.FUNCION));
        s.setTipoFuncion((Tipo) a);
        RESULT = new Procedimiento(e, i, (Tipo) a);
        parser.mtp.addThis();
        parser.msJP.declaraUnaVariable(s, aleft, aright);
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("funcion_p",29, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // caso ::= caso_p estructuras_p 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		
        RESULT = parser.msJP.crearEstructuraCases(a, e, aleft, aright, false);
        parser.mc.finCadaCaso();
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("caso",64, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // caso ::= caso_p estructuras_p BREAK PUNTO_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		
        RESULT = parser.msJP.crearEstructuraCases(a, e, aleft, aright, false);
        parser.mc.finCadaCaso();
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("caso",64, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // caso_p ::= CASE return_dato error 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico la instruccion case. Se esperaba el token: << : >>"); 
        parser.mc.condicional((Simbolo) a); RESULT = a;
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("caso_p",65, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // caso_p ::= CASE return_dato error DOS_PUNTOS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico la instruccion case. Se recupero hasta el token: << : >>"); 
        parser.mc.condicional((Simbolo) a); RESULT = a;
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("caso_p",65, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // caso_p ::= CASE return_dato DOS_PUNTOS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		parser.mc.condicional((Simbolo) a); RESULT = a;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("caso_p",65, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // cantidad_casos ::= caso cantidad_casos 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = parser.msJP.lista(a, e);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("cantidad_casos",63, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // cantidad_casos ::= caso 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("cantidad_casos",63, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // caso_default ::= 
            {
              Object RESULT =null;
		parser.mc.etiquetaGoto();
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("caso_default",62, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // caso_default ::= DEFAULT DOS_PUNTOS estructuras_p 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		  
        parser.mc.etiquetaGoto();
        RESULT = parser.msJP.crearEstructuraCases(null, a, aleft, aright, true);
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("caso_default",62, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // caso_default ::= DEFAULT DOS_PUNTOS estructuras_p BREAK PUNTO_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		  
        parser.mc.etiquetaGoto();
        RESULT = parser.msJP.crearEstructuraCases(null, a, aleft, aright, true);
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("caso_default",62, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // switch ::= switch_p cantidad_casos caso_default CORCHETE_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		
        RESULT = parser.msJP.crearCase(e, i, a, eleft, eright);
        parser.mc.etqFinTurno();
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("switch",61, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // switch_p ::= error SWITCH ppa return_dato PARENTESIS_C CORCHETE_A 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-5)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en el bloque de instrucciones. Se a recuperado hasta el token: << switch >>"); 
        parser.mc.setEtiquetaSwitch((Simbolo) a); RESULT = a;
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("switch_p",60, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // switch_p ::= SWITCH ppa return_dato PARENTESIS_C CORCHETE_A 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		parser.mc.setEtiquetaSwitch((Simbolo) a); RESULT = a;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("switch_p",60, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // estructura_if ::= if else_if_p else 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = parser.msJP.construirCondicionalIf(a, e, i);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("estructura_if",56, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // estructura_if ::= if else_if_p 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = parser.msJP.construirCondicionalIf(a, e, null);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("estructura_if",56, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // else_if_p ::= 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("else_if_p",55, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // else_if_p ::= else_if else_if_p 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = parser.msJP.lista(a, e);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("else_if_p",55, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // else_if ::= ie estructuras_p CORCHETE_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		RESULT = parser.msJP.crearEstructuraCondicional(e, a, 2); parser.mc.imprimirResto();
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("else_if",54, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // else ::= ee estructuras_p CORCHETE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		RESULT = parser.msJP.crearEstructuraCondicional(e, false, 3); parser.mc.imprimirResto();
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("else",53, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // if ::= ii estructuras_p CORCHETE_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		RESULT = parser.msJP.crearEstructuraCondicional(e, a, 1); parser.mc.imprimirResto();
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("if",52, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // ee ::= ELSE error 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion else. Se esperaba el token: << { >>"); 
        parser.mc.escribirEtiquetasInicio(false); parser.mc.escribirEtiquetaFin(); parser.mc.nuevoAnalisisBoolean(); 
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("ee",59, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // ee ::= ELSE error CORCHETE_A 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion else. Se recupero hasta el token: << { >>"); 
        parser.mc.escribirEtiquetasInicio(false); parser.mc.escribirEtiquetaFin(); parser.mc.nuevoAnalisisBoolean(); 
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("ee",59, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // ee ::= ELSE CORCHETE_A 
            {
              Object RESULT =null;
		parser.mc.escribirEtiquetasInicio(false); parser.mc.escribirEtiquetaFin(); parser.mc.nuevoAnalisisBoolean(); 
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("ee",59, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // ie ::= ELSE_IF ppa condicional PARENTESIS_C CORCHETE_A 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		parser.mc.escribirEtiquetasInicio(false); parser.mc.escribirEtiquetaFin(); parser.mc.nuevoAnalisisBoolean(); RESULT = e;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("ie",58, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // ii ::= error IF ppa condicional PARENTESIS_C CORCHETE_A 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-5)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en el bloque de instrucciones. Se a recuperado hasta el token: << if >>"); 
        parser.mc.escribirEtiquetasInicio(false); parser.mc.escribirEtiquetaFin(); parser.mc.nuevoAnalisisBoolean(); RESULT = e;
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("ii",57, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // ii ::= IF ppa condicional PARENTESIS_C CORCHETE_A 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		parser.mc.escribirEtiquetasInicio(false); parser.mc.escribirEtiquetaFin(); parser.mc.nuevoAnalisisBoolean(); RESULT = e;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("ii",57, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // var ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		parser.msJP.errorSintax(eleft, eright, e, "Error sintactico en la declaracion de datos, de la instruccion for. Se esperaba la estructura: << ( | (int | char | float)) ID = (Id | Numero | Decimal | Operacion Aritmetica) >>.");
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("var",48, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // var ::= error tipo_dato ID IGUAL return_dato 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		  
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en el bloque de instrucciones for. Se recupero hasta el token: << int | char | float >>"); 
        RESULT = parser.msJP.comprobarAsignacionFor(i, e, eleft, eright, (Tipo) a);
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("var",48, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // var ::= error ID IGUAL operaciones_aritmeticas 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en el bloque de instrucciones for. Se recupero hasta el token: << Identificador >>"); 
        RESULT = parser.msJP.comprobarAsignacionFor(e, a, aleft, aright, null);
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("var",48, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // var ::= tipo_dato ID IGUAL return_dato 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = parser.msJP.comprobarAsignacionFor(i, e, eleft, eright, (Tipo) a);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("var",48, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // var ::= ID IGUAL operaciones_aritmeticas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = parser.msJP.comprobarAsignacionFor(e, a, aleft, aright, null);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("var",48, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // for ::= for_asignacion estructuras_p CORCHETE_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		
        if(((For) a).getA() != null && ((For) a).getE() != null && ((For) a).getI() != null) {
            RESULT = parser.msJP.contruirEstructuraCiloDW(o, true, 3);
        } else {
            RESULT = parser.msJP.contruirEstructuraCiloDW(o, null, 3);;
        }
        parser.mc.actualizar();
        parser.mc.imprimirResto();
        parser.msJP.removerCualquierSimbolo(((For) a).getA());
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("for",47, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // for_asignacion ::= for_condicional operaciones_asignacion PARENTESIS_C CORCHETE_A 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		
        For f = (For) a;
        f.setI(i);
        RESULT = parser.mc.addForJPA(f, (Simbolo) i);
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("for_asignacion",51, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // for_condicional ::= for_var condicional PUNTO_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		 
        ((For) a).setE(e);
        parser.mc.etiqueta();
        RESULT = a;
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("for_condicional",50, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // for_var ::= error FOR ppa var PUNTO_COMA 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en el bloque de instrucciones. Se a recuperado hasta el token: << for >>"); 
        RESULT = new For(a, parser.mc.addForJPV((Simbolo) a));
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("for_var",49, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // for_var ::= FOR ppa var error 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		  
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion for. Se esperaba el token: << ; >>"); 
        RESULT = new For(a, parser.mc.addForJPV((Simbolo) a));
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("for_var",49, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // for_var ::= FOR ppa var error PUNTO_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		  
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion for. Se recupero hasta el token: << ; >>"); 
        RESULT = new For(a, parser.mc.addForJPV((Simbolo) a));
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("for_var",49, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // for_var ::= FOR ppa var PUNTO_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		RESULT = new For(a, parser.mc.addForJPV((Simbolo) a));
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("for_var",49, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // do_while ::= do_while_p estructuras_p CORCHETE_C error PARENTESIS_A condicional PARENTESIS_C PUNTO_COMA 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-7)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-6)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion do while. Se espera el token: << while >>"); 
        RESULT = parser.msJP.contruirEstructuraCiloDW(e, a, 2);
        parser.mc.escribirEtiquetasInicio(false);
        parser.mc.escribirEtiquetaFin();
        parser.mc.finDoWhile((String) i);
        parser.mc.imprimirResto();
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("do_while",44, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // do_while ::= do_while_p estructuras_p CORCHETE_C error WHILE PARENTESIS_A condicional PARENTESIS_C PUNTO_COMA 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-8)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-8)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-7)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-7)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-5)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion do while. Se recupero hasta el token: << while >>"); 
        RESULT = parser.msJP.contruirEstructuraCiloDW(e, a, 2);
        parser.mc.escribirEtiquetasInicio(false);
        parser.mc.escribirEtiquetaFin();
        parser.mc.finDoWhile((String) i);
        parser.mc.imprimirResto();
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("do_while",44, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // do_while ::= do_while_p estructuras_p CORCHETE_C WHILE PARENTESIS_A condicional PARENTESIS_C PUNTO_COMA 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-7)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		
        RESULT = parser.msJP.contruirEstructuraCiloDW(e, a, 2);
        parser.mc.escribirEtiquetasInicio(false);
        parser.mc.escribirEtiquetaFin();
        parser.mc.finDoWhile((String) i);
        parser.mc.imprimirResto();
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("do_while",44, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // do_while_p ::= error DO CORCHETE_A 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en el bloque de instrucciones. Se a recuperado hasta el token: << do >>"); 
        RESULT = parser.mc.addDoWhile();
        parser.mc.nuevoAnalisisBoolean();
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("do_while_p",45, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // do_while_p ::= DO CORCHETE_A 
            {
              Object RESULT =null;
		
        RESULT = parser.mc.addDoWhile();
        parser.mc.nuevoAnalisisBoolean();
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("do_while_p",45, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // while ::= while_p estructuras_p CORCHETE_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		
        RESULT = parser.msJP.contruirEstructuraCiloDW(e, ((While) a).getA(), 1);
        parser.mc.finWhile(((While) a).getIdEtiqueta());
        parser.mc.imprimirResto();
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("while",38, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // while_p ::= while_n ppa condicional PARENTESIS_C error CORCHETE_A 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-5)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-5)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en el la instruccion while. Se recupero hasta el token: << { >>"); 
        parser.mc.nuevoAnalisisBoolean();
        parser.mc.escribirEtiquetasInicio(false);
        parser.mc.addEtiquetasEstructuras();
        ((While) w).setA(a);
        RESULT = w;
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("while_p",40, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // while_p ::= while_n error PARENTESIS_A condicional PARENTESIS_C CORCHETE_A 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-5)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-5)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-5)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion while. Se recupero hasta el token: << ( >>"); 
        parser.mc.nuevoAnalisisBoolean();
        parser.mc.escribirEtiquetasInicio(false);
        parser.mc.addEtiquetasEstructuras();
        ((While) w).setA(a);
        RESULT = w;
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("while_p",40, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // while_p ::= while_n ppa condicional PARENTESIS_C CORCHETE_A 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		
        parser.mc.nuevoAnalisisBoolean();
        parser.mc.escribirEtiquetasInicio(false);
        parser.mc.addEtiquetasEstructuras();
        ((While) w).setA(a);
        RESULT = w;
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("while_p",40, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // while_n ::= error WHILE 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en el bloque de instrucciones. Se a recuperado hasta el token: << while >>"); 
        RESULT = new While(parser.mc.addWhile(), null);
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("while_n",39, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // while_n ::= WHILE 
            {
              Object RESULT =null;
		RESULT = new While(parser.mc.addWhile(), null);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("while_n",39, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // p_parentesis ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		parser.msJP.errorSintax(eleft, eright, e, "Error sintactico en la instruccion de solicitud de datos, se esperaba una cadena. Estructura: << ( Cadena ) >>");
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("p_parentesis",11, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // p_parentesis ::= error PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		parser.msJP.errorSintax(eleft, eright, e, "Error sintactico en la instruccion de solicitud de datos, se esperaba una cadena. Estructura: << ( Cadena ) >>");
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("p_parentesis",11, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // p_parentesis ::= PARENTESIS_A PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("p_parentesis",11, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // p_parentesis ::= PARENTESIS_A CADENA PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		parser.mc.imprimir(new Simbolo(null, e));
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("p_parentesis",11, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // solicitud_datos ::= CINPUT p_parentesis 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		RESULT = new Simbolo(Constantes.CHAR_VAR_VB_PY, '\b', 2);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("solicitud_datos",36, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // solicitud_datos ::= FINPUT p_parentesis 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		RESULT = new Simbolo(Constantes.FLOAT_VAR_VB_PY, 0, 3);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("solicitud_datos",36, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // solicitud_datos ::= IINPUT p_parentesis 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		RESULT = new Simbolo(Constantes.INT_VAR_VB_PY, 0, 1);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("solicitud_datos",36, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // asignacion ::= solicitud_datos 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("asignacion",35, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // asignacion ::= return_dato 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("asignacion",35, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // asignacion_variables ::= ID error asignacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion asignacion de valores. El token esperado es: << = >>"); 
        if(e != null) {
            RESULT = new Simbolo(((Simbolo) e).getTipo(), (Simbolo) e, a);
        } else { 
            RESULT = e;
        }
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("asignacion_variables",34, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // asignacion_variables ::= error ID IGUAL asignacion 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion asignacion de valores. La estructura esperada es: << ID = (ID | Operacion Aritmetica | Entero | Decimal) >>"); 
        if(e != null) {
            RESULT = new Simbolo(((Simbolo) e).getTipo(), (Simbolo) e, a);
        } else { 
            RESULT = e;
        }
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("asignacion_variables",34, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // asignacion_variables ::= ID IGUAL asignacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		
        if(e != null) {
            RESULT = new Simbolo(((Simbolo) e).getTipo(), (Simbolo) e, a);
        } else { 
            RESULT = e;
        }
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("asignacion_variables",34, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // asignacion_variables_d ::= error ID IGUAL asignacion 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion asignacion de valores. La estructura esperada es: << ID = (ID | Operacion Aritmetica | Entero | Decimal) >>"); 
        if(e != null) {
            RESULT = new Simbolo(((Simbolo) e).getTipo(), ((Simbolo) e), a);
        } else { 
            RESULT = e;
        }
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("asignacion_variables_d",46, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // asignacion_variables_d ::= ID error asignacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion asignacion de valores. El token esperado es: << = >>"); 
        if(e != null) {
            RESULT = new Simbolo(((Simbolo) e).getTipo(), ((Simbolo) e), a);
        } else { 
            RESULT = e;
        }
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("asignacion_variables_d",46, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // asignacion_variables_d ::= ID error IGUAL asignacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion asignacion de valores. El token esperado es: << = >>"); 
        if(e != null) {
            RESULT = new Simbolo(((Simbolo) e).getTipo(), ((Simbolo) e), a);
        } else { 
            RESULT = e;
        }
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("asignacion_variables_d",46, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // asignacion_variables_d ::= ID IGUAL asignacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		
        if(e != null) {
            RESULT = new Simbolo(((Simbolo) e).getTipo(), ((Simbolo) e), a);
        } else { 
            RESULT = e;
        }
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("asignacion_variables_d",46, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // lista_id_p ::= lista_id_p COMA lista_id_valores 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		
        List<Simbolo> listaSimbolos = new ArrayList<>();
        if(a != null) {
            if(a instanceof Simbolo) {
                listaSimbolos.add((Simbolo) a);
            } else {
                listaSimbolos = (List<Simbolo>) a;
            }
        }
        if(e != null) {
            listaSimbolos.add((Simbolo) e);
        }
        RESULT = listaSimbolos;
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("lista_id_p",32, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // lista_id_p ::= COMA lista_id_valores 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("lista_id_p",32, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // lista_ids ::= lista_id_valores lista_id_p 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		
        List<Simbolo> listaSimbolos = new ArrayList<>();
        if(a != null) {
            if(a instanceof Simbolo) {
                listaSimbolos.add((Simbolo) a);
            } else {
                listaSimbolos = (List<Simbolo>) a;
            }
        }
        if(e != null) {
            listaSimbolos.add((Simbolo) e);
        }
        RESULT = listaSimbolos;
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("lista_ids",33, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // lista_ids ::= lista_id_valores 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("lista_ids",33, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // lista_id_valores ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		
        parser.msJP.errorSintax(eleft, eright, e, "Error sintactico en la asignacion de valores. Se esperaba un << Identificador o una asignacion. >>");
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("lista_id_valores",31, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // lista_id_valores ::= ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = new Simbolo(null, null, a.toString());
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("lista_id_valores",31, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // lista_id_valores ::= asignacion_variables_d 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("lista_id_valores",31, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // declaracion_variables ::= tipo_dato lista_ids 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = parser.msJP.declararVariables(new Simbolo((Tipo)a, e), aleft, aright);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("declaracion_variables",30, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // declaracion_variables_g ::= tipo_dato lista_ids 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = parser.msJP.declararVariablesGlobales(new Simbolo((Tipo)a, e), aleft, aright);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("declaracion_variables_g",27, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // mensaje_terminal ::= error CONSOLA_LINEA ppa concatenacion PARENTESIS_C 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion System.out.print. La estructura esperada es: << System.out.(print | println) (Texto | Id). >>"); parser.mc.imprimirNuevaLinea(); RESULT = e;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("mensaje_terminal",28, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // mensaje_terminal ::= error CONSOLA ppa concatenacion PARENTESIS_C 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion System.out.print. La estructura esperada es: << System.out.(print | println) (Texto | Id). >>"); RESULT = e;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("mensaje_terminal",28, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // mensaje_terminal ::= CONSOLA_LINEA ppa concatenacion PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		parser.mc.imprimirNuevaLinea(); RESULT = e;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("mensaje_terminal",28, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // mensaje_terminal ::= CONSOLA ppa concatenacion PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		RESULT = e;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("mensaje_terminal",28, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // concatenacion ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		parser.msJP.errorSintax(eleft, eright, e, "Error sintactico en la instruccion concatenacion de cadenas. Se esperaba la estructura: << System.out.(print | println) (Texto | Id). >>");
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("concatenacion",24, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // concatenacion ::= estruct_op 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		parser.mc.imprimirPrintf(0, (Simbolo) e, -1); RESULT = e;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("concatenacion",24, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // concatenacion ::= CADENA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		parser.mc.imprimir(new Simbolo(null, e)); RESULT = e;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("concatenacion",24, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // concatenacion ::= concatenacion MAS concatenacion 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("concatenacion",24, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // condicional_not ::= operaciones_logicas 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		parser.mc.gotoEscribir(); RESULT = e;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("condicional_not",23, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // condicional_not ::= NOT ppa error PARENTESIS_C 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en las operaciones de comparacion. La estructura esperada es: << !(OP) >>"); parser.mc.gotoEscribir();
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("condicional_not",23, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // condicional_not ::= NOT ppa operaciones_logicas error 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en las operaciones de comparacion. Se esperaba el token: << ) >>"); parser.mc.gotoEscribir(); RESULT = parser.msJP.comprobacionCondicional(a, true, 3, aleft, aright);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("condicional_not",23, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // condicional_not ::= NOT ppa operaciones_logicas PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		parser.mc.gotoEscribir(); RESULT = parser.msJP.comprobacionCondicional(a, true, 3, aleft, aright);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("condicional_not",23, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // condicional_and ::= condicional_not 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = a;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("condicional_and",22, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // condicional_and ::= condicional_and and condicional_and 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = parser.msJP.comprobacionCondicional(a, e, 1, cleft, cright);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("condicional_and",22, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // condicional_or ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		parser.msJP.errorSintax(eleft, eright, e, "Error sintactico en las operacionaciones logicas, de la intruccion condicional. Se esperaba la estructrura: << OP1 (&&, ||) OP2, !OP >> ");
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("condicional_or",21, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // condicional_or ::= condicional_and 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = a;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("condicional_or",21, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // condicional_or ::= condicional_or or condicional_or 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = parser.msJP.comprobacionCondicional(a, e, 2, cleft, cright);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("condicional_or",21, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // or ::= OR 
            {
              Object RESULT =null;
		parser.mc.or(); parser.mc.condicionalOR(); if (!parser.mc.ultimoAgregadorEtiqueta()) { parser.mc.escribirEtiqueta();}
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("or",26, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // and ::= AND 
            {
              Object RESULT =null;
		parser.mc.and(); parser.mc.condicionalAND(); parser.mc.escribirEtiqueta();
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("and",25, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // condicional ::= error CORCHETE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		
        parser.mc.nuevoAnalisisBoolean();  
        parser.msJP.errorSintax(eleft, eright, e, "Error sintactico en las operacionaciones logicas, de la intruccion condicional. Se esperaba la estructura: << OP1 (&&, ||) OP2>>");
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("condicional",20, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // condicional ::= condicional_or 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		parser.mc.nuevoAnalisisBoolean(); RESULT = e;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("condicional",20, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // tipos_comparacion ::= CARACTER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = new Simbolo(Constantes.CHAR_VAR_PJ, a);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("tipos_comparacion",19, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // tipos_comparacion ::= operaciones_aritmeticas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = a;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("tipos_comparacion",19, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // operaciones_logicas ::= tipos_comparacion error tipos_comparacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en las operaciones de comparacion. La estructura esperada es: << OP1 (< | > | <= | >= | != | == ) OP2 >>");
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",18, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // operaciones_logicas ::= tipos_comparacion MAYOR_IGUAL tipos_comparacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = parser.msJP.comprobarOperacionesLogicas(a, e, 6, cleft, cright);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",18, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // operaciones_logicas ::= tipos_comparacion MAYOR tipos_comparacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = parser.msJP.comprobarOperacionesLogicas(a, e, 5, cleft, cright);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",18, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // operaciones_logicas ::= tipos_comparacion MENOR_IGUAL tipos_comparacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = parser.msJP.comprobarOperacionesLogicas(a, e, 4, cleft, cright);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",18, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // operaciones_logicas ::= tipos_comparacion MENOR tipos_comparacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = parser.msJP.comprobarOperacionesLogicas(a, e, 3, cleft, cright);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",18, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // operaciones_logicas ::= tipos_comparacion DIFERENTE tipos_comparacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = parser.msJP.comprobarOperacionesLogicas(a, e, 2, cleft, cright);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",18, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // operaciones_logicas ::= tipos_comparacion IGUAL_IGUAL tipos_comparacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = parser.msJP.comprobarOperacionesLogicas(a, e, 1, cleft, cright);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",18, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // operaciones_asignacion ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		parser.msJP.errorSintax(eleft, eright, e, "Error sintactico en la asignacion de incremento en la estructura for. Se esperaba la estructura << ID = (ID | ENTERO | DECIMAL | CHAR | Operacion Aritmetica)>>");
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("operaciones_asignacion",15, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // operaciones_asignacion ::= error ID MENOS_MENOS 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		parser.msJP.errorSintax(xleft, xright, x, "Error sintactico asignacion de variables. La estructura esperada es: << ID++ || ID-- >>"); RESULT = (new Simbolo(Constantes.INT_VAR_PJ, -2, a));
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("operaciones_asignacion",15, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // operaciones_asignacion ::= error ID MAS_MAS 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		parser.msJP.errorSintax(xleft, xright, x, "Error sintactico asignacion de variables. La estructura esperada es: << ID++ || ID-- >>"); RESULT = (new Simbolo(Constantes.INT_VAR_PJ, -1, a));
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("operaciones_asignacion",15, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // operaciones_asignacion ::= ID MENOS_MENOS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		RESULT = (new Simbolo(Constantes.INT_VAR_PJ, -2, a));
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("operaciones_asignacion",15, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // operaciones_asignacion ::= ID MAS_MAS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		RESULT = (new Simbolo(Constantes.INT_VAR_PJ, -1, a));
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("operaciones_asignacion",15, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // operaciones_asignacion ::= ID IGUAL error 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		parser.msJP.errorSintax(xleft, xright, x, "Error sintactico asignacion de variables. La estructura esperada es: << ID = (ID | THIS | NUMERO ENTERO | DECIMAL |ID (params) | Operacion Aritmetica >>");
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("operaciones_asignacion",15, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // operaciones_asignacion ::= error ID IGUAL operaciones_aritmeticas 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico asignacion de variables. La estructura esperada es: << ID = (ID | THIS | NUMERO ENTERO | DECIMAL |ID (params) | Operacion Aritmetica >>"); 
        Simbolo nuevo;
        if(e != null) {
            nuevo = new Simbolo(((Simbolo) e).getTipo(), e, a);
        } else { 
            nuevo = null;
        }
        RESULT = nuevo;
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("operaciones_asignacion",15, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // operaciones_asignacion ::= ID IGUAL operaciones_aritmeticas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		
        Simbolo nuevo;
        if(e != null) {
            nuevo = new Simbolo(((Simbolo) e).getTipo(), e, a);
        } else { 
            nuevo = null;
        }
        RESULT = nuevo;
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("operaciones_asignacion",15, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // estruct_op ::= error llamada_fp 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico asignacion - valor. El token esperado es: << ID, THIS, NUMERO ENTERO, DECIMAL, ID (params) >>"); 
        if(a != null) {
            Tipo tipo = ((Simbolo) a).getTipoFuncion();
            if(tipo != null && tipo.getNombre().equals("Funcion")) {
                RESULT = a;
            } else {
                parser.msJP.errorSemantico(aleft, aright, "Asignacion", "Error, los metodos no pueden asignarse.");
                RESULT = null;
            }
        }
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("estruct_op",14, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // estruct_op ::= error REAL 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		float e = (float)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		parser.msJP.errorSintax(xleft, xright, x, "Error sintactico asignacion - valor. El token esperado es: << ID, THIS, NUMERO ENTERO, DECIMAL, ID (params) >>"); RESULT = new Simbolo(Constantes.FLOAT_VAR_VB_PY, e);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("estruct_op",14, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // estruct_op ::= error NUMERO 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		parser.msJP.errorSintax(xleft, xright, x, "Error sintactico asignacion - valor. El token esperado es: << ID, THIS, NUMERO ENTERO, DECIMAL, ID (params) >>"); RESULT = new Simbolo(Constantes.INT_VAR_VB_PY, e);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("estruct_op",14, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // estruct_op ::= error THIS PUNTO ID 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		parser.msJP.errorSintax(xleft, xright, x, "Error sintactico asignacion - valor. El token esperado es: << ID, THIS, NUMERO ENTERO, DECIMAL, ID (params) >>"); RESULT = parser.mt.buscarIDThis(e.toString(), eleft, eright);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("estruct_op",14, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // estruct_op ::= error ID 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		parser.msJP.errorSintax(xleft, xright, x, "Error sintactico asignacion - valor. El token esperado es: << ID, THIS, NUMERO ENTERO, DECIMAL, ID (params) >>"); RESULT = parser.msJP.metodoBuscarID(e.toString(), eleft, eright);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("estruct_op",14, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // estruct_op ::= error ppa operaciones_aritmeticas PARENTESIS_C 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		parser.msJP.errorSintax(xleft, xright, x, "Error sintactico asignacion - valor. El token esperado es: << ID, THIS, NUMERO ENTERO, DECIMAL, ID (params) >>"); RESULT = e;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("estruct_op",14, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // estruct_op ::= llamada_fp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		
        if(a != null) {
            Tipo tipo = ((Simbolo) a).getTipoFuncion();
            if(tipo != null && tipo.getNombre().equals("Funcion")) {
                RESULT = a;
            } else {
                parser.msJP.errorSemantico(aleft, aright, "Asignacion", "Error, los metodos no pueden asignarse.");
                RESULT = null;
            }
        }
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("estruct_op",14, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // estruct_op ::= REAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		float e = (float)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = new Simbolo(Constantes.FLOAT_VAR_VB_PY, e);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("estruct_op",14, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // estruct_op ::= NUMERO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = new Simbolo(Constantes.INT_VAR_VB_PY, e);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("estruct_op",14, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // estruct_op ::= THIS PUNTO ID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = parser.mt.buscarIDThis(e.toString(), eleft, eright);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("estruct_op",14, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // estruct_op ::= ID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = parser.msJP.metodoBuscarID(e.toString(), eleft, eright);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("estruct_op",14, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // estruct_op ::= PARENTESIS_A operaciones_aritmeticas PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		RESULT = e;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("estruct_op",14, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // operaciones_aritmeticas ::= estruct_op 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("operaciones_aritmeticas",13, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // operaciones_aritmeticas ::= MENOS estruct_op 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = parser.msJP.modificarVariables(e, eleft, eright);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("operaciones_aritmeticas",13, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // operaciones_aritmeticas ::= operaciones_aritmeticas MOD operaciones_aritmeticas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = parser.msJP.realizarOperaciones(a, e, aleft, aright, eleft, eright, 5);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("operaciones_aritmeticas",13, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // operaciones_aritmeticas ::= operaciones_aritmeticas DIV operaciones_aritmeticas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = parser.msJP.realizarOperaciones(a, e, aleft, aright, eleft, eright, 4);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("operaciones_aritmeticas",13, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // operaciones_aritmeticas ::= operaciones_aritmeticas POR operaciones_aritmeticas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = parser.msJP.realizarOperaciones(a, e, aleft, aright, eleft, eright, 3);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("operaciones_aritmeticas",13, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // operaciones_aritmeticas ::= operaciones_aritmeticas MENOS operaciones_aritmeticas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = parser.msJP.realizarOperaciones(a, e, aleft, aright, eleft, eright, 2);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("operaciones_aritmeticas",13, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // operaciones_aritmeticas ::= operaciones_aritmeticas MAS operaciones_aritmeticas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = parser.msJP.realizarOperaciones(a, e, aleft, aright, eleft, eright, 1);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("operaciones_aritmeticas",13, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // tipo_dato ::= CHAR 
            {
              Object RESULT =null;
		RESULT = Constantes.CHAR_VAR_PJ;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("tipo_dato",10, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // tipo_dato ::= FLOAT 
            {
              Object RESULT =null;
		RESULT = Constantes.FLOAT_VAR_PJ;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("tipo_dato",10, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // tipo_dato ::= INT 
            {
              Object RESULT =null;
		RESULT = Constantes.INT_VAR_PJ;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("tipo_dato",10, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // return_dato ::= error CARACTER 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la asignacion de valores. Se recupero hasta el token: << Caracter >>");
        RESULT = new Simbolo(Constantes.CHAR_VAR_PJ, a);
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("return_dato",8, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // return_dato ::= operaciones_aritmeticas 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("return_dato",8, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // return_dato ::= CARACTER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = new Simbolo(Constantes.CHAR_VAR_PJ, a);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("return_dato",8, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // return ::= error return_dato 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		 
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion return. El token esperado es: << return >>");
        if(e != null) {
            parser.mc.returnCuarteto((Simbolo) e);
            RESULT = parser.msJP.agregarCualquierSimbolo(new Simbolo(Constantes.RETURN_VAR, e));
        } else {
            RESULT = null;
        }    
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("return",7, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // return ::= error RETURN return_dato 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion return. Se recupero hasta el token: << return >>");
        if(e != null) {
            parser.mc.returnCuarteto((Simbolo) e);
            RESULT = parser.msJP.agregarCualquierSimbolo(new Simbolo(Constantes.RETURN_VAR, e));
        } else {
            RESULT = null;
        }    
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("return",7, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // return ::= RETURN return_dato 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		 
        if(e != null) {
            parser.mc.returnCuarteto((Simbolo) e);
            RESULT = parser.msJP.agregarCualquierSimbolo(new Simbolo(Constantes.RETURN_VAR, e));
        } else {
            RESULT = null;
        }    
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("return",7, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // estructura_mf_p ::= 
            {
              Object RESULT =null;
		RESULT = null;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("estructura_mf_p",5, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // estructura_mf_p ::= estructura_mf estructura_mf_p 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		
        List<Simbolo> listaSimbolos = new ArrayList<>();
        if(a != null) {
            if(a instanceof Simbolo) {
                listaSimbolos.add((Simbolo) a);
            } else {
                listaSimbolos = (List<Simbolo>) a;
            }
        }
        if(e != null) {
            listaSimbolos.add((Simbolo) e);
        }
        RESULT = listaSimbolos;
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("estructura_mf_p",5, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // estructura_mf ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		parser.msJP.errorSintax(eleft, eright, e, "Error sintactico en la declaracion de procedimientos, no se esperaba el token indicado para la declaracion de un procedimiento. \nLa estructura esperada es: << PUBLIC (VOID || INT || CHAR || FLOAT) ID () { INSTRUCCIONES } >>");
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("estructura_mf",4, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // estructura_mf ::= constructor 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("estructura_mf",4, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // estructura_mf ::= funcion 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("estructura_mf",4, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // estructura_mf ::= metodos 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("estructura_mf",4, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // estruct ::= declaracion_variables_g PUNTO_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		RESULT = a;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("estruct",74, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // variables_locales ::= 
            {
              Object RESULT =null;
		RESULT = null;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("variables_locales",73, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // variables_locales ::= estruct variables_locales 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		
        List<Simbolo> listaSimbolos = new ArrayList<>();
        if(a != null) {
            if(a instanceof Simbolo) {
                listaSimbolos.add((Simbolo) a);
            } else {
                listaSimbolos = (List<Simbolo>) a;
            }
        }
        if(e != null) {
            listaSimbolos.add((Simbolo) e);
        }
        RESULT = listaSimbolos;
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("variables_locales",73, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // constructor ::= constructor_p estructuras_p CORCHETE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		
        ManejadorConstructores manejadorConstructor = ManejadorConstructores.getInstancia();
        RESULT = manejadorConstructor.addConstructor(((Procedimiento) e).getE(), c, ((Procedimiento) e).getU(), eleft, eright);
        parser.mc.finProcedimiento(false, false);
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("constructor",70, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // constructor_p ::= error ID ppa parametros PARENTESIS_C CORCHETE_A 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-5)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion declaracion de constructor. Se recupero haste el token: << public >>");
        parser.mc.addCuartetoProcedimientoJava(a, "JAVA", e, null); 
        parser.mh.agregarInstancias();
        ManejadorConstructores manejadorConstructor = ManejadorConstructores.getInstancia();
        manejadorConstructor.agregarConstructorVacio();
        RESULT = new Procedimiento(a, e);
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("constructor_p",12, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // constructor_p ::= error PUBLIC ID ppa parametros PARENTESIS_C CORCHETE_A 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-6)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-6)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la instruccion declaracion de constructor. Se recupero haste el token: << public >>");
        parser.mc.addCuartetoProcedimientoJava(a, "JAVA", e, null); 
        parser.mh.agregarInstancias();
        ManejadorConstructores manejadorConstructor = ManejadorConstructores.getInstancia();
        manejadorConstructor.agregarConstructorVacio();
        RESULT = new Procedimiento(a, e);
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("constructor_p",12, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // constructor_p ::= PUBLIC ID ppa parametros PARENTESIS_C CORCHETE_A 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		
        parser.mc.addCuartetoProcedimientoJava(a, "JAVA", e, null); 
        parser.mh.agregarInstancias();
        ManejadorConstructores manejadorConstructor = ManejadorConstructores.getInstancia();
        manejadorConstructor.agregarConstructorVacio();
        RESULT = new Procedimiento(a, e);
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("constructor_p",12, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ppa ::= error 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		parser.msJP.errorSintax(xleft, xright, x, "Error sintactico la estructura. Se esperaba el token: << ( >>");
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("ppa",6, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ppa ::= PARENTESIS_A 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("ppa",6, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // encabezado_clase ::= encabezado_clase_p 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("encabezado_clase",17, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // encabezado_clase_p ::= clases_s variables_locales 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		  
        parser.mtp.reset();
        RESULT = new Auxiliar(a, e, null);
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("encabezado_clase_p",16, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // clases_p ::= 
            {
              Object RESULT =null;
		RESULT = new ArrayList<>();
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("clases_p",2, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // clases_p ::= clases clases_p 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		
        List<Simbolo> listaSimbolos = new ArrayList<>();
        if(a != null) {
            if(a instanceof Simbolo) {
                listaSimbolos.add((Simbolo) a);
            } else {
                listaSimbolos = (List<Simbolo>) a;
            }
        }
        if(e != null) {
            listaSimbolos.add((Simbolo) e);
        }
        RESULT = listaSimbolos;
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("clases_p",2, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // clases ::= error CORCHETE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		parser.msJP.errorSintax(eleft, eright, e, "Error sintactico en la declaracion de clases, no se esperaba el token indicado para la contruccion de una nueva clase. Se esperaba la estructura: << PUBLIC CLASS Identificador { INSTRUCIONES }>>");
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("clases",1, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // clases ::= encabezado_clase estructura_mf_p CORCHETE_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		
        Auxiliar aux = (Auxiliar) a;
        ManejadorConstructores manejadorConstructores = ManejadorConstructores.getInstancia();
        manejadorConstructores.comprobarConstructor();
        RESULT = parser.msJP.claseJava((String) aux.getA(), aux.getE(), (Simbolo) aux.getI(), o, aleft, aright); 
        parser.mc.finClase();
        parser.mtp.addResetMemoriaHeap();
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("clases",1, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // clases_s ::= error PUBLIC CLASS ID cca 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la declaracion de clases, no se esperaba el token indicado para la contruccion de una nueva clase. Se recupero hasta el token: << public >>");
        RESULT = a; parser.mc.addClaseActual(a);
        ManejadorHeap mh = ManejadorHeap.getInstancia();
        mh.setPrincipal(true);
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("clases_s",37, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // clases_s ::= error CLASS ID cca 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		
        parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la declaracion de clases, no se esperaba el token indicado para la contruccion de una nueva clase. Se recupero hasta el token: << public >>");
        RESULT = a; parser.mc.addClaseActual(a);
        ManejadorHeap mh = ManejadorHeap.getInstancia();
        mh.setPrincipal(true);
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("clases_s",37, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // clases_s ::= PUBLIC CLASS ID cca 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		
        RESULT = a; parser.mc.addClaseActual(a);
        ManejadorHeap mh = ManejadorHeap.getInstancia();
        mh.setPrincipal(true);
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("clases_s",37, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // cca ::= error 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		parser.msJP.errorSintax(xleft, xright, x, "Error sintactico en la estructura. El token esperado es: << { >>");
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("cca",3, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // cca ::= CORCHETE_A 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("cca",3, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= clases_p 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		parser.mi.addClasesJava(e);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoJava$parser.done_parsing();
          return CUP$SintacticoJava$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

