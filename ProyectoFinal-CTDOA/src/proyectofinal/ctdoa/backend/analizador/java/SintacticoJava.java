
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Nov 10 02:55:10 CST 2020
//----------------------------------------------------

package proyectofinal.ctdoa.backend.analizador.java;

import java_cup.runtime.*;
import proyectofinal.ctdoa.backend.objetos.*;
import proyectofinal.ctdoa.backend.manejadores.*;
import java.util.ArrayList;
import java.util.List;
import proyectofinal.ctdoa.frontend.gui.FrameCTDOA;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Nov 10 02:55:10 CST 2020
  */
public class SintacticoJava extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SintacticoJava() {super();}

  /** Constructor which sets the default scanner. */
  public SintacticoJava(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoJava(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\233\000\002\002\004\000\002\002\003\000\002\045" +
    "\006\000\002\003\005\000\002\003\004\000\002\004\004" +
    "\000\002\004\002\000\002\020\004\000\002\021\003\000" +
    "\002\021\004\000\002\014\010\000\002\106\005\000\002" +
    "\111\004\000\002\111\002\000\002\112\004\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\006\004" +
    "\000\002\006\002\000\002\007\004\000\002\010\002\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\015" +
    "\005\000\002\015\005\000\002\015\005\000\002\015\005" +
    "\000\002\015\005\000\002\015\004\000\002\015\003\000" +
    "\002\016\005\000\002\016\003\000\002\016\005\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\017" +
    "\005\000\002\017\004\000\002\017\004\000\002\017\003" +
    "\000\002\022\005\000\002\022\005\000\002\022\005\000" +
    "\002\022\005\000\002\022\005\000\002\022\005\000\002" +
    "\023\003\000\002\023\003\000\002\024\003\000\002\024" +
    "\004\000\002\031\003\000\002\032\003\000\002\025\005" +
    "\000\002\025\003\000\002\025\003\000\002\026\005\000" +
    "\002\026\003\000\002\027\006\000\002\027\003\000\002" +
    "\030\005\000\002\030\003\000\002\030\003\000\002\030" +
    "\003\000\002\034\006\000\002\034\006\000\002\033\004" +
    "\000\002\036\004\000\002\037\003\000\002\037\003\000" +
    "\002\037\003\000\002\041\003\000\002\041\004\000\002" +
    "\040\004\000\002\040\005\000\002\056\005\000\002\042" +
    "\005\000\002\043\003\000\002\043\003\000\002\044\004" +
    "\000\002\044\004\000\002\044\004\000\002\013\005\000" +
    "\002\013\004\000\002\013\004\000\002\013\003\000\002" +
    "\047\003\000\002\050\007\000\002\046\005\000\002\055" +
    "\004\000\002\054\012\000\002\061\006\000\002\062\005" +
    "\000\002\063\006\000\002\057\005\000\002\060\005\000" +
    "\002\060\006\000\002\060\003\000\002\071\007\000\002" +
    "\072\007\000\002\073\004\000\002\064\005\000\002\065" +
    "\005\000\002\066\005\000\002\067\004\000\002\067\002" +
    "\000\002\070\004\000\002\070\005\000\002\074\007\000" +
    "\002\075\006\000\002\076\007\000\002\076\005\000\002" +
    "\076\002\000\002\077\003\000\002\077\004\000\002\101" +
    "\005\000\002\100\006\000\002\100\004\000\002\035\011" +
    "\000\002\102\005\000\002\103\004\000\002\103\005\000" +
    "\002\103\002\000\002\104\005\000\002\104\006\000\002" +
    "\104\003\000\002\011\011\000\002\105\005\000\002\110" +
    "\004\000\002\110\004\000\002\110\004\000\002\110\004" +
    "\000\002\110\003\000\002\110\003\000\002\110\003\000" +
    "\002\110\003\000\002\110\003\000\002\110\004\000\002" +
    "\110\004\000\002\110\010\000\002\110\004\000\002\110" +
    "\004\000\002\107\004\000\002\107\002\000\002\051\006" +
    "\000\002\052\004\000\002\052\003\000\002\052\002\000" +
    "\002\053\004\000\002\053\005\000\002\053\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0134\000\010\002\ufffb\003\006\047\011\001\002\000" +
    "\010\003\ufff9\047\u012f\057\ufff9\001\002\000\004\002\000" +
    "\001\002\000\004\057\u012c\001\002\000\010\003\133\047" +
    "\135\057\uffee\001\002\000\010\002\ufffb\003\006\047\011" +
    "\001\002\000\004\051\124\001\002\000\016\003\ufff4\011" +
    "\023\012\021\013\022\047\ufff4\057\ufff4\001\002\000\004" +
    "\002\014\001\002\000\004\002\001\001\002\000\006\003" +
    "\030\070\026\001\002\000\004\054\025\001\002\000\010" +
    "\003\ufffa\047\ufffa\057\ufffa\001\002\000\016\003\ufff4\011" +
    "\023\012\021\013\022\047\ufff4\057\ufff4\001\002\000\006" +
    "\003\uffe7\070\uffe7\001\002\000\006\003\uffe6\070\uffe6\001" +
    "\002\000\006\003\uffe8\070\uffe8\001\002\000\010\003\ufff5" +
    "\047\ufff5\057\ufff5\001\002\000\016\003\ufff3\011\ufff3\012" +
    "\ufff3\013\ufff3\047\ufff3\057\ufff3\001\002\000\010\021\040" +
    "\054\uffb8\055\uffb8\001\002\000\006\054\uffb6\055\033\001" +
    "\002\000\006\054\uffb7\055\uffb7\001\002\000\004\054\uffbb" +
    "\001\002\000\006\054\uffb9\055\uffb9\001\002\000\006\003" +
    "\030\070\026\001\002\000\006\054\uffb5\055\035\001\002" +
    "\000\006\003\030\070\026\001\002\000\006\054\uffb3\055" +
    "\uffb3\001\002\000\006\054\uffb4\055\uffb4\001\002\000\034" +
    "\003\052\005\060\007\053\015\042\054\uffec\055\uffec\060" +
    "\055\062\061\063\054\064\056\066\047\067\051\070\050" +
    "\001\002\000\006\054\uffb0\055\uffb0\001\002\000\014\007" +
    "\053\060\055\066\047\067\051\070\050\001\002\000\006" +
    "\054\uffaf\055\uffaf\001\002\000\046\003\uffdf\014\uffdf\015" +
    "\uffdf\016\uffdf\017\uffdf\020\uffdf\022\uffdf\023\uffdf\024\uffdf" +
    "\025\uffdf\026\uffdf\027\uffdf\030\uffdf\032\uffdf\033\uffdf\054" +
    "\uffdf\055\uffdf\061\uffdf\001\002\000\024\014\074\015\076" +
    "\016\100\017\077\020\073\022\uffea\054\uffea\055\uffea\061" +
    "\uffea\001\002\000\006\054\uffb2\055\uffb2\001\002\000\046" +
    "\003\uffdb\014\uffdb\015\uffdb\016\uffdb\017\uffdb\020\uffdb\022" +
    "\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb\027\uffdb\030\uffdb" +
    "\032\uffdb\033\uffdb\054\uffdb\055\uffdb\061\uffdb\001\002\000" +
    "\050\003\uffdd\014\uffdd\015\uffdd\016\uffdd\017\uffdd\020\uffdd" +
    "\022\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd\030" +
    "\uffdd\032\uffdd\033\uffdd\054\uffdd\055\uffdd\060\111\061\uffdd" +
    "\001\002\000\046\003\uffda\014\uffda\015\uffda\016\uffda\017" +
    "\uffda\020\uffda\022\uffda\023\uffda\024\uffda\025\uffda\026\uffda" +
    "\027\uffda\030\uffda\032\uffda\033\uffda\054\uffda\055\uffda\061" +
    "\uffda\001\002\000\012\022\uffe9\054\uffe9\055\uffe9\061\uffe9" +
    "\001\002\000\004\010\107\001\002\000\006\003\062\060" +
    "\063\001\002\000\016\007\053\015\042\060\055\066\047" +
    "\067\051\070\050\001\002\000\006\003\062\060\063\001" +
    "\002\000\046\003\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9" +
    "\020\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9\027" +
    "\uffd9\030\uffd9\032\uffd9\033\uffd9\054\uffd9\055\uffd9\061\uffd9" +
    "\001\002\000\012\022\uffeb\054\uffeb\055\uffeb\061\uffeb\001" +
    "\002\000\006\003\062\060\063\001\002\000\010\054\uffa8" +
    "\055\uffa8\061\070\001\002\000\006\004\066\061\065\001" +
    "\002\000\006\054\uffae\055\uffae\001\002\000\006\054\uffaa" +
    "\055\uffaa\001\002\000\004\061\067\001\002\000\006\054" +
    "\uffab\055\uffab\001\002\000\006\054\uffa9\055\uffa9\001\002" +
    "\000\006\054\uffac\055\uffac\001\002\000\016\014\074\015" +
    "\076\016\100\017\077\020\073\061\075\001\002\000\016" +
    "\007\053\015\042\060\055\066\047\067\051\070\050\001" +
    "\002\000\016\007\053\015\042\060\055\066\047\067\051" +
    "\070\050\001\002\000\046\003\uffde\014\uffde\015\uffde\016" +
    "\uffde\017\uffde\020\uffde\022\uffde\023\uffde\024\uffde\025\uffde" +
    "\026\uffde\027\uffde\030\uffde\032\uffde\033\uffde\054\uffde\055" +
    "\uffde\061\uffde\001\002\000\016\007\053\015\042\060\055" +
    "\066\047\067\051\070\050\001\002\000\016\007\053\015" +
    "\042\060\055\066\047\067\051\070\050\001\002\000\016" +
    "\007\053\015\042\060\055\066\047\067\051\070\050\001" +
    "\002\000\046\003\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3" +
    "\020\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3\027" +
    "\uffe3\030\uffe3\032\uffe3\033\uffe3\054\uffe3\055\uffe3\061\uffe3" +
    "\001\002\000\046\003\uffe2\014\uffe2\015\uffe2\016\uffe2\017" +
    "\uffe2\020\uffe2\022\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2" +
    "\027\uffe2\030\uffe2\032\uffe2\033\uffe2\054\uffe2\055\uffe2\061" +
    "\uffe2\001\002\000\046\003\uffe4\014\uffe4\015\uffe4\016\100" +
    "\017\077\020\073\022\uffe4\023\uffe4\024\uffe4\025\uffe4\026" +
    "\uffe4\027\uffe4\030\uffe4\032\uffe4\033\uffe4\054\uffe4\055\uffe4" +
    "\061\uffe4\001\002\000\046\003\uffe5\014\uffe5\015\uffe5\016" +
    "\100\017\077\020\073\022\uffe5\023\uffe5\024\uffe5\025\uffe5" +
    "\026\uffe5\027\uffe5\030\uffe5\032\uffe5\033\uffe5\054\uffe5\055" +
    "\uffe5\061\uffe5\001\002\000\046\003\uffe1\014\uffe1\015\uffe1" +
    "\016\uffe1\017\uffe1\020\uffe1\022\uffe1\023\uffe1\024\uffe1\025" +
    "\uffe1\026\uffe1\027\uffe1\030\uffe1\032\uffe1\033\uffe1\054\uffe1" +
    "\055\uffe1\061\uffe1\001\002\000\006\054\uffad\055\uffad\001" +
    "\002\000\004\070\110\001\002\000\046\003\uffdc\014\uffdc" +
    "\015\uffdc\016\uffdc\017\uffdc\020\uffdc\022\uffdc\023\uffdc\024" +
    "\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc\032\uffdc\033\uffdc" +
    "\054\uffdc\055\uffdc\061\uffdc\001\002\000\020\007\053\015" +
    "\042\060\055\061\uff6a\066\047\067\051\070\050\001\002" +
    "\000\004\061\122\001\002\000\022\003\116\014\074\015" +
    "\076\016\100\017\077\020\073\055\114\061\uff6b\001\002" +
    "\000\016\007\053\015\042\060\055\066\047\067\051\070" +
    "\050\001\002\000\006\055\117\061\uff6c\001\002\000\006" +
    "\055\uff67\061\uff67\001\002\000\016\007\053\015\042\060" +
    "\055\066\047\067\051\070\050\001\002\000\020\014\074" +
    "\015\076\016\100\017\077\020\073\055\uff68\061\uff68\001" +
    "\002\000\020\014\074\015\076\016\100\017\077\020\073" +
    "\055\uff69\061\uff69\001\002\000\046\003\uff6d\014\uff6d\015" +
    "\uff6d\016\uff6d\017\uff6d\020\uff6d\022\uff6d\023\uff6d\024\uff6d" +
    "\025\uff6d\026\uff6d\027\uff6d\030\uff6d\032\uff6d\033\uff6d\054" +
    "\uff6d\055\uff6d\061\uff6d\001\002\000\046\003\uffe0\014\uffe0" +
    "\015\uffe0\016\uffe0\017\uffe0\020\uffe0\022\uffe0\023\uffe0\024" +
    "\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0\032\uffe0\033\uffe0" +
    "\054\uffe0\055\uffe0\061\uffe0\001\002\000\004\070\125\001" +
    "\002\000\004\056\126\001\002\000\016\003\uffff\011\uffff" +
    "\012\uffff\013\uffff\047\uffff\057\uffff\001\002\000\004\002" +
    "\ufffc\001\002\000\046\003\212\006\171\007\205\011\023" +
    "\012\021\013\022\034\224\035\231\037\200\040\204\043" +
    "\216\045\211\057\uff6e\062\061\063\054\064\056\065\213" +
    "\070\206\001\002\000\046\003\212\006\171\007\205\011" +
    "\023\012\021\013\022\034\224\035\231\037\200\040\204" +
    "\043\216\045\211\057\uff6e\062\061\063\054\064\056\065" +
    "\213\070\206\001\002\000\010\003\ufff2\047\ufff2\057\ufff2" +
    "\001\002\000\010\003\ufff0\047\ufff0\057\ufff0\001\002\000" +
    "\010\003\ufff1\047\ufff1\057\ufff1\001\002\000\012\011\023" +
    "\012\021\013\022\050\143\001\002\000\004\057\141\001" +
    "\002\000\010\003\133\047\135\057\uffee\001\002\000\004" +
    "\057\uffef\001\002\000\010\002\ufffe\003\ufffe\047\ufffe\001" +
    "\002\000\004\070\163\001\002\000\004\070\144\001\002" +
    "\000\004\060\145\001\002\000\012\011\023\012\021\013" +
    "\022\061\uff83\001\002\000\004\070\152\001\002\000\004" +
    "\061\150\001\002\000\004\056\151\001\002\000\046\003" +
    "\uff7f\006\uff7f\007\uff7f\011\uff7f\012\uff7f\013\uff7f\034\uff7f" +
    "\035\uff7f\037\uff7f\040\uff7f\043\uff7f\045\uff7f\057\uff7f\062" +
    "\uff7f\063\uff7f\064\uff7f\065\uff7f\070\uff7f\001\002\000\010" +
    "\003\154\055\153\061\uff85\001\002\000\010\011\023\012" +
    "\021\013\022\001\002\000\006\055\uff80\061\uff80\001\002" +
    "\000\006\055\156\061\uff84\001\002\000\010\011\023\012" +
    "\021\013\022\001\002\000\004\070\160\001\002\000\006" +
    "\055\uff81\061\uff81\001\002\000\004\070\162\001\002\000" +
    "\006\055\uff82\061\uff82\001\002\000\004\060\164\001\002" +
    "\000\012\011\023\012\021\013\022\061\uff83\001\002\000" +
    "\004\061\166\001\002\000\004\056\167\001\002\000\046" +
    "\003\uff87\006\uff87\007\uff87\011\uff87\012\uff87\013\uff87\034" +
    "\uff87\035\uff87\037\uff87\040\uff87\043\uff87\045\uff87\057\uff87" +
    "\062\uff87\063\uff87\064\uff87\065\uff87\070\uff87\001\002\000" +
    "\006\003\030\070\026\001\002\000\004\060\u0126\001\002" +
    "\000\046\003\212\006\171\007\205\011\023\012\021\013" +
    "\022\034\224\035\231\037\200\040\204\043\216\045\211" +
    "\057\uff6e\062\061\063\054\064\056\065\213\070\206\001" +
    "\002\000\054\003\uff75\006\uff75\007\uff75\011\uff75\012\uff75" +
    "\013\uff75\034\uff75\035\uff75\036\uff75\037\uff75\040\uff75\043" +
    "\uff75\044\uff75\045\uff75\046\uff75\057\uff75\062\uff75\063\uff75" +
    "\064\uff75\065\uff75\070\uff75\001\002\000\004\054\u0123\001" +
    "\002\000\006\003\u011b\070\u011a\001\002\000\004\046\u010c" +
    "\001\002\000\046\003\212\006\171\007\205\011\023\012" +
    "\021\013\022\034\224\035\231\037\200\040\204\043\216" +
    "\045\211\057\uff6e\062\061\063\054\064\056\065\213\070" +
    "\206\001\002\000\004\060\367\001\002\000\004\054\366" +
    "\001\002\000\004\054\365\001\002\000\004\054\364\001" +
    "\002\000\004\060\360\001\002\000\004\010\353\001\002" +
    "\000\006\021\351\060\111\001\002\000\004\057\350\001" +
    "\002\000\004\054\347\001\002\000\024\003\052\005\060" +
    "\007\053\015\042\054\uffec\060\055\066\047\067\051\070" +
    "\050\001\002\000\006\054\344\057\345\001\002\000\004" +
    "\060\334\001\002\000\046\003\212\006\171\007\205\011" +
    "\023\012\021\013\022\034\224\035\231\037\200\040\204" +
    "\043\216\045\211\057\uff6e\062\061\063\054\064\056\065" +
    "\213\070\206\001\002\000\054\003\uff76\006\uff76\007\uff76" +
    "\011\uff76\012\uff76\013\uff76\034\uff76\035\uff76\036\uff76\037" +
    "\uff76\040\uff76\043\uff76\044\uff76\045\uff76\046\uff76\057\uff76" +
    "\062\uff76\063\uff76\064\uff76\065\uff76\070\uff76\001\002\000" +
    "\004\060\326\001\002\000\054\003\uff79\006\uff79\007\uff79" +
    "\011\uff79\012\uff79\013\uff79\034\uff79\035\uff79\036\uff79\037" +
    "\uff79\040\uff79\043\uff79\044\uff79\045\uff79\046\uff79\057\uff79" +
    "\062\uff79\063\uff79\064\uff79\065\uff79\070\uff79\001\002\000" +
    "\060\003\uff94\006\uff94\007\uff94\011\uff94\012\uff94\013\uff94" +
    "\034\uff94\035\uff94\036\uff94\037\uff94\040\uff94\041\306\042" +
    "\uff94\043\uff94\044\uff94\045\uff94\046\uff94\057\uff94\062\uff94" +
    "\063\uff94\064\uff94\065\uff94\070\uff94\001\002\000\046\003" +
    "\212\006\171\007\205\011\023\012\021\013\022\034\224" +
    "\035\231\037\200\040\204\043\216\045\211\057\uff6e\062" +
    "\061\063\054\064\056\065\213\070\206\001\002\000\004" +
    "\060\277\001\002\000\054\003\uff77\006\uff77\007\uff77\011" +
    "\uff77\012\uff77\013\uff77\034\uff77\035\uff77\036\uff77\037\uff77" +
    "\040\uff77\043\uff77\044\uff77\045\uff77\046\uff77\057\uff77\062" +
    "\uff77\063\uff77\064\uff77\065\uff77\070\uff77\001\002\000\004" +
    "\060\uffa7\001\002\000\054\003\uff78\006\uff78\007\uff78\011" +
    "\uff78\012\uff78\013\uff78\034\uff78\035\uff78\036\uff78\037\uff78" +
    "\040\uff78\043\uff78\044\uff78\045\uff78\046\uff78\057\uff78\062" +
    "\uff78\063\uff78\064\uff78\065\uff78\070\uff78\001\002\000\024" +
    "\003\244\005\241\007\053\015\042\031\237\060\055\066" +
    "\047\067\051\070\050\001\002\000\004\054\234\001\002" +
    "\000\054\003\212\006\171\007\205\011\023\012\021\013" +
    "\022\034\224\035\231\036\uff6e\037\200\040\204\043\216" +
    "\044\uff6e\045\211\046\uff6e\057\uff6e\062\061\063\054\064" +
    "\056\065\213\070\206\001\002\000\004\056\232\001\002" +
    "\000\046\003\uffa4\006\uffa4\007\uffa4\011\uffa4\012\uffa4\013" +
    "\uffa4\034\uffa4\035\uffa4\037\uffa4\040\uffa4\043\uffa4\045\uffa4" +
    "\057\uffa4\062\uffa4\063\uffa4\064\uffa4\065\uffa4\070\uffa4\001" +
    "\002\000\012\036\uff6f\044\uff6f\046\uff6f\057\uff6f\001\002" +
    "\000\054\003\uff73\006\uff73\007\uff73\011\uff73\012\uff73\013" +
    "\uff73\034\uff73\035\uff73\036\uff73\037\uff73\040\uff73\043\uff73" +
    "\044\uff73\045\uff73\046\uff73\057\uff73\062\uff73\063\uff73\064" +
    "\uff73\065\uff73\070\uff73\001\002\000\012\032\uffc4\033\uffc4" +
    "\054\uffc4\061\uffc4\001\002\000\040\014\074\015\076\016" +
    "\100\017\077\020\073\023\uffce\024\uffce\025\uffce\026\uffce" +
    "\027\uffce\030\uffce\032\uffce\033\uffce\054\uffce\061\uffce\001" +
    "\002\000\004\060\274\001\002\000\012\032\uffc2\033\uffc2" +
    "\054\uffc2\061\uffc2\001\002\000\026\023\uffcd\024\uffcd\025" +
    "\uffcd\026\uffcd\027\uffcd\030\uffcd\032\uffcd\033\uffcd\054\uffcd" +
    "\061\uffcd\001\002\000\004\054\273\001\002\000\010\033" +
    "\270\054\uffcc\061\uffcc\001\002\000\012\033\uffc6\054\uffc6" +
    "\057\266\061\uffc6\001\002\000\012\032\263\033\uffc7\054" +
    "\uffc7\061\uffc7\001\002\000\016\023\247\024\250\025\251" +
    "\026\253\027\252\030\254\001\002\000\020\005\241\007" +
    "\053\015\042\060\055\066\047\067\051\070\050\001\002" +
    "\000\020\005\241\007\053\015\042\060\055\066\047\067" +
    "\051\070\050\001\002\000\020\005\241\007\053\015\042" +
    "\060\055\066\047\067\051\070\050\001\002\000\020\005" +
    "\241\007\053\015\042\060\055\066\047\067\051\070\050" +
    "\001\002\000\020\005\241\007\053\015\042\060\055\066" +
    "\047\067\051\070\050\001\002\000\020\005\241\007\053" +
    "\015\042\060\055\066\047\067\051\070\050\001\002\000" +
    "\012\032\uffcf\033\uffcf\054\uffcf\061\uffcf\001\002\000\012" +
    "\032\uffd0\033\uffd0\054\uffd0\061\uffd0\001\002\000\012\032" +
    "\uffd1\033\uffd1\054\uffd1\061\uffd1\001\002\000\012\032\uffd2" +
    "\033\uffd2\054\uffd2\061\uffd2\001\002\000\012\032\uffd3\033" +
    "\uffd3\054\uffd3\061\uffd3\001\002\000\012\032\uffd4\033\uffd4" +
    "\054\uffd4\061\uffd4\001\002\000\022\005\uffca\007\uffca\015" +
    "\uffca\031\uffca\060\uffca\066\uffca\067\uffca\070\uffca\001\002" +
    "\000\022\005\241\007\053\015\042\031\237\060\055\066" +
    "\047\067\051\070\050\001\002\000\012\032\263\033\uffc5" +
    "\054\uffc5\061\uffc5\001\002\000\006\054\uffcb\061\uffcb\001" +
    "\002\000\024\003\272\005\241\007\053\015\042\031\237" +
    "\060\055\066\047\067\051\070\050\001\002\000\024\003" +
    "\uffc9\005\uffc9\007\uffc9\015\uffc9\031\uffc9\060\uffc9\066\uffc9" +
    "\067\uffc9\070\uffc9\001\002\000\010\033\270\054\uffc8\061" +
    "\uffc8\001\002\000\010\033\uffc6\054\uffc6\061\uffc6\001\002" +
    "\000\006\003\uffa1\070\uffa1\001\002\000\020\005\241\007" +
    "\053\015\042\060\055\066\047\067\051\070\050\001\002" +
    "\000\004\061\276\001\002\000\012\032\uffc3\033\uffc3\054" +
    "\uffc3\061\uffc3\001\002\000\024\003\244\005\241\007\053" +
    "\015\042\031\237\060\055\066\047\067\051\070\050\001" +
    "\002\000\004\061\301\001\002\000\004\056\302\001\002" +
    "\000\046\003\uffa6\006\uffa6\007\uffa6\011\uffa6\012\uffa6\013" +
    "\uffa6\034\uffa6\035\uffa6\037\uffa6\040\uffa6\043\uffa6\045\uffa6" +
    "\057\uffa6\062\uffa6\063\uffa6\064\uffa6\065\uffa6\070\uffa6\001" +
    "\002\000\004\057\304\001\002\000\054\003\uffa5\006\uffa5" +
    "\007\uffa5\011\uffa5\012\uffa5\013\uffa5\034\uffa5\035\uffa5\036" +
    "\uffa5\037\uffa5\040\uffa5\043\uffa5\044\uffa5\045\uffa5\046\uffa5" +
    "\057\uffa5\062\uffa5\063\uffa5\064\uffa5\065\uffa5\070\uffa5\001" +
    "\002\000\056\003\uff93\006\uff93\007\uff93\011\uff93\012\uff93" +
    "\013\uff93\034\uff93\035\uff93\036\uff93\037\uff93\040\uff93\042" +
    "\321\043\uff93\044\uff93\045\uff93\046\uff93\057\uff93\062\uff93" +
    "\063\uff93\064\uff93\065\uff93\070\uff93\001\002\000\004\060" +
    "\314\001\002\000\060\003\uff94\006\uff94\007\uff94\011\uff94" +
    "\012\uff94\013\uff94\034\uff94\035\uff94\036\uff94\037\uff94\040" +
    "\uff94\041\306\042\uff94\043\uff94\044\uff94\045\uff94\046\uff94" +
    "\057\uff94\062\uff94\063\uff94\064\uff94\065\uff94\070\uff94\001" +
    "\002\000\046\003\212\006\171\007\205\011\023\012\021" +
    "\013\022\034\224\035\231\037\200\040\204\043\216\045" +
    "\211\057\uff6e\062\061\063\054\064\056\065\213\070\206" +
    "\001\002\000\004\057\312\001\002\000\060\003\uff96\006" +
    "\uff96\007\uff96\011\uff96\012\uff96\013\uff96\034\uff96\035\uff96" +
    "\036\uff96\037\uff96\040\uff96\041\uff96\042\uff96\043\uff96\044" +
    "\uff96\045\uff96\046\uff96\057\uff96\062\uff96\063\uff96\064\uff96" +
    "\065\uff96\070\uff96\001\002\000\056\003\uff95\006\uff95\007" +
    "\uff95\011\uff95\012\uff95\013\uff95\034\uff95\035\uff95\036\uff95" +
    "\037\uff95\040\uff95\042\uff95\043\uff95\044\uff95\045\uff95\046" +
    "\uff95\057\uff95\062\uff95\063\uff95\064\uff95\065\uff95\070\uff95" +
    "\001\002\000\024\003\244\005\241\007\053\015\042\031" +
    "\237\060\055\066\047\067\051\070\050\001\002\000\004" +
    "\061\316\001\002\000\004\056\317\001\002\000\046\003" +
    "\uff9a\006\uff9a\007\uff9a\011\uff9a\012\uff9a\013\uff9a\034\uff9a" +
    "\035\uff9a\037\uff9a\040\uff9a\043\uff9a\045\uff9a\057\uff9a\062" +
    "\uff9a\063\uff9a\064\uff9a\065\uff9a\070\uff9a\001\002\000\046" +
    "\003\212\006\171\007\205\011\023\012\021\013\022\034" +
    "\224\035\231\037\200\040\204\043\216\045\211\057\uff6e" +
    "\062\061\063\054\064\056\065\213\070\206\001\002\000" +
    "\004\056\323\001\002\000\054\003\uff92\006\uff92\007\uff92" +
    "\011\uff92\012\uff92\013\uff92\034\uff92\035\uff92\036\uff92\037" +
    "\uff92\040\uff92\043\uff92\044\uff92\045\uff92\046\uff92\057\uff92" +
    "\062\uff92\063\uff92\064\uff92\065\uff92\070\uff92\001\002\000" +
    "\046\003\uff99\006\uff99\007\uff99\011\uff99\012\uff99\013\uff99" +
    "\034\uff99\035\uff99\037\uff99\040\uff99\043\uff99\045\uff99\057" +
    "\uff99\062\uff99\063\uff99\064\uff99\065\uff99\070\uff99\001\002" +
    "\000\004\057\325\001\002\000\054\003\uff97\006\uff97\007" +
    "\uff97\011\uff97\012\uff97\013\uff97\034\uff97\035\uff97\036\uff97" +
    "\037\uff97\040\uff97\043\uff97\044\uff97\045\uff97\046\uff97\057" +
    "\uff97\062\uff97\063\uff97\064\uff97\065\uff97\070\uff97\001\002" +
    "\000\024\003\052\005\060\007\053\015\042\060\055\061" +
    "\uffec\066\047\067\051\070\050\001\002\000\004\061\330" +
    "\001\002\000\004\056\331\001\002\000\004\046\uff91\001" +
    "\002\000\004\057\333\001\002\000\060\003\uff98\006\uff98" +
    "\007\uff98\011\uff98\012\uff98\013\uff98\034\uff98\035\uff98\036" +
    "\uff98\037\uff98\040\uff98\041\uff98\042\uff98\043\uff98\044\uff98" +
    "\045\uff98\046\uff98\057\uff98\062\uff98\063\uff98\064\uff98\065" +
    "\uff98\070\uff98\001\002\000\020\003\337\004\335\007\053" +
    "\060\055\066\047\067\051\070\050\001\002\000\006\014" +
    "\uffc0\061\uffc0\001\002\000\006\014\uffbf\061\uffbf\001\002" +
    "\000\006\014\uffbe\061\uffbe\001\002\000\006\014\341\061" +
    "\342\001\002\000\020\003\337\004\335\007\053\060\055" +
    "\066\047\067\051\070\050\001\002\000\004\054\uffbc\001" +
    "\002\000\006\014\uffc1\061\uffc1\001\002\000\054\003\uff71" +
    "\006\uff71\007\uff71\011\uff71\012\uff71\013\uff71\034\uff71\035" +
    "\uff71\036\uff71\037\uff71\040\uff71\043\uff71\044\uff71\045\uff71" +
    "\046\uff71\057\uff71\062\uff71\063\uff71\064\uff71\065\uff71\070" +
    "\uff71\001\002\000\054\003\uff70\006\uff70\007\uff70\011\uff70" +
    "\012\uff70\013\uff70\034\uff70\035\uff70\036\uff70\037\uff70\040" +
    "\uff70\043\uff70\044\uff70\045\uff70\046\uff70\057\uff70\062\uff70" +
    "\063\uff70\064\uff70\065\uff70\070\uff70\001\002\000\004\054" +
    "\uffed\001\002\000\054\003\uff7a\006\uff7a\007\uff7a\011\uff7a" +
    "\012\uff7a\013\uff7a\034\uff7a\035\uff7a\036\uff7a\037\uff7a\040" +
    "\uff7a\043\uff7a\044\uff7a\045\uff7a\046\uff7a\057\uff7a\062\uff7a" +
    "\063\uff7a\064\uff7a\065\uff7a\070\uff7a\001\002\000\010\003" +
    "\uff7e\047\uff7e\057\uff7e\001\002\000\032\003\052\005\060" +
    "\007\053\015\042\054\uffec\060\055\062\061\063\054\064" +
    "\056\066\047\067\051\070\050\001\002\000\004\054\uffb1" +
    "\001\002\000\004\070\354\001\002\000\004\021\355\001" +
    "\002\000\032\003\052\005\060\007\053\015\042\054\uffec" +
    "\060\055\062\061\063\054\064\056\066\047\067\051\070" +
    "\050\001\002\000\004\054\357\001\002\000\054\003\uff72" +
    "\006\uff72\007\uff72\011\uff72\012\uff72\013\uff72\034\uff72\035" +
    "\uff72\036\uff72\037\uff72\040\uff72\043\uff72\044\uff72\045\uff72" +
    "\046\uff72\057\uff72\062\uff72\063\uff72\064\uff72\065\uff72\070" +
    "\uff72\001\002\000\024\003\244\005\241\007\053\015\042" +
    "\031\237\060\055\066\047\067\051\070\050\001\002\000" +
    "\004\061\362\001\002\000\004\056\363\001\002\000\046" +
    "\003\uff9b\006\uff9b\007\uff9b\011\uff9b\012\uff9b\013\uff9b\034" +
    "\uff9b\035\uff9b\037\uff9b\040\uff9b\043\uff9b\045\uff9b\057\uff9b" +
    "\062\uff9b\063\uff9b\064\uff9b\065\uff9b\070\uff9b\001\002\000" +
    "\054\003\uff74\006\uff74\007\uff74\011\uff74\012\uff74\013\uff74" +
    "\034\uff74\035\uff74\036\uff74\037\uff74\040\uff74\043\uff74\044" +
    "\uff74\045\uff74\046\uff74\057\uff74\062\uff74\063\uff74\064\uff74" +
    "\065\uff74\070\uff74\001\002\000\054\003\uff7b\006\uff7b\007" +
    "\uff7b\011\uff7b\012\uff7b\013\uff7b\034\uff7b\035\uff7b\036\uff7b" +
    "\037\uff7b\040\uff7b\043\uff7b\044\uff7b\045\uff7b\046\uff7b\057" +
    "\uff7b\062\uff7b\063\uff7b\064\uff7b\065\uff7b\070\uff7b\001\002" +
    "\000\054\003\uff7d\006\uff7d\007\uff7d\011\uff7d\012\uff7d\013" +
    "\uff7d\034\uff7d\035\uff7d\036\uff7d\037\uff7d\040\uff7d\043\uff7d" +
    "\044\uff7d\045\uff7d\046\uff7d\057\uff7d\062\uff7d\063\uff7d\064" +
    "\uff7d\065\uff7d\070\uff7d\001\002\000\014\003\373\011\023" +
    "\012\021\013\022\070\370\001\002\000\004\021\u0100\001" +
    "\002\000\004\070\375\001\002\000\004\054\374\001\002" +
    "\000\004\054\uff9c\001\002\000\024\003\uffa2\005\uffa2\007" +
    "\uffa2\015\uffa2\031\uffa2\060\uffa2\066\uffa2\067\uffa2\070\uffa2" +
    "\001\002\000\004\021\376\001\002\000\024\003\052\005" +
    "\060\007\053\015\042\054\uffec\060\055\066\047\067\051" +
    "\070\050\001\002\000\004\054\uff9d\001\002\000\016\007" +
    "\053\015\042\060\055\066\047\067\051\070\050\001\002" +
    "\000\016\014\074\015\076\016\100\017\077\020\073\054" +
    "\uff9e\001\002\000\004\057\u0103\001\002\000\004\034\u0104" +
    "\001\002\000\004\060\u0105\001\002\000\024\003\244\005" +
    "\241\007\053\015\042\031\237\060\055\066\047\067\051" +
    "\070\050\001\002\000\004\061\u0107\001\002\000\004\054" +
    "\u0108\001\002\000\054\003\uffa3\006\uffa3\007\uffa3\011\uffa3" +
    "\012\uffa3\013\uffa3\034\uffa3\035\uffa3\036\uffa3\037\uffa3\040" +
    "\uffa3\043\uffa3\044\uffa3\045\uffa3\046\uffa3\057\uffa3\062\uffa3" +
    "\063\uffa3\064\uffa3\065\uffa3\070\uffa3\001\002\000\006\044" +
    "\u0113\057\uff8d\001\002\000\054\003\212\006\171\007\205" +
    "\011\023\012\021\013\022\034\224\035\231\036\uff6e\037" +
    "\200\040\204\043\216\044\uff6e\045\211\046\uff6e\057\uff6e" +
    "\062\061\063\054\064\056\065\213\070\206\001\002\000" +
    "\010\044\uff8c\046\u010c\057\uff8c\001\002\000\024\003\052" +
    "\005\060\007\053\015\042\022\uffec\060\055\066\047\067" +
    "\051\070\050\001\002\000\004\022\u010e\001\002\000\054" +
    "\003\uff8a\006\uff8a\007\uff8a\011\uff8a\012\uff8a\013\uff8a\034" +
    "\uff8a\035\uff8a\036\uff8a\037\uff8a\040\uff8a\043\uff8a\044\uff8a" +
    "\045\uff8a\046\uff8a\057\uff8a\062\uff8a\063\uff8a\064\uff8a\065" +
    "\uff8a\070\uff8a\001\002\000\006\044\uff8b\057\uff8b\001\002" +
    "\000\012\036\u0111\044\uff88\046\uff88\057\uff88\001\002\000" +
    "\004\054\u0112\001\002\000\010\044\uff89\046\uff89\057\uff89" +
    "\001\002\000\004\022\u0116\001\002\000\004\057\u0115\001" +
    "\002\000\054\003\uff90\006\uff90\007\uff90\011\uff90\012\uff90" +
    "\013\uff90\034\uff90\035\uff90\036\uff90\037\uff90\040\uff90\043" +
    "\uff90\044\uff90\045\uff90\046\uff90\057\uff90\062\uff90\063\uff90" +
    "\064\uff90\065\uff90\070\uff90\001\002\000\050\003\212\006" +
    "\171\007\205\011\023\012\021\013\022\034\224\035\231" +
    "\036\uff6e\037\200\040\204\043\216\045\211\057\uff6e\062" +
    "\061\063\054\064\056\065\213\070\206\001\002\000\006" +
    "\036\u0118\057\uff8e\001\002\000\004\054\u0119\001\002\000" +
    "\004\057\uff8f\001\002\000\010\021\u0120\052\u0121\053\u011f" +
    "\001\002\000\004\061\uffd5\001\002\000\004\061\u011d\001" +
    "\002\000\004\056\u011e\001\002\000\046\003\uffa0\006\uffa0" +
    "\007\uffa0\011\uffa0\012\uffa0\013\uffa0\034\uffa0\035\uffa0\037" +
    "\uffa0\040\uffa0\043\uffa0\045\uffa0\057\uffa0\062\uffa0\063\uffa0" +
    "\064\uffa0\065\uffa0\070\uffa0\001\002\000\004\061\uffd6\001" +
    "\002\000\016\007\053\015\042\060\055\066\047\067\051" +
    "\070\050\001\002\000\004\061\uffd7\001\002\000\016\014" +
    "\074\015\076\016\100\017\077\020\073\061\uffd8\001\002" +
    "\000\054\003\uff7c\006\uff7c\007\uff7c\011\uff7c\012\uff7c\013" +
    "\uff7c\034\uff7c\035\uff7c\036\uff7c\037\uff7c\040\uff7c\043\uff7c" +
    "\044\uff7c\045\uff7c\046\uff7c\057\uff7c\062\uff7c\063\uff7c\064" +
    "\uff7c\065\uff7c\070\uff7c\001\002\000\004\057\u0125\001\002" +
    "\000\054\003\uff9f\006\uff9f\007\uff9f\011\uff9f\012\uff9f\013" +
    "\uff9f\034\uff9f\035\uff9f\036\uff9f\037\uff9f\040\uff9f\043\uff9f" +
    "\044\uff9f\045\uff9f\046\uff9f\057\uff9f\062\uff9f\063\uff9f\064" +
    "\uff9f\065\uff9f\070\uff9f\001\002\000\020\003\337\004\335" +
    "\007\053\060\055\066\047\067\051\070\050\001\002\000" +
    "\006\014\341\061\u0128\001\002\000\004\054\uffbd\001\002" +
    "\000\004\054\uffba\001\002\000\004\057\u012b\001\002\000" +
    "\010\003\uff86\047\uff86\057\uff86\001\002\000\010\002\ufffd" +
    "\003\ufffd\047\ufffd\001\002\000\010\003\ufff8\047\ufff8\057" +
    "\ufff8\001\002\000\046\003\212\006\171\007\205\011\023" +
    "\012\021\013\022\034\224\035\231\037\200\040\204\043" +
    "\216\045\211\057\uff6e\062\061\063\054\064\056\065\213" +
    "\070\206\001\002\000\004\070\u0130\001\002\000\004\060" +
    "\u0131\001\002\000\012\011\023\012\021\013\022\061\uff83" +
    "\001\002\000\004\061\u0133\001\002\000\004\056\u0134\001" +
    "\002\000\046\003\ufff7\006\ufff7\007\ufff7\011\ufff7\012\ufff7" +
    "\013\ufff7\034\ufff7\035\ufff7\037\ufff7\040\ufff7\043\ufff7\045" +
    "\ufff7\057\ufff7\062\ufff7\063\ufff7\064\ufff7\065\ufff7\070\ufff7" +
    "\001\002\000\004\057\u0136\001\002\000\010\003\ufff6\047" +
    "\ufff6\057\ufff6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0134\000\016\002\012\003\007\004\004\020\003\021" +
    "\006\045\011\001\001\000\006\014\u012d\106\u012c\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\005\136\006" +
    "\135\011\130\035\127\102\133\105\131\001\001\000\014" +
    "\003\007\004\126\020\003\021\006\045\011\001\001\000" +
    "\002\001\001\000\012\012\014\033\015\111\016\112\017" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\037" +
    "\026\041\030\056\031\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\012\014\033\015\111\023\112\017\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\040\033\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\037\036\056\031\001\001\000" +
    "\002\001\001\000\006\037\035\056\031\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\010\040\015\044\016" +
    "\043\043\045\044\042\051\056\001\001\000\002\001\001" +
    "\000\006\016\122\051\056\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\105\001\001\000\010" +
    "\015\071\016\043\051\056\001\001\000\004\013\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\063" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\015\104\016\043\051\056\001\001\000\010\015\103" +
    "\016\043\051\056\001\001\000\002\001\001\000\010\015" +
    "\102\016\043\051\056\001\001\000\010\015\101\016\043" +
    "\051\056\001\001\000\010\015\100\016\043\051\056\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\015\112\016\043" +
    "\051\056\052\111\001\001\000\002\001\001\000\004\053" +
    "\114\001\001\000\010\015\120\016\043\051\056\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\015\117\016" +
    "\043\051\056\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\060" +
    "\007\226\012\167\034\200\036\201\042\207\044\173\046" +
    "\216\047\221\050\220\051\202\054\224\055\176\057\222" +
    "\061\225\062\174\063\171\064\217\070\214\071\213\074" +
    "\175\075\172\107\u0129\110\227\001\001\000\060\007\226" +
    "\012\167\034\200\036\201\042\207\044\173\046\216\047" +
    "\221\050\220\051\202\054\224\055\176\057\222\061\225" +
    "\062\174\063\171\064\217\070\214\071\213\074\175\075" +
    "\172\107\206\110\227\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\141\001\001\000" +
    "\002\001\001\000\016\005\136\006\137\011\130\035\127" +
    "\102\133\105\131\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\012\145\103\146\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\104\154\001\001\000\004\012\160\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\156\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\012\145\103\164\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\037\026\041\u0128\056\031\001\001\000\002\001\001" +
    "\000\060\007\226\012\167\034\200\036\201\042\207\044" +
    "\173\046\216\047\221\050\220\051\202\054\224\055\176" +
    "\057\222\061\225\062\174\063\171\064\217\070\214\071" +
    "\213\074\175\075\172\107\u0123\110\227\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\u011b\001\001\000" +
    "\010\077\u0108\100\u010a\101\u0109\001\001\000\060\007\226" +
    "\012\167\034\200\036\201\042\207\044\173\046\216\047" +
    "\221\050\220\051\202\054\224\055\176\057\222\061\225" +
    "\062\174\063\171\064\217\070\214\071\213\074\175\075" +
    "\172\107\u0101\110\227\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\010\345\015\044\016\043\051" +
    "\056\001\001\000\002\001\001\000\002\001\001\000\060" +
    "\007\226\012\167\034\200\036\201\042\207\044\173\046" +
    "\216\047\221\050\220\051\202\054\224\055\176\057\222" +
    "\061\225\062\174\063\171\064\217\070\214\071\213\074" +
    "\175\075\172\107\331\110\227\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\066\306\067" +
    "\304\072\307\001\001\000\060\007\226\012\167\034\200" +
    "\036\201\042\207\044\173\046\216\047\221\050\220\051" +
    "\202\054\224\055\176\057\222\061\225\062\174\063\171" +
    "\064\217\070\214\071\213\074\175\075\172\107\302\110" +
    "\227\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\015\235\016\043\022" +
    "\237\023\245\024\241\025\242\026\244\027\234\051\056" +
    "\001\001\000\002\001\001\000\060\007\226\012\167\034" +
    "\200\036\201\042\207\044\173\046\216\047\221\050\220" +
    "\051\202\054\224\055\176\057\222\061\225\062\174\063" +
    "\171\064\217\070\214\071\213\074\175\075\172\107\232" +
    "\110\227\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\032\266\001\001\000\002" +
    "\001\001\000\004\031\263\001\001\000\002\001\001\000" +
    "\012\015\235\016\043\023\261\051\056\001\001\000\012" +
    "\015\235\016\043\023\260\051\056\001\001\000\012\015" +
    "\235\016\043\023\257\051\056\001\001\000\012\015\235" +
    "\016\043\023\256\051\056\001\001\000\012\015\235\016" +
    "\043\023\255\051\056\001\001\000\012\015\235\016\043" +
    "\023\254\051\056\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\015\235\016" +
    "\043\022\237\023\245\026\264\027\234\051\056\001\001" +
    "\000\004\031\263\001\001\000\002\001\001\000\022\015" +
    "\235\016\043\022\237\023\245\025\270\026\244\027\234" +
    "\051\056\001\001\000\002\001\001\000\004\032\266\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\015\235" +
    "\016\043\022\274\023\245\051\056\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\015\235\016\043\022\237" +
    "\023\245\024\277\025\242\026\244\027\234\051\056\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\065\321\073" +
    "\317\001\001\000\002\001\001\000\010\066\306\067\312" +
    "\072\307\001\001\000\060\007\226\012\167\034\200\036" +
    "\201\042\207\044\173\046\216\047\221\050\220\051\202" +
    "\054\224\055\176\057\222\061\225\062\174\063\171\064" +
    "\217\070\214\071\213\074\175\075\172\107\310\110\227" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\015\235\016\043\022\237\023\245\024\314" +
    "\025\242\026\244\027\234\051\056\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\060\007\226" +
    "\012\167\034\200\036\201\042\207\044\173\046\216\047" +
    "\221\050\220\051\202\054\224\055\176\057\222\061\225" +
    "\062\174\063\171\064\217\070\214\071\213\074\175\075" +
    "\172\107\323\110\227\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\010\326\015\044\016\043\051\056\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\016\335\030\337" +
    "\051\056\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\016\335\030\342" +
    "\051\056\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\010\040\015\044\016" +
    "\043\043\351\044\042\051\056\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\010\040\015" +
    "\044\016\043\043\355\044\042\051\056\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\015\235\016\043\022" +
    "\237\023\245\024\360\025\242\026\244\027\234\051\056" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\012\370\060\371\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\010\376\015\044\016" +
    "\043\051\056\001\001\000\002\001\001\000\010\015\u0100" +
    "\016\043\051\056\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\015\235" +
    "\016\043\022\237\023\245\024\u0105\025\242\026\244\027" +
    "\234\051\056\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\076\u0113\001\001\000\060\007" +
    "\226\012\167\034\200\036\201\042\207\044\173\046\216" +
    "\047\221\050\220\051\202\054\224\055\176\057\222\061" +
    "\225\062\174\063\171\064\217\070\214\071\213\074\175" +
    "\075\172\107\u010f\110\227\001\001\000\010\077\u010e\100" +
    "\u010a\101\u0109\001\001\000\012\010\u010c\015\044\016\043" +
    "\051\056\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\060\007\226\012\167\034\200\036\201\042\207" +
    "\044\173\046\216\047\221\050\220\051\202\054\224\055" +
    "\176\057\222\061\225\062\174\063\171\064\217\070\214" +
    "\071\213\074\175\075\172\107\u0116\110\227\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\015\u0121" +
    "\016\043\051\056\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\016\335\030\u0126\051\056\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\060\007\226\012\167\034\200\036\201\042\207\044\173" +
    "\046\216\047\221\050\220\051\202\054\224\055\176\057" +
    "\222\061\225\062\174\063\171\064\217\070\214\071\213" +
    "\074\175\075\172\107\u0134\110\227\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\012\145\103\u0131\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoJava$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoJava$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoJava$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public ManejadorSintacticoJP msJP = ManejadorSintacticoJP.getInstacia();
    public ManejadorInstancias mi = ManejadorInstancias.getInstance();
    public ManejadorCuartetos mc = ManejadorCuartetos.getInstancia();
    public ManejadorHeap mh = ManejadorHeap.getInstancia();
    public ManejadorTablaPila mtp = ManejadorTablaPila.getInstancia();
    public ManejadorBuscarMetodos mbm = ManejadorBuscarMetodos.getInstancia();
    public ManejadorThis mt = ManejadorThis.getInstancia();
    public int contadorLineas;
    private FrameCTDOA frameCTDOA;

    public SintacticoJava(LexicoJava lexer) { 
        super(lexer);   
        msJP.nuevoAnalisis();
    }

    public void setContadorLineas(int contadorLineas){
        this.contadorLineas = contadorLineas;
        msJP.setContadorLineas(contadorLineas);
    }

    public void setFrameCTDOA(FrameCTDOA frameCTDOA) {
        this.frameCTDOA = frameCTDOA;
        msJP.setFrameCTDOA(frameCTDOA);
    }

    public void setAccion(String tipo, String mensaje, String accion){
        frameCTDOA.addErrores("ERROR Lexico Tipo: " + tipo + "\t Mensaje: " + mensaje + "\tAcción: ERROR\n");
    }

    @Override
    public void syntax_error(Symbol s){
        try {
            msJP.errorSintax(s.left, s.right, s.value, 
                "Uf, error sintactico cerca de la linea y columna indicada porfavor revisa que el token\n "
                        + "\t\tidicado corresponda a la declaracion de instruccion correspondiente. Vuelve a intentarlo."
            );
        } catch (Exception e) {
            System.out.println("Error " + e.toString());
        }
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SintacticoJava$actions {
  private final SintacticoJava parser;

  /** Constructor */
  CUP$SintacticoJava$actions(SintacticoJava parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SintacticoJava$do_action(
    int                        CUP$SintacticoJava$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoJava$parser,
    java.util.Stack            CUP$SintacticoJava$stack,
    int                        CUP$SintacticoJava$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoJava$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoJava$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // param_p ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		 
        RESULT = new ArrayList<>();
        parser.msJP.errorSintax(eleft, eright, e, "Error sintactico en la instruccion de llamada a una funcion, no se esperaba el token indicado para el reconocimiento de parametros.");
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("param_p",41, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // param_p ::= param_p COMA operaciones_aritmeticas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = parser.msJP.lista(a, e);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("param_p",41, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // param_p ::= COMA operaciones_aritmeticas 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("param_p",41, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // param ::= 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("param",40, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // param ::= operaciones_aritmeticas 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("param",40, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // param ::= operaciones_aritmeticas param_p 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		
        List<Simbolo> lista = new ArrayList<>();
        if (e != null) {
            lista.add((Simbolo) e);
        }
        if(a instanceof Simbolo) {
            lista.add((Simbolo) a);
        } else {
            lista.addAll((List<Simbolo>) a);
        }
        RESULT = lista;
    
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("param",40, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // llamada_fp ::= ID PARENTESIS_A param PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		RESULT = parser.mbm.buscarMetodo("JAVA_" + parser.mc.getClaseActual() + "_", a, e, aleft, aright, 3, false);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("llamada_fp",39, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // estructuras_p ::= 
            {
              Object RESULT =null;
		RESULT = null;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("estructuras_p",69, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // estructuras_p ::= estructuras estructuras_p 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = parser.msJP.simbolosReturn(e, a, aleft, aright);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("estructuras_p",69, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // estructuras ::= error CORCHETE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		parser.msJP.errorSintax(eleft, eright, e, "Error en el bloque de instrucciones de la estructura, por favor revisa la entrada en la linea y columna indicada.");
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("estructuras",70, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // estructuras ::= error PUNTO_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		parser.msJP.errorSintax(eleft, eright, e, "Error en el bloque de instrucciones de la estructura, por favor revisa la entrada en la linea y columna indicada.");
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("estructuras",70, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // estructuras ::= THIS PUNTO ID IGUAL asignacion PUNTO_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		parser.msJP.asignacionVariablesThis(a, e, aleft, aright);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("estructuras",70, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // estructuras ::= return PUNTO_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		RESULT = e;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("estructuras",70, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // estructuras ::= llamada_fp PUNTO_COMA 
            {
              Object RESULT =null;
		
        Object as = null;
        parser.mc.addYRemovePuntero(as, false);
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("estructuras",70, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // estructuras ::= switch 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("estructuras",70, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // estructuras ::= estructura_if 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("estructuras",70, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // estructuras ::= for 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("estructuras",70, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // estructuras ::= do_while 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("estructuras",70, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // estructuras ::= while 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("estructuras",70, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // estructuras ::= asignacion_variables PUNTO_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		
        if(e != null) {      
            parser.msJP.asignacionVariables(e, eleft, eright);
        } else { 
            parser.msJP.asignacionVariables(null, eleft, eright);
        }
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("estructuras",70, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // estructuras ::= declaracion_variables PUNTO_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		RESULT = a;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("estructuras",70, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // estructuras ::= solicitud_datos PUNTO_COMA 
            {
              Object RESULT =null;
		RESULT = null;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("estructuras",70, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // estructuras ::= mensaje_terminal PUNTO_COMA 
            {
              Object RESULT =null;
		RESULT = null;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("estructuras",70, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // metodos ::= metodos_p estructuras_p CORCHETE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		
    RESULT = parser.msJP.metodos(((Procedimiento) e).getE(), i, ((Procedimiento) e).getU(), ileft, iright);
    parser.mc.finProcedimiento(false, false);
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("metodos",67, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // metodos_p ::= PUBLIC VOID ID PARENTESIS_A parametros PARENTESIS_C CORCHETE_A 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		
        parser.mc.addCuartetoProcedimientoJava(a, "JAVA", e, null); 
        RESULT = new Procedimiento(a, e);
        parser.mtp.addThis();
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("metodos_p",7, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // parametros_p ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		 
        RESULT = new ArrayList<>();
        parser.msJP.errorSintax(eleft, eright, e, "Error sintactico en la instruccion de parametros, no se esperaba el token indicado.");
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("parametros_p",66, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // parametros_p ::= parametros_p COMA tipo_dato ID 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		
        Simbolo s = parser.msJP.declaraUnaVariableParametro((Tipo) e, a, aleft, aright);
        List<Simbolo> listaSimbolos = new ArrayList<>();
        if(i != null) {
            if(i instanceof Simbolo) {
                listaSimbolos.add((Simbolo) i);
            } else {
                listaSimbolos = (List<Simbolo>) i;
            }
        }
        if(s != null) {
            listaSimbolos.add((Simbolo) s);
        }
        RESULT = listaSimbolos;
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("parametros_p",66, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // parametros_p ::= COMA tipo_dato ID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = parser.msJP.declaraUnaVariableParametro((Tipo) e, a, aleft, aright);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("parametros_p",66, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // parametros ::= 
            {
              Object RESULT =null;
		RESULT = new ArrayList<>();
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("parametros",65, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // parametros ::= tipo_dato ID parametros_p 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		
        Simbolo s = parser.msJP.declaraUnaVariableParametro((Tipo) e, a, aleft, aright);
        List<Simbolo> listaSimbolos = new ArrayList<>();
        if(i != null) {
            if(i instanceof Simbolo) {
                listaSimbolos.add((Simbolo) i);
            } else {
                listaSimbolos = (List<Simbolo>) i;
            }
        }
        if(s != null) {
            listaSimbolos.add((Simbolo) s);
        }
        RESULT = listaSimbolos;
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("parametros",65, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // parametros ::= tipo_dato ID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = parser.msJP.declaraUnaVariableParametro((Tipo) e, a, aleft, aright);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("parametros",65, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // funcion ::= funcion_p estructuras_p CORCHETE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		
        RESULT = parser.msJP.funcion(((Procedimiento) e).getE(), ((Procedimiento) e).getA(), o, null, ((Procedimiento) e).getU(), oleft, oright);
        parser.mc.finProcedimiento(false, true);
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("funcion",64, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // funcion_p ::= PUBLIC tipo_dato ID PARENTESIS_A parametros PARENTESIS_C CORCHETE_A 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		
        parser.mc.addCuartetoProcedimientoJava(e, "JAVA", i, (Tipo) a);
        Simbolo  s = new Simbolo((Tipo) a, null, e);
        Funcion f = new Funcion();
        f.setParametros(i);
        s.setValor(f);
        s.setTipo(new Tipo("Funcion", Constantes.FUNCION));
        s.setTipoFuncion((Tipo) a);
        RESULT = new Procedimiento(e, i, (Tipo) a);
        parser.mtp.addThis();
        parser.msJP.declaraUnaVariable(s, aleft, aright);
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("funcion_p",27, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // caso ::= caso_p estructuras_p 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		
        RESULT = parser.msJP.crearEstructuraCases(a, e, aleft, aright, false);
        parser.mc.finCadaCaso();
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("caso",62, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // caso ::= caso_p estructuras_p BREAK PUNTO_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		
        RESULT = parser.msJP.crearEstructuraCases(a, e, aleft, aright, false);
        parser.mc.finCadaCaso();
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("caso",62, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // caso_p ::= CASE return_dato DOS_PUNTOS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		parser.mc.condicional((Simbolo) a); RESULT = a;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("caso_p",63, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // cantidad_casos ::= caso cantidad_casos 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = parser.msJP.lista(a, e);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("cantidad_casos",61, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // cantidad_casos ::= caso 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("cantidad_casos",61, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // caso_default ::= 
            {
              Object RESULT =null;
		parser.mc.etiquetaGoto();
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("caso_default",60, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // caso_default ::= DEFAULT DOS_PUNTOS estructuras_p 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		  
        parser.mc.etiquetaGoto();
        RESULT = parser.msJP.crearEstructuraCases(null, a, aleft, aright, true);
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("caso_default",60, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // caso_default ::= DEFAULT DOS_PUNTOS estructuras_p BREAK PUNTO_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		  
        parser.mc.etiquetaGoto();
        RESULT = parser.msJP.crearEstructuraCases(null, a, aleft, aright, true);
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("caso_default",60, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // switch ::= switch_p cantidad_casos caso_default CORCHETE_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		
        RESULT = parser.msJP.crearCase(e, i, a, eleft, eright);
        parser.mc.etqFinTurno();
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("switch",59, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // switch_p ::= SWITCH PARENTESIS_A return_dato PARENTESIS_C CORCHETE_A 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		parser.mc.setEtiquetaSwitch((Simbolo) a); RESULT = a;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("switch_p",58, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // estructura_if ::= if else_if_p else 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = parser.msJP.construirCondicionalIf(a, e, i);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("estructura_if",54, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // estructura_if ::= if else_if_p 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = parser.msJP.construirCondicionalIf(a, e, null);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("estructura_if",54, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // else_if_p ::= 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("else_if_p",53, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // else_if_p ::= else_if else_if_p 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = parser.msJP.lista(a, e);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("else_if_p",53, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // else_if ::= ie estructuras_p CORCHETE_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		RESULT = parser.msJP.crearEstructuraCondicional(e, a, 2); parser.mc.imprimirResto();
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("else_if",52, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // else ::= ee estructuras_p CORCHETE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		RESULT = parser.msJP.crearEstructuraCondicional(e, false, 3); parser.mc.imprimirResto();
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("else",51, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // if ::= ii estructuras_p CORCHETE_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		RESULT = parser.msJP.crearEstructuraCondicional(e, a, 1); parser.mc.imprimirResto();
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("if",50, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ee ::= ELSE CORCHETE_A 
            {
              Object RESULT =null;
		parser.mc.escribirEtiquetasInicio(false); parser.mc.escribirEtiquetaFin(); parser.mc.nuevoAnalisisBoolean(); 
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("ee",57, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ie ::= ELSE_IF PARENTESIS_A condicional PARENTESIS_C CORCHETE_A 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		parser.mc.escribirEtiquetasInicio(false); parser.mc.escribirEtiquetaFin(); parser.mc.nuevoAnalisisBoolean(); RESULT = e;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("ie",56, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ii ::= IF PARENTESIS_A condicional PARENTESIS_C CORCHETE_A 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		parser.mc.escribirEtiquetasInicio(false); parser.mc.escribirEtiquetaFin(); parser.mc.nuevoAnalisisBoolean(); RESULT = e;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("ii",55, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // var ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		parser.msJP.errorSintax(eleft, eright, e, "Error sintactico en la declaracion de datos, de la instruccion for, no se esperaba el token indicado.");
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("var",46, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // var ::= tipo_dato ID IGUAL return_dato 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = parser.msJP.comprobarAsignacionFor(i, e, eleft, eright, (Tipo) a);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("var",46, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // var ::= ID IGUAL operaciones_aritmeticas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = parser.msJP.comprobarAsignacionFor(e, a, aleft, aright, null);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("var",46, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // for ::= for_asignacion estructuras_p CORCHETE_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		
        if(((For) a).getA() != null && ((For) a).getE() != null && ((For) a).getI() != null) {
            RESULT = parser.msJP.contruirEstructuraCiloDW(o, true, 3);
        } else {
            RESULT = parser.msJP.contruirEstructuraCiloDW(o, null, 3);;
        }
        parser.mc.actualizar();
        parser.mc.imprimirResto();
        parser.msJP.removerCualquierSimbolo(((For) a).getA());
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("for",45, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // for_asignacion ::= for_condicional operaciones_asignacion PARENTESIS_C CORCHETE_A 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		
        For f = (For) a;
        f.setI(i);
        RESULT = parser.mc.addForJPA(f, (Simbolo) i);
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("for_asignacion",49, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // for_condicional ::= for_var condicional PUNTO_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		 
        ((For) a).setE(e);
        parser.mc.etiqueta();
        RESULT = a;
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("for_condicional",48, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // for_var ::= FOR PARENTESIS_A var PUNTO_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		RESULT = new For(a, parser.mc.addForJPV((Simbolo) a));
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("for_var",47, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // do_while ::= do_while_p estructuras_p CORCHETE_C WHILE PARENTESIS_A condicional PARENTESIS_C PUNTO_COMA 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-7)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		
        RESULT = parser.msJP.contruirEstructuraCiloDW(e, a, 2);
        parser.mc.escribirEtiquetasInicio(false);
        parser.mc.escribirEtiquetaFin();
        parser.mc.finDoWhile((String) i);
        parser.mc.imprimirResto();
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("do_while",42, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // do_while_p ::= DO CORCHETE_A 
            {
              Object RESULT =null;
		
        RESULT = parser.mc.addDoWhile();
        parser.mc.nuevoAnalisisBoolean();
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("do_while_p",43, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // while ::= while_p estructuras_p CORCHETE_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		
        RESULT = parser.msJP.contruirEstructuraCiloDW(e, ((While) a).getA(), 1);
        parser.mc.finWhile(((While) a).getIdEtiqueta());
        parser.mc.imprimirResto();
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("while",36, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // while_p ::= while_n PARENTESIS_A condicional PARENTESIS_C CORCHETE_A 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		
        parser.mc.nuevoAnalisisBoolean();
        parser.mc.escribirEtiquetasInicio(false);
        parser.mc.addEtiquetasEstructuras();
        ((While) w).setA(a);
        RESULT = w;
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("while_p",38, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // while_n ::= WHILE 
            {
              Object RESULT =null;
		RESULT = new While(parser.mc.addWhile(), null);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("while_n",37, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // p_parentesis ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		parser.msJP.errorSintax(eleft, eright, e, "Error sintactico en la instruccion de solicitud de datos, se esperaba una cadena.");
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("p_parentesis",9, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // p_parentesis ::= error PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		parser.msJP.errorSintax(eleft, eright, e, "Error sintactico en la instruccion de solicitud de datos, se esperaba una cadena.");
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("p_parentesis",9, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // p_parentesis ::= PARENTESIS_A PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("p_parentesis",9, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // p_parentesis ::= PARENTESIS_A CADENA PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		parser.mc.imprimir(new Simbolo(null, e));
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("p_parentesis",9, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // solicitud_datos ::= CINPUT p_parentesis 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		RESULT = new Simbolo(Constantes.CHAR_VAR_VB_PY, '\b', 2);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("solicitud_datos",34, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // solicitud_datos ::= FINPUT p_parentesis 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		RESULT = new Simbolo(Constantes.FLOAT_VAR_VB_PY, 0, 3);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("solicitud_datos",34, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // solicitud_datos ::= IINPUT p_parentesis 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		RESULT = new Simbolo(Constantes.INT_VAR_VB_PY, 0, 1);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("solicitud_datos",34, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // asignacion ::= solicitud_datos 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("asignacion",33, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // asignacion ::= return_dato 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("asignacion",33, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // asignacion_variables ::= ID IGUAL asignacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		
        if(e != null) {
            RESULT = new Simbolo(((Simbolo) e).getTipo(), (Simbolo) e, a);
        } else { 
            RESULT = e;
        }
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("asignacion_variables",32, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // asignacion_variables_d ::= ID IGUAL asignacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		
        if(e != null) {
            RESULT = new Simbolo(((Simbolo) e).getTipo(), ((Simbolo) e), a);
        } else { 
            RESULT = e;
        }
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("asignacion_variables_d",44, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // lista_id_p ::= lista_id_p COMA lista_id_valores 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		
        List<Simbolo> listaSimbolos = new ArrayList<>();
        if(a != null) {
            if(a instanceof Simbolo) {
                listaSimbolos.add((Simbolo) a);
            } else {
                listaSimbolos = (List<Simbolo>) a;
            }
        }
        if(e != null) {
            listaSimbolos.add((Simbolo) e);
        }
        RESULT = listaSimbolos;
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("lista_id_p",30, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // lista_id_p ::= COMA lista_id_valores 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("lista_id_p",30, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // lista_ids ::= lista_id_valores lista_id_p 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		
        List<Simbolo> listaSimbolos = new ArrayList<>();
        if(a != null) {
            if(a instanceof Simbolo) {
                listaSimbolos.add((Simbolo) a);
            } else {
                listaSimbolos = (List<Simbolo>) a;
            }
        }
        if(e != null) {
            listaSimbolos.add((Simbolo) e);
        }
        RESULT = listaSimbolos;
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("lista_ids",31, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // lista_ids ::= lista_id_valores 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("lista_ids",31, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // lista_id_valores ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		
        parser.msJP.errorSintax(eleft, eright, e, "Error sintactico en la declaracion de variables, no se esperaba el token indicado.");
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("lista_id_valores",29, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // lista_id_valores ::= ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = new Simbolo(null, null, a.toString());
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("lista_id_valores",29, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // lista_id_valores ::= asignacion_variables_d 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("lista_id_valores",29, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // declaracion_variables ::= tipo_dato lista_ids 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = parser.msJP.declararVariables(new Simbolo((Tipo)a, e), aleft, aright);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("declaracion_variables",28, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // declaracion_variables_g ::= tipo_dato lista_ids 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = parser.msJP.declararVariablesGlobales(new Simbolo((Tipo)a, e), aleft, aright);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("declaracion_variables_g",25, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // mensaje_terminal ::= CONSOLA_LINEA PARENTESIS_A concatenacion PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		parser.mc.imprimirNuevaLinea(); RESULT = e;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("mensaje_terminal",26, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // mensaje_terminal ::= CONSOLA PARENTESIS_A concatenacion PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		RESULT = e;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("mensaje_terminal",26, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // concatenacion ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		parser.msJP.errorSintax(eleft, eright, e, "Error sintactico en la concatenacion de cadenas, de la instruccion System.out.print.");
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("concatenacion",22, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // concatenacion ::= estruct_op 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		parser.mc.imprimirPrintf(0, (Simbolo) e); RESULT = e;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("concatenacion",22, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // concatenacion ::= CADENA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		parser.mc.imprimir(new Simbolo(null, e)); RESULT = e;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("concatenacion",22, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // concatenacion ::= concatenacion MAS concatenacion 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("concatenacion",22, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // condicional_not ::= operaciones_logicas 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		parser.mc.gotoEscribir(); RESULT = e;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("condicional_not",21, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // condicional_not ::= NOT PARENTESIS_A operaciones_logicas PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		parser.mc.gotoEscribir(); RESULT = parser.msJP.comprobacionCondicional(a, true, 3, aleft, aright);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("condicional_not",21, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // condicional_and ::= condicional_not 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = a;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("condicional_and",20, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // condicional_and ::= condicional_and and condicional_and 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = parser.msJP.comprobacionCondicional(a, e, 1, cleft, cright);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("condicional_and",20, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // condicional_or ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		parser.msJP.errorSintax(eleft, eright, e, "Error sintactico en las operacionaciones logicas, de la intruccion condicional.");
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("condicional_or",19, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // condicional_or ::= condicional_and 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = a;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("condicional_or",19, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // condicional_or ::= condicional_or or condicional_or 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = parser.msJP.comprobacionCondicional(a, e, 2, cleft, cright);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("condicional_or",19, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // or ::= OR 
            {
              Object RESULT =null;
		parser.mc.or(); parser.mc.condicionalOR(); if (!parser.mc.ultimoAgregadorEtiqueta()) { parser.mc.escribirEtiqueta();}
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("or",24, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // and ::= AND 
            {
              Object RESULT =null;
		parser.mc.and(); parser.mc.condicionalAND(); parser.mc.escribirEtiqueta();
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("and",23, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // condicional ::= error CORCHETE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		
        parser.mc.nuevoAnalisisBoolean();  
        parser.msJP.errorSintax(eleft, eright, e, "Error sintactico en las operacionaciones logicas, de la intruccion condicional.");
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("condicional",18, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // condicional ::= condicional_or 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		parser.mc.nuevoAnalisisBoolean(); RESULT = e;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("condicional",18, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // tipos_comparacion ::= CARACTER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		  
	RESULT = new Simbolo(Constantes.CHAR_VAR_PJ, a);
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("tipos_comparacion",17, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // tipos_comparacion ::= operaciones_aritmeticas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = a;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("tipos_comparacion",17, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // operaciones_logicas ::= tipos_comparacion MAYOR_IGUAL tipos_comparacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = parser.msJP.comprobarOperacionesLogicas(a, e, 6, cleft, cright);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",16, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // operaciones_logicas ::= tipos_comparacion MAYOR tipos_comparacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = parser.msJP.comprobarOperacionesLogicas(a, e, 5, cleft, cright);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",16, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // operaciones_logicas ::= tipos_comparacion MENOR_IGUAL tipos_comparacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = parser.msJP.comprobarOperacionesLogicas(a, e, 4, cleft, cright);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",16, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // operaciones_logicas ::= tipos_comparacion MENOR tipos_comparacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = parser.msJP.comprobarOperacionesLogicas(a, e, 3, cleft, cright);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",16, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // operaciones_logicas ::= tipos_comparacion DIFERENTE tipos_comparacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = parser.msJP.comprobarOperacionesLogicas(a, e, 2, cleft, cright);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",16, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // operaciones_logicas ::= tipos_comparacion IGUAL_IGUAL tipos_comparacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = parser.msJP.comprobarOperacionesLogicas(a, e, 1, cleft, cright);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",16, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // operaciones_asignacion ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		parser.msJP.errorSintax(eleft, eright, e, "Error sintactico en la asignacion de incremento en la estructura for.");
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("operaciones_asignacion",13, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // operaciones_asignacion ::= ID MENOS_MENOS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		RESULT = (new Simbolo(Constantes.INT_VAR_PJ, -2, a));
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("operaciones_asignacion",13, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // operaciones_asignacion ::= ID MAS_MAS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		RESULT = (new Simbolo(Constantes.INT_VAR_PJ, -1, a));
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("operaciones_asignacion",13, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // operaciones_asignacion ::= ID IGUAL operaciones_aritmeticas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		
        Simbolo nuevo;
        if(e != null) {
            nuevo = new Simbolo(((Simbolo) e).getTipo(), e, a);
        } else { 
            nuevo = null;
        }
        RESULT = nuevo;
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("operaciones_asignacion",13, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // estruct_op ::= llamada_fp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		
        if(a != null) {
            Tipo tipo = ((Simbolo) a).getTipoFuncion();
            if(tipo != null && tipo.getNombre().equals("Funcion")) {
                RESULT = a;
            } else {
                parser.msJP.errorSemantico(aleft, aright, "Asignacion", "Error, los metodos no pueden asignarse.");
                RESULT = null;
            }
        }
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("estruct_op",12, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // estruct_op ::= REAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		float e = (float)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = new Simbolo(Constantes.FLOAT_VAR_VB_PY, e);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("estruct_op",12, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // estruct_op ::= NUMERO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = new Simbolo(Constantes.INT_VAR_VB_PY, e);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("estruct_op",12, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // estruct_op ::= THIS PUNTO ID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = parser.mt.buscarIDThis(e.toString(), eleft, eright);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("estruct_op",12, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // estruct_op ::= ID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = parser.msJP.metodoBuscarID(e.toString(), eleft, eright);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("estruct_op",12, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // estruct_op ::= PARENTESIS_A operaciones_aritmeticas PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		RESULT = e;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("estruct_op",12, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // operaciones_aritmeticas ::= estruct_op 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("operaciones_aritmeticas",11, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // operaciones_aritmeticas ::= MENOS estruct_op 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = parser.msJP.modificarVariables(e, eleft, eright);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("operaciones_aritmeticas",11, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // operaciones_aritmeticas ::= operaciones_aritmeticas MOD operaciones_aritmeticas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = parser.msJP.realizarOperaciones(a, e, aleft, aright, eleft, eright, 5);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("operaciones_aritmeticas",11, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // operaciones_aritmeticas ::= operaciones_aritmeticas DIV operaciones_aritmeticas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = parser.msJP.realizarOperaciones(a, e, aleft, aright, eleft, eright, 4);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("operaciones_aritmeticas",11, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // operaciones_aritmeticas ::= operaciones_aritmeticas POR operaciones_aritmeticas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = parser.msJP.realizarOperaciones(a, e, aleft, aright, eleft, eright, 3);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("operaciones_aritmeticas",11, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // operaciones_aritmeticas ::= operaciones_aritmeticas MENOS operaciones_aritmeticas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = parser.msJP.realizarOperaciones(a, e, aleft, aright, eleft, eright, 2);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("operaciones_aritmeticas",11, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // operaciones_aritmeticas ::= operaciones_aritmeticas MAS operaciones_aritmeticas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = parser.msJP.realizarOperaciones(a, e, aleft, aright, eleft, eright, 1);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("operaciones_aritmeticas",11, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // tipo_dato ::= CHAR 
            {
              Object RESULT =null;
		RESULT = Constantes.CHAR_VAR_PJ;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("tipo_dato",8, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // tipo_dato ::= FLOAT 
            {
              Object RESULT =null;
		RESULT = Constantes.FLOAT_VAR_PJ;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("tipo_dato",8, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // tipo_dato ::= INT 
            {
              Object RESULT =null;
		RESULT = Constantes.INT_VAR_PJ;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("tipo_dato",8, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // return_dato ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		parser.msJP.errorSintax(eleft, eright, e, "Error sintactico en los datos que se asignaran, no se esperaba el token indicado.");
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("return_dato",6, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // return_dato ::= operaciones_aritmeticas 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("return_dato",6, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // return_dato ::= CARACTER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		  
	RESULT = new Simbolo(Constantes.CHAR_VAR_PJ, a);
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("return_dato",6, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // return_dato ::= 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("return_dato",6, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // return ::= RETURN return_dato 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		 
        if(e != null) {
            parser.mc.returnCuarteto((Simbolo) e);
            RESULT = parser.msJP.agregarCualquierSimbolo(new Simbolo(Constantes.RETURN_VAR, e));
        } else {
            RESULT = null;
        }    
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("return",5, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // estructura_mf_p ::= 
            {
              Object RESULT =null;
		RESULT = null;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("estructura_mf_p",4, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // estructura_mf_p ::= estructura_mf estructura_mf_p 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		
        List<Simbolo> listaSimbolos = new ArrayList<>();
        if(a != null) {
            if(a instanceof Simbolo) {
                listaSimbolos.add((Simbolo) a);
            } else {
                listaSimbolos = (List<Simbolo>) a;
            }
        }
        if(e != null) {
            listaSimbolos.add((Simbolo) e);
        }
        RESULT = listaSimbolos;
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("estructura_mf_p",4, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // estructura_mf ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		parser.msJP.errorSintax(eleft, eright, e, "Error sintactico en la declaracion de procedimientos, no se esperaba el token indicado para la contruccion de una nuevo procedimiento.");
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("estructura_mf",3, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // estructura_mf ::= funcion 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("estructura_mf",3, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // estructura_mf ::= metodos 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("estructura_mf",3, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // estruct ::= declaracion_variables_g PUNTO_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		RESULT = a;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("estruct",72, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // variables_locales ::= 
            {
              Object RESULT =null;
		RESULT = null;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("variables_locales",71, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // variables_locales ::= estruct variables_locales 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		
        List<Simbolo> listaSimbolos = new ArrayList<>();
        if(a != null) {
            if(a instanceof Simbolo) {
                listaSimbolos.add((Simbolo) a);
            } else {
                listaSimbolos = (List<Simbolo>) a;
            }
        }
        if(e != null) {
            listaSimbolos.add((Simbolo) e);
        }
        RESULT = listaSimbolos;
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("variables_locales",71, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // constructor ::= constructor_p estructuras_p CORCHETE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		
    RESULT = parser.msJP.metodos(((Procedimiento) e).getE(), c, ((Procedimiento) e).getU(), eleft, eright);
    parser.mc.finProcedimiento(false, false);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("constructor",68, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // constructor_p ::= PUBLIC ID PARENTESIS_A parametros PARENTESIS_C CORCHETE_A 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		
        parser.mc.addCuartetoProcedimientoJava(a, "JAVA", e, null); 
        parser.mh.agregarInstancias();
        ManejadorConstructores manejadorConstructor = ManejadorConstructores.getInstancia();
        manejadorConstructor.agregarConstructorVacio();
        RESULT = new Procedimiento(a, e);
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("constructor_p",10, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // encabezado_clase ::= encabezado_clase_p constructor 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		
        Auxiliar aux = (Auxiliar) e;
        aux.setI(i);
        RESULT = aux;
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("encabezado_clase",15, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // encabezado_clase ::= encabezado_clase_p 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		
        ManejadorConstructores manejadorConstructores = ManejadorConstructores.getInstancia(); 
        manejadorConstructores.sinConstructor();
        RESULT = e;
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("encabezado_clase",15, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // encabezado_clase_p ::= clases_s variables_locales 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		  
        parser.mtp.reset();
        RESULT = new Auxiliar(a, e, null);
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("encabezado_clase_p",14, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // clases_p ::= 
            {
              Object RESULT =null;
		RESULT = new ArrayList<>();
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("clases_p",2, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // clases_p ::= clases clases_p 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		
        List<Simbolo> listaSimbolos = new ArrayList<>();
        if(a != null) {
            if(a instanceof Simbolo) {
                listaSimbolos.add((Simbolo) a);
            } else {
                listaSimbolos = (List<Simbolo>) a;
            }
        }
        if(e != null) {
            listaSimbolos.add((Simbolo) e);
        }
        RESULT = listaSimbolos;
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("clases_p",2, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // clases ::= error CORCHETE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		parser.msJP.errorSintax(eleft, eright, e, "Error sintactico en la declaracion de clases, no se esperaba el token indicado para la contruccion de una nueva clase.");
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("clases",1, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // clases ::= encabezado_clase estructura_mf_p CORCHETE_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		
        Auxiliar aux = (Auxiliar) a;
        RESULT = parser.msJP.claseJava((String) aux.getA(), aux.getE(), (Simbolo) aux.getI(), o, aleft, aright); 
        parser.mc.finClase();
        parser.mtp.addResetMemoriaHeap();
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("clases",1, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // clases_s ::= PUBLIC CLASS ID CORCHETE_A 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		
        RESULT = a; parser.mc.addClaseActual(a);
        ManejadorHeap mh = ManejadorHeap.getInstancia();
        mh.setPrincipal(true);
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("clases_s",35, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= clases_p 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		parser.mi.addClasesJava(e);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoJava$parser.done_parsing();
          return CUP$SintacticoJava$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

