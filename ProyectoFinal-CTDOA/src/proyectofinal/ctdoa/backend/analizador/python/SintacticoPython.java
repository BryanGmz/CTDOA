
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Jan 10 17:08:36 CST 2021
//----------------------------------------------------

package proyectofinal.ctdoa.backend.analizador.python;

import java_cup.runtime.*;
import proyectofinal.ctdoa.backend.objetos.*;
import proyectofinal.ctdoa.backend.manejadores.*;
import java.util.ArrayList;
import java.util.List;
import proyectofinal.ctdoa.frontend.gui.FrameCTDOA;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Jan 10 17:08:36 CST 2021
  */
public class SintacticoPython extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SintacticoPython() {super();}

  /** Constructor which sets the default scanner. */
  public SintacticoPython(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoPython(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\213\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\004\004\000\002\004\002\000\002\006\004" +
    "\000\002\006\004\000\002\006\004\000\002\007\003\000" +
    "\002\007\003\000\002\011\005\000\002\011\005\000\002" +
    "\011\005\000\002\011\005\000\002\011\005\000\002\011" +
    "\004\000\002\011\003\000\002\034\005\000\002\034\003" +
    "\000\002\034\003\000\002\034\003\000\002\034\003\000" +
    "\002\012\005\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\012\005\000\002\012" +
    "\005\000\002\012\005\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\014\003\000\002\014\004\000" +
    "\002\014\004\000\002\017\003\000\002\020\003\000\002" +
    "\021\005\000\002\021\003\000\002\021\003\000\002\022" +
    "\005\000\002\022\003\000\002\023\006\000\002\023\006" +
    "\000\002\023\003\000\002\003\003\000\002\003\003\000" +
    "\002\016\005\000\002\016\005\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\025\006\000\002\025" +
    "\006\000\002\025\006\000\002\026\005\000\002\026\005" +
    "\000\002\026\005\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\030\004\000\002\030\004\000\002" +
    "\030\004\000\002\015\005\000\002\015\004\000\002\015" +
    "\004\000\002\015\003\000\002\035\003\000\002\036\006" +
    "\000\002\036\007\000\002\033\005\000\002\033\005\000" +
    "\002\031\003\000\002\031\003\000\002\032\013\000\002" +
    "\032\013\000\002\032\014\000\002\032\014\000\002\032" +
    "\013\000\002\037\005\000\002\037\005\000\002\040\003" +
    "\000\002\040\005\000\002\040\007\000\002\040\003\000" +
    "\002\044\007\000\002\044\007\000\002\044\010\000\002" +
    "\044\010\000\002\041\004\000\002\042\004\000\002\043" +
    "\003\000\002\046\007\000\002\046\007\000\002\046\010" +
    "\000\002\046\010\000\002\045\007\000\002\045\007\000" +
    "\002\045\010\000\002\045\010\000\002\047\004\000\002" +
    "\047\002\000\002\050\004\000\002\050\005\000\002\010" +
    "\011\000\002\010\012\000\002\010\012\000\002\010\011" +
    "\000\002\054\005\000\002\054\004\000\002\005\003\000" +
    "\002\005\002\000\002\055\003\000\002\055\002\000\002" +
    "\024\003\000\002\024\005\000\002\024\003\000\002\051" +
    "\006\000\002\051\006\000\002\052\004\000\002\052\003" +
    "\000\002\052\003\000\002\052\002\000\002\053\004\000" +
    "\002\053\005\000\002\053\004\000\002\056\004\000\002" +
    "\056\004\000\002\056\003\000\002\056\003\000\002\056" +
    "\003\000\002\056\004\000\002\056\004\000\002\056\004" +
    "\000\002\056\004\000\002\057\004\000\002\057\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0117\000\010\002\ufffd\036\005\044\010\001\002\000" +
    "\004\002\uffff\001\002\000\004\054\u0103\001\002\000\006" +
    "\002\ufffd\036\005\001\002\000\004\002\u0101\001\002\000" +
    "\006\002\ufffd\036\005\001\002\000\020\003\030\026\027" +
    "\027\012\030\033\033\017\037\014\054\021\001\002\000" +
    "\022\003\uffbc\005\uffbc\007\uffbc\023\uffbc\042\uffbc\052\uffbc" +
    "\053\uffbc\054\uffbc\001\002\000\020\003\030\026\027\027" +
    "\012\030\033\033\017\037\014\054\021\001\002\000\020" +
    "\003\374\005\070\007\057\042\066\052\062\053\065\054" +
    "\063\001\002\000\022\003\277\005\303\007\057\023\301" +
    "\042\066\052\062\053\065\054\063\001\002\000\030\002" +
    "\uff90\003\uff90\026\uff90\027\uff90\030\uff90\033\uff90\036\uff90" +
    "\037\uff90\044\042\051\uff90\054\uff90\001\002\000\022\003" +
    "\277\005\303\007\057\023\301\042\066\052\062\053\065" +
    "\054\063\001\002\000\030\002\uff90\003\uff90\026\uff90\027" +
    "\uff90\030\uff90\033\uff90\036\uff90\037\uff90\044\042\051\uff90" +
    "\054\uff90\001\002\000\010\003\357\013\360\042\122\001" +
    "\002\000\030\002\uff7d\003\uff7d\026\uff7d\027\uff7d\030\uff7d" +
    "\033\uff7d\036\uff7d\037\uff7d\044\uff7d\051\uff7d\054\uff7d\001" +
    "\002\000\020\003\030\026\027\027\012\030\033\033\017" +
    "\037\014\054\021\001\002\000\004\041\342\001\002\000" +
    "\034\002\uff9a\003\uff9a\026\uff9a\027\uff9a\030\uff9a\033\uff9a" +
    "\034\uff9a\035\234\036\uff9a\037\uff9a\044\uff9a\051\uff9a\054" +
    "\uff9a\001\002\000\030\002\uff7f\003\uff7f\026\uff7f\027\uff7f" +
    "\030\uff7f\033\uff7f\036\uff7f\037\uff7f\044\uff7f\051\uff7f\054" +
    "\uff7f\001\002\000\006\003\052\042\053\001\002\000\026" +
    "\003\164\005\070\007\057\013\163\042\165\044\162\051" +
    "\157\052\062\053\065\054\161\001\002\000\030\002\uff7e" +
    "\003\uff7e\026\uff7e\027\uff7e\030\uff7e\033\uff7e\036\uff7e\037" +
    "\uff7e\044\uff7e\051\uff7e\054\uff7e\001\002\000\030\002\uff90" +
    "\003\uff90\026\uff90\027\uff90\030\uff90\033\uff90\036\uff90\037" +
    "\uff90\044\042\051\uff90\054\uff90\001\002\000\006\003\044" +
    "\054\043\001\002\000\030\002\uff90\003\uff90\026\uff90\027" +
    "\uff90\030\uff90\033\uff90\036\uff90\037\uff90\044\042\051\uff90" +
    "\054\uff90\001\002\000\030\002\uff77\003\030\026\027\027" +
    "\012\030\033\033\017\036\uff77\037\014\044\uff77\051\uff77" +
    "\054\021\001\002\000\010\002\uff92\036\uff92\051\037\001" +
    "\002\000\006\002\uff93\036\uff93\001\002\000\012\002\uff78" +
    "\036\uff78\044\uff78\051\uff78\001\002\000\030\002\uff80\003" +
    "\uff80\026\uff80\027\uff80\030\uff80\033\uff80\036\uff80\037\uff80" +
    "\044\uff80\051\uff80\054\uff80\001\002\000\030\002\uff91\003" +
    "\uff91\026\uff91\027\uff91\030\uff91\033\uff91\036\uff91\037\uff91" +
    "\044\uff91\051\uff91\054\uff91\001\002\000\006\003\uffb7\031" +
    "\uffb7\001\002\000\006\003\uffb6\031\uffb6\001\002\000\006" +
    "\003\047\031\046\001\002\000\006\003\136\032\135\001" +
    "\002\000\004\031\050\001\002\000\004\032\051\001\002" +
    "\000\006\003\052\042\053\001\002\000\022\003\uffd2\004" +
    "\uffd2\005\uffd2\007\uffd2\042\uffd2\052\uffd2\053\uffd2\054\uffd2" +
    "\001\002\000\022\003\uffd3\004\uffd3\005\uffd3\007\uffd3\042" +
    "\uffd3\052\uffd3\053\uffd3\054\uffd3\001\002\000\020\003\064" +
    "\005\070\007\057\042\066\052\062\053\065\054\063\001" +
    "\002\000\010\003\uffae\040\131\043\uffae\001\002\000\004" +
    "\043\126\001\002\000\014\003\072\042\066\052\062\053" +
    "\065\054\063\001\002\000\072\002\ufff1\003\ufff1\006\ufff1" +
    "\007\ufff1\010\ufff1\011\ufff1\012\ufff1\014\ufff1\015\ufff1\016" +
    "\ufff1\017\ufff1\020\ufff1\021\ufff1\022\ufff1\024\ufff1\025\ufff1" +
    "\026\ufff1\027\ufff1\030\ufff1\033\ufff1\036\ufff1\037\ufff1\040" +
    "\ufff1\041\ufff1\043\ufff1\044\ufff1\051\ufff1\054\ufff1\001\002" +
    "\000\046\002\ufff8\003\ufff8\006\101\007\104\010\106\011" +
    "\100\012\105\026\ufff8\027\ufff8\030\ufff8\033\ufff8\036\ufff8" +
    "\037\ufff8\040\ufff8\043\ufff8\044\ufff8\051\ufff8\054\ufff8\001" +
    "\002\000\072\002\uffee\003\uffee\006\uffee\007\uffee\010\uffee" +
    "\011\uffee\012\uffee\014\uffee\015\uffee\016\uffee\017\uffee\020" +
    "\uffee\021\uffee\022\uffee\024\uffee\025\uffee\026\uffee\027\uffee" +
    "\030\uffee\033\uffee\036\uffee\037\uffee\040\uffee\041\uffee\043" +
    "\uffee\044\uffee\051\uffee\054\uffee\001\002\000\074\002\uffef" +
    "\003\uffef\006\uffef\007\uffef\010\uffef\011\uffef\012\uffef\014" +
    "\uffef\015\uffef\016\uffef\017\uffef\020\uffef\021\uffef\022\uffef" +
    "\024\uffef\025\uffef\026\uffef\027\uffef\030\uffef\033\uffef\036" +
    "\uffef\037\uffef\040\uffef\041\uffef\042\122\043\uffef\044\uffef" +
    "\051\uffef\054\uffef\001\002\000\010\003\uffab\042\073\043" +
    "\uffab\001\002\000\072\002\uffed\003\uffed\006\uffed\007\uffed" +
    "\010\uffed\011\uffed\012\uffed\014\uffed\015\uffed\016\uffed\017" +
    "\uffed\020\uffed\021\uffed\022\uffed\024\uffed\025\uffed\026\uffed" +
    "\027\uffed\030\uffed\033\uffed\036\uffed\037\uffed\040\uffed\041" +
    "\uffed\043\uffed\044\uffed\051\uffed\054\uffed\001\002\000\016" +
    "\003\072\007\057\042\066\052\062\053\065\054\063\001" +
    "\002\000\072\002\uffec\003\uffec\006\uffec\007\uffec\010\uffec" +
    "\011\uffec\012\uffec\014\uffec\015\uffec\016\uffec\017\uffec\020" +
    "\uffec\021\uffec\022\uffec\024\uffec\025\uffec\026\uffec\027\uffec" +
    "\030\uffec\033\uffec\036\uffec\037\uffec\040\uffec\041\uffec\043" +
    "\uffec\044\uffec\051\uffec\054\uffec\001\002\000\034\002\ufff9" +
    "\003\ufff9\026\ufff9\027\ufff9\030\ufff9\033\ufff9\036\ufff9\037" +
    "\ufff9\040\ufff9\043\ufff9\044\ufff9\051\ufff9\054\ufff9\001\002" +
    "\000\016\006\101\007\104\010\106\011\100\012\105\043" +
    "\121\001\002\000\004\042\073\001\002\000\020\003\076" +
    "\007\057\042\066\043\uff85\052\062\053\065\054\063\001" +
    "\002\000\004\043\120\001\002\000\022\003\103\006\101" +
    "\007\104\010\106\011\100\012\105\040\077\043\uff86\001" +
    "\002\000\006\042\073\043\uff87\001\002\000\016\003\072" +
    "\007\057\042\066\052\062\053\065\054\063\001\002\000" +
    "\016\003\072\007\057\042\066\052\062\053\065\054\063" +
    "\001\002\000\016\003\072\007\057\042\066\052\062\053" +
    "\065\054\063\001\002\000\006\040\113\043\uff88\001\002" +
    "\000\006\003\103\040\077\001\002\000\016\003\072\007" +
    "\057\042\066\052\062\053\065\054\063\001\002\000\016" +
    "\003\072\007\057\042\066\052\062\053\065\054\063\001" +
    "\002\000\016\003\072\007\057\042\066\052\062\053\065" +
    "\054\063\001\002\000\072\002\ufff4\003\ufff4\006\ufff4\007" +
    "\ufff4\010\ufff4\011\ufff4\012\ufff4\014\ufff4\015\ufff4\016\ufff4" +
    "\017\ufff4\020\ufff4\021\ufff4\022\ufff4\024\ufff4\025\ufff4\026" +
    "\ufff4\027\ufff4\030\ufff4\033\ufff4\036\ufff4\037\ufff4\040\ufff4" +
    "\041\ufff4\043\ufff4\044\ufff4\051\ufff4\054\ufff4\001\002\000" +
    "\072\002\ufff3\003\ufff3\006\ufff3\007\ufff3\010\ufff3\011\ufff3" +
    "\012\ufff3\014\ufff3\015\ufff3\016\ufff3\017\ufff3\020\ufff3\021" +
    "\ufff3\022\ufff3\024\ufff3\025\ufff3\026\ufff3\027\ufff3\030\ufff3" +
    "\033\ufff3\036\ufff3\037\ufff3\040\ufff3\041\ufff3\043\ufff3\044" +
    "\ufff3\051\ufff3\054\ufff3\001\002\000\072\002\ufff6\003\ufff6" +
    "\006\ufff6\007\ufff6\010\106\011\100\012\105\014\ufff6\015" +
    "\ufff6\016\ufff6\017\ufff6\020\ufff6\021\ufff6\022\ufff6\024\ufff6" +
    "\025\ufff6\026\ufff6\027\ufff6\030\ufff6\033\ufff6\036\ufff6\037" +
    "\ufff6\040\ufff6\041\ufff6\043\ufff6\044\ufff6\051\ufff6\054\ufff6" +
    "\001\002\000\006\040\113\043\uff82\001\002\000\016\003" +
    "\072\007\057\042\066\052\062\053\065\054\063\001\002" +
    "\000\020\006\101\007\104\010\106\011\100\012\105\040" +
    "\uff83\043\uff83\001\002\000\072\002\ufff7\003\ufff7\006\ufff7" +
    "\007\ufff7\010\106\011\100\012\105\014\ufff7\015\ufff7\016" +
    "\ufff7\017\ufff7\020\ufff7\021\ufff7\022\ufff7\024\ufff7\025\ufff7" +
    "\026\ufff7\027\ufff7\030\ufff7\033\ufff7\036\ufff7\037\ufff7\040" +
    "\ufff7\041\ufff7\043\ufff7\044\ufff7\051\ufff7\054\ufff7\001\002" +
    "\000\072\002\ufff5\003\ufff5\006\ufff5\007\ufff5\010\ufff5\011" +
    "\ufff5\012\ufff5\014\ufff5\015\ufff5\016\ufff5\017\ufff5\020\ufff5" +
    "\021\ufff5\022\ufff5\024\ufff5\025\ufff5\026\ufff5\027\ufff5\030" +
    "\ufff5\033\ufff5\036\ufff5\037\ufff5\040\ufff5\041\ufff5\043\ufff5" +
    "\044\ufff5\051\ufff5\054\ufff5\001\002\000\020\006\101\007" +
    "\104\010\106\011\100\012\105\040\uff84\043\uff84\001\002" +
    "\000\072\002\uff89\003\uff89\006\uff89\007\uff89\010\uff89\011" +
    "\uff89\012\uff89\014\uff89\015\uff89\016\uff89\017\uff89\020\uff89" +
    "\021\uff89\022\uff89\024\uff89\025\uff89\026\uff89\027\uff89\030" +
    "\uff89\033\uff89\036\uff89\037\uff89\040\uff89\041\uff89\043\uff89" +
    "\044\uff89\051\uff89\054\uff89\001\002\000\072\002\ufff0\003" +
    "\ufff0\006\ufff0\007\ufff0\010\ufff0\011\ufff0\012\ufff0\014\ufff0" +
    "\015\ufff0\016\ufff0\017\ufff0\020\ufff0\021\ufff0\022\ufff0\024" +
    "\ufff0\025\ufff0\026\ufff0\027\ufff0\030\ufff0\033\ufff0\036\ufff0" +
    "\037\ufff0\040\ufff0\041\ufff0\043\ufff0\044\ufff0\051\ufff0\054" +
    "\ufff0\001\002\000\020\003\076\007\057\042\066\043\uff85" +
    "\052\062\053\065\054\063\001\002\000\004\043\124\001" +
    "\002\000\072\002\uff8a\003\uff8a\006\uff8a\007\uff8a\010\uff8a" +
    "\011\uff8a\012\uff8a\014\uff8a\015\uff8a\016\uff8a\017\uff8a\020" +
    "\uff8a\021\uff8a\022\uff8a\024\uff8a\025\uff8a\026\uff8a\027\uff8a" +
    "\030\uff8a\033\uff8a\036\uff8a\037\uff8a\040\uff8a\041\uff8a\043" +
    "\uff8a\044\uff8a\051\uff8a\054\uff8a\001\002\000\072\002\ufff2" +
    "\003\ufff2\006\ufff2\007\ufff2\010\ufff2\011\ufff2\012\ufff2\014" +
    "\ufff2\015\ufff2\016\ufff2\017\ufff2\020\ufff2\021\ufff2\022\ufff2" +
    "\024\ufff2\025\ufff2\026\ufff2\027\ufff2\030\ufff2\033\ufff2\036" +
    "\ufff2\037\ufff2\040\ufff2\041\ufff2\043\ufff2\044\ufff2\051\ufff2" +
    "\054\ufff2\001\002\000\004\041\127\001\002\000\004\050" +
    "\130\001\002\000\020\003\uffb3\026\uffb3\027\uffb3\030\uffb3" +
    "\033\uffb3\037\uffb3\054\uffb3\001\002\000\020\003\072\005" +
    "\070\007\057\042\066\052\062\053\065\054\063\001\002" +
    "\000\010\003\uffad\040\133\043\uffad\001\002\000\020\003" +
    "\072\005\070\007\057\042\066\052\062\053\065\054\063" +
    "\001\002\000\006\003\uffac\043\uffac\001\002\000\006\003" +
    "\052\042\053\001\002\000\004\032\137\001\002\000\006" +
    "\003\052\042\053\001\002\000\020\003\064\005\070\007" +
    "\057\042\066\052\062\053\065\054\063\001\002\000\004" +
    "\043\142\001\002\000\004\041\143\001\002\000\004\050" +
    "\144\001\002\000\020\003\uffb2\026\uffb2\027\uffb2\030\uffb2" +
    "\033\uffb2\037\uffb2\054\uffb2\001\002\000\020\003\064\005" +
    "\070\007\057\042\066\052\062\053\065\054\063\001\002" +
    "\000\006\003\147\043\150\001\002\000\004\041\153\001" +
    "\002\000\004\041\151\001\002\000\004\050\152\001\002" +
    "\000\020\003\uffb5\026\uffb5\027\uffb5\030\uffb5\033\uffb5\037" +
    "\uffb5\054\uffb5\001\002\000\004\050\154\001\002\000\020" +
    "\003\uffb4\026\uffb4\027\uffb4\030\uffb4\033\uffb4\037\uffb4\054" +
    "\uffb4\001\002\000\030\002\uff7c\003\uff7c\026\uff7c\027\uff7c" +
    "\030\uff7c\033\uff7c\036\uff7c\037\uff7c\044\uff7c\051\uff7c\054" +
    "\uff7c\001\002\000\030\002\ufffb\003\ufffb\026\ufffb\027\ufffb" +
    "\030\ufffb\033\ufffb\036\ufffb\037\ufffb\044\ufffb\051\ufffb\054" +
    "\ufffb\001\002\000\030\002\uff79\003\uff79\026\uff79\027\uff79" +
    "\030\uff79\033\uff79\036\uff79\037\uff79\044\uff79\051\uff79\054" +
    "\uff79\001\002\000\016\003\221\004\217\042\066\052\062" +
    "\053\065\054\063\001\002\000\046\002\uffef\003\uffef\006" +
    "\uffef\007\uffef\010\uffef\011\uffef\012\uffef\026\uffef\027\uffef" +
    "\030\uffef\031\uffb7\033\uffef\036\uffef\037\uffef\042\122\044" +
    "\uffef\051\uffef\054\uffef\001\002\000\030\002\uff7a\003\uff7a" +
    "\026\uff7a\027\uff7a\030\uff7a\033\uff7a\036\uff7a\037\uff7a\044" +
    "\uff7a\051\uff7a\054\uff7a\001\002\000\026\003\202\005\070" +
    "\007\057\042\066\045\205\046\203\047\204\052\062\053" +
    "\065\054\063\001\002\000\020\003\uffd2\004\uffd2\031\uffb6" +
    "\042\073\052\uffd2\053\uffd2\054\uffd2\001\002\000\022\003" +
    "\uffd3\004\uffd3\007\057\042\uffd3\043\uff85\052\uffd3\053\uffd3" +
    "\054\uffd3\001\002\000\004\031\167\001\002\000\004\032" +
    "\170\001\002\000\006\003\052\042\053\001\002\000\020" +
    "\003\064\005\070\007\057\042\066\052\062\053\065\054" +
    "\063\001\002\000\004\043\173\001\002\000\004\041\174" +
    "\001\002\000\004\050\175\001\002\000\020\003\uffb1\026" +
    "\uffb1\027\uffb1\030\uffb1\033\uffb1\037\uffb1\054\uffb1\001\002" +
    "\000\022\003\103\006\101\007\104\010\106\011\100\012" +
    "\105\040\077\043\121\001\002\000\030\002\uffc6\003\uffc6" +
    "\026\uffc6\027\uffc6\030\uffc6\033\uffc6\036\uffc6\037\uffc6\044" +
    "\uffc6\051\uffc6\054\uffc6\001\002\000\030\002\uffc5\003\uffc5" +
    "\026\uffc5\027\uffc5\030\uffc5\033\uffc5\036\uffc5\037\uffc5\044" +
    "\uffc5\051\uffc5\054\uffc5\001\002\000\030\002\uffc7\003\uffc7" +
    "\026\uffc7\027\uffc7\030\uffc7\033\uffc7\036\uffc7\037\uffc7\044" +
    "\uffc7\051\uffc7\054\uffc7\001\002\000\032\002\uffc4\003\uffc4" +
    "\026\uffc4\027\uffc4\030\uffc4\033\uffc4\036\uffc4\037\uffc4\042" +
    "\073\044\uffc4\051\uffc4\054\uffc4\001\002\000\006\003\206" +
    "\042\207\001\002\000\006\003\206\042\207\001\002\000" +
    "\006\003\206\042\207\001\002\000\032\002\uffbd\003\uffbd" +
    "\026\uffbd\027\uffbd\030\uffbd\033\uffbd\036\uffbd\037\uffbd\043" +
    "\214\044\uffbd\051\uffbd\054\uffbd\001\002\000\006\004\212" +
    "\043\211\001\002\000\030\002\uffc3\003\uffc3\026\uffc3\027" +
    "\uffc3\030\uffc3\033\uffc3\036\uffc3\037\uffc3\044\uffc3\051\uffc3" +
    "\054\uffc3\001\002\000\030\002\uffbf\003\uffbf\026\uffbf\027" +
    "\uffbf\030\uffbf\033\uffbf\036\uffbf\037\uffbf\044\uffbf\051\uffbf" +
    "\054\uffbf\001\002\000\004\043\213\001\002\000\030\002" +
    "\uffc0\003\uffc0\026\uffc0\027\uffc0\030\uffc0\033\uffc0\036\uffc0" +
    "\037\uffc0\044\uffc0\051\uffc0\054\uffc0\001\002\000\030\002" +
    "\uffbe\003\uffbe\026\uffbe\027\uffbe\030\uffbe\033\uffbe\036\uffbe" +
    "\037\uffbe\044\uffbe\051\uffbe\054\uffbe\001\002\000\030\002" +
    "\uffc1\003\uffc1\026\uffc1\027\uffc1\030\uffc1\033\uffc1\036\uffc1" +
    "\037\uffc1\044\uffc1\051\uffc1\054\uffc1\001\002\000\030\002" +
    "\uffc2\003\uffc2\026\uffc2\027\uffc2\030\uffc2\033\uffc2\036\uffc2" +
    "\037\uffc2\044\uffc2\051\uffc2\054\uffc2\001\002\000\012\003" +
    "\uffcf\006\uffcf\040\uffcf\043\uffcf\001\002\000\012\003\uffce" +
    "\006\uffce\040\uffce\043\uffce\001\002\000\014\003\uffcd\006" +
    "\uffcd\040\uffcd\042\073\043\uffcd\001\002\000\010\006\224" +
    "\040\223\043\225\001\002\000\016\003\221\004\217\042" +
    "\066\052\062\053\065\054\063\001\002\000\016\003\221" +
    "\004\217\042\066\052\062\053\065\054\063\001\002\000" +
    "\030\002\uffcb\003\uffcb\026\uffcb\027\uffcb\030\uffcb\033\uffcb" +
    "\036\uffcb\037\uffcb\044\uffcb\051\uffcb\054\uffcb\001\002\000" +
    "\012\003\uffd1\006\uffd1\040\uffd1\043\uffd1\001\002\000\012" +
    "\003\uffd0\006\uffd0\040\uffd0\043\uffd0\001\002\000\016\003" +
    "\221\004\217\042\066\052\062\053\065\054\063\001\002" +
    "\000\012\003\232\006\224\040\223\043\233\001\002\000" +
    "\030\002\uffca\003\uffca\026\uffca\027\uffca\030\uffca\033\uffca" +
    "\036\uffca\037\uffca\044\uffca\051\uffca\054\uffca\001\002\000" +
    "\030\002\uffcc\003\uffcc\026\uffcc\027\uffcc\030\uffcc\033\uffcc" +
    "\036\uffcc\037\uffcc\044\uffcc\051\uffcc\054\uffcc\001\002\000" +
    "\022\003\277\005\303\007\057\023\301\042\066\052\062" +
    "\053\065\054\063\001\002\000\032\002\uff99\003\uff99\026" +
    "\uff99\027\uff99\030\uff99\033\uff99\034\254\036\uff99\037\uff99" +
    "\044\uff99\051\uff99\054\uff99\001\002\000\034\002\uff9a\003" +
    "\uff9a\026\uff9a\027\uff9a\030\uff9a\033\uff9a\034\uff9a\035\234" +
    "\036\uff9a\037\uff9a\044\uff9a\051\uff9a\054\uff9a\001\002\000" +
    "\004\041\240\001\002\000\006\003\241\050\242\001\002" +
    "\000\004\050\246\001\002\000\020\003\030\026\027\027" +
    "\012\030\033\033\017\037\014\054\021\001\002\000\006" +
    "\044\245\051\244\001\002\000\034\002\uffa3\003\uffa3\026" +
    "\uffa3\027\uffa3\030\uffa3\033\uffa3\034\uffa3\035\uffa3\036\uffa3" +
    "\037\uffa3\044\uffa3\051\uffa3\054\uffa3\001\002\000\034\002" +
    "\uffa2\003\uffa2\026\uffa2\027\uffa2\030\uffa2\033\uffa2\034\uffa2" +
    "\035\uffa2\036\uffa2\037\uffa2\044\uffa2\051\uffa2\054\uffa2\001" +
    "\002\000\020\003\030\026\027\027\012\030\033\033\017" +
    "\037\014\054\021\001\002\000\006\044\251\051\250\001" +
    "\002\000\034\002\uffa1\003\uffa1\026\uffa1\027\uffa1\030\uffa1" +
    "\033\uffa1\034\uffa1\035\uffa1\036\uffa1\037\uffa1\044\uffa1\051" +
    "\uffa1\054\uffa1\001\002\000\034\002\uffa0\003\uffa0\026\uffa0" +
    "\027\uffa0\030\uffa0\033\uffa0\034\uffa0\035\uffa0\036\uffa0\037" +
    "\uffa0\044\uffa0\051\uffa0\054\uffa0\001\002\000\032\002\uff9b" +
    "\003\uff9b\026\uff9b\027\uff9b\030\uff9b\033\uff9b\034\uff9b\036" +
    "\uff9b\037\uff9b\044\uff9b\051\uff9b\054\uff9b\001\002\000\004" +
    "\041\256\001\002\000\004\041\uffa4\001\002\000\030\002" +
    "\uff98\003\uff98\026\uff98\027\uff98\030\uff98\033\uff98\036\uff98" +
    "\037\uff98\044\uff98\051\uff98\054\uff98\001\002\000\006\003" +
    "\257\050\260\001\002\000\004\050\265\001\002\000\020" +
    "\003\030\026\027\027\012\030\033\033\017\037\014\054" +
    "\021\001\002\000\004\051\264\001\002\000\024\003\030" +
    "\026\027\027\012\030\033\033\017\037\014\044\263\051" +
    "\uff77\054\021\001\002\000\030\002\uff9e\003\uff9e\026\uff9e" +
    "\027\uff9e\030\uff9e\033\uff9e\036\uff9e\037\uff9e\044\uff9e\051" +
    "\uff9e\054\uff9e\001\002\000\030\002\uff9f\003\uff9f\026\uff9f" +
    "\027\uff9f\030\uff9f\033\uff9f\036\uff9f\037\uff9f\044\uff9f\051" +
    "\uff9f\054\uff9f\001\002\000\020\003\030\026\027\027\012" +
    "\030\033\033\017\037\014\054\021\001\002\000\024\003" +
    "\030\026\027\027\012\030\033\033\017\037\014\044\271" +
    "\051\uff77\054\021\001\002\000\004\051\270\001\002\000" +
    "\030\002\uff9d\003\uff9d\026\uff9d\027\uff9d\030\uff9d\033\uff9d" +
    "\036\uff9d\037\uff9d\044\uff9d\051\uff9d\054\uff9d\001\002\000" +
    "\030\002\uff9c\003\uff9c\026\uff9c\027\uff9c\030\uff9c\033\uff9c" +
    "\036\uff9c\037\uff9c\044\uff9c\051\uff9c\054\uff9c\001\002\000" +
    "\004\041\uffa5\001\002\000\006\025\337\041\uffe0\001\002" +
    "\000\044\003\uffe3\006\101\007\104\010\106\011\100\012" +
    "\105\014\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3" +
    "\022\uffe3\024\uffe3\025\uffe3\041\uffe3\043\uffe3\001\002\000" +
    "\010\024\uffd4\025\uffd4\041\uffd4\001\002\000\010\024\uffd7" +
    "\025\uffd7\041\uffd7\001\002\000\034\003\uffe1\014\uffe1\015" +
    "\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1\022\uffe1\025\uffd9" +
    "\041\uffd9\042\073\044\334\050\335\001\002\000\022\003" +
    "\315\014\317\015\314\016\316\017\320\020\322\021\321" +
    "\022\323\001\002\000\006\003\052\042\053\001\002\000" +
    "\010\024\304\025\uffda\041\uffda\001\002\000\032\003\uffe2" +
    "\014\uffe2\015\uffe2\016\uffe2\017\uffe2\020\uffe2\021\uffe2\022" +
    "\uffe2\024\uffe2\025\uffe2\041\uffe2\043\uffe2\001\002\000\022" +
    "\003\uffdd\005\uffdd\007\uffdd\023\uffdd\042\uffdd\052\uffdd\053" +
    "\uffdd\054\uffdd\001\002\000\022\003\306\005\303\007\057" +
    "\023\301\042\066\052\062\053\065\054\063\001\002\000" +
    "\034\003\uffe1\014\uffe1\015\uffe1\016\uffe1\017\uffe1\020\uffe1" +
    "\021\uffe1\022\uffe1\024\uffe1\025\uffe1\041\uffe1\042\073\043" +
    "\uffe1\001\002\000\010\024\304\025\uffd8\041\uffd8\001\002" +
    "\000\020\003\306\005\303\007\057\042\066\052\062\053" +
    "\065\054\063\001\002\000\006\003\312\043\313\001\002" +
    "\000\010\024\uffd5\025\uffd5\041\uffd5\001\002\000\010\024" +
    "\uffd6\025\uffd6\041\uffd6\001\002\000\020\003\306\005\303" +
    "\007\057\042\066\052\062\053\065\054\063\001\002\000" +
    "\020\003\306\005\303\007\057\042\066\052\062\053\065" +
    "\054\063\001\002\000\020\003\306\005\303\007\057\042" +
    "\066\052\062\053\065\054\063\001\002\000\020\003\306" +
    "\005\303\007\057\042\066\052\062\053\065\054\063\001" +
    "\002\000\020\003\306\005\303\007\057\042\066\052\062" +
    "\053\065\054\063\001\002\000\020\003\306\005\303\007" +
    "\057\042\066\052\062\053\065\054\063\001\002\000\020" +
    "\003\306\005\303\007\057\042\066\052\062\053\065\054" +
    "\063\001\002\000\020\003\306\005\303\007\057\042\066" +
    "\052\062\053\065\054\063\001\002\000\014\003\uffe5\024" +
    "\uffe5\025\uffe5\041\uffe5\043\uffe5\001\002\000\014\003\uffe6" +
    "\024\uffe6\025\uffe6\041\uffe6\043\uffe6\001\002\000\014\003" +
    "\uffe7\024\uffe7\025\uffe7\041\uffe7\043\uffe7\001\002\000\014" +
    "\003\uffe8\024\uffe8\025\uffe8\041\uffe8\043\uffe8\001\002\000" +
    "\014\003\uffea\024\uffea\025\uffea\041\uffea\043\uffea\001\002" +
    "\000\014\003\uffe9\024\uffe9\025\uffe9\041\uffe9\043\uffe9\001" +
    "\002\000\014\003\uffe4\024\uffe4\025\uffe4\041\uffe4\043\uffe4" +
    "\001\002\000\014\003\uffeb\024\uffeb\025\uffeb\041\uffeb\043" +
    "\uffeb\001\002\000\004\041\uffdf\001\002\000\004\041\uffde" +
    "\001\002\000\022\003\341\005\303\007\057\023\301\042" +
    "\066\052\062\053\065\054\063\001\002\000\022\003\uffdc" +
    "\005\uffdc\007\uffdc\023\uffdc\042\uffdc\052\uffdc\053\uffdc\054" +
    "\uffdc\001\002\000\006\025\337\041\uffdb\001\002\000\030" +
    "\003\uffe1\014\uffe1\015\uffe1\016\uffe1\017\uffe1\020\uffe1\021" +
    "\uffe1\022\uffe1\025\uffd9\041\uffd9\042\073\001\002\000\006" +
    "\003\343\050\344\001\002\000\004\050\350\001\002\000" +
    "\020\003\030\026\027\027\012\030\033\033\017\037\014" +
    "\054\021\001\002\000\006\044\347\051\346\001\002\000" +
    "\034\002\uffaa\003\uffaa\026\uffaa\027\uffaa\030\uffaa\033\uffaa" +
    "\034\uffaa\035\uffaa\036\uffaa\037\uffaa\044\uffaa\051\uffaa\054" +
    "\uffaa\001\002\000\034\002\uffa9\003\uffa9\026\uffa9\027\uffa9" +
    "\030\uffa9\033\uffa9\034\uffa9\035\uffa9\036\uffa9\037\uffa9\044" +
    "\uffa9\051\uffa9\054\uffa9\001\002\000\020\003\030\026\027" +
    "\027\012\030\033\033\017\037\014\054\021\001\002\000" +
    "\006\044\353\051\352\001\002\000\034\002\uffa8\003\uffa8" +
    "\026\uffa8\027\uffa8\030\uffa8\033\uffa8\034\uffa8\035\uffa8\036" +
    "\uffa8\037\uffa8\044\uffa8\051\uffa8\054\uffa8\001\002\000\034" +
    "\002\uffa7\003\uffa7\026\uffa7\027\uffa7\030\uffa7\033\uffa7\034" +
    "\uffa7\035\uffa7\036\uffa7\037\uffa7\044\uffa7\051\uffa7\054\uffa7" +
    "\001\002\000\006\044\356\051\355\001\002\000\030\002" +
    "\uffaf\003\uffaf\026\uffaf\027\uffaf\030\uffaf\033\uffaf\036\uffaf" +
    "\037\uffaf\044\uffaf\051\uffaf\054\uffaf\001\002\000\030\002" +
    "\uffb0\003\uffb0\026\uffb0\027\uffb0\030\uffb0\033\uffb0\036\uffb0" +
    "\037\uffb0\044\uffb0\051\uffb0\054\uffb0\001\002\000\026\003" +
    "\202\005\070\007\057\042\066\045\205\046\203\047\204" +
    "\052\062\053\065\054\063\001\002\000\026\003\202\005" +
    "\070\007\057\042\066\045\205\046\203\047\204\052\062" +
    "\053\065\054\063\001\002\000\030\002\uffc9\003\uffc9\026" +
    "\uffc9\027\uffc9\030\uffc9\033\uffc9\036\uffc9\037\uffc9\044\uffc9" +
    "\051\uffc9\054\uffc9\001\002\000\030\002\uffc8\003\uffc8\026" +
    "\uffc8\027\uffc8\030\uffc8\033\uffc8\036\uffc8\037\uffc8\044\uffc8" +
    "\051\uffc8\054\uffc8\001\002\000\030\002\uff7b\003\uff7b\026" +
    "\uff7b\027\uff7b\030\uff7b\033\uff7b\036\uff7b\037\uff7b\044\uff7b" +
    "\051\uff7b\054\uff7b\001\002\000\004\041\uffa6\001\002\000" +
    "\030\002\uff81\003\uff81\026\uff81\027\uff81\030\uff81\033\uff81" +
    "\036\uff81\037\uff81\044\uff81\051\uff81\054\uff81\001\002\000" +
    "\004\041\367\001\002\000\006\003\370\050\371\001\002" +
    "\000\004\050\372\001\002\000\020\003\uffbb\026\uffbb\027" +
    "\uffbb\030\uffbb\033\uffbb\037\uffbb\054\uffbb\001\002\000\020" +
    "\003\uffba\026\uffba\027\uffba\030\uffba\033\uffba\037\uffba\054" +
    "\uffba\001\002\000\030\002\ufffc\003\ufffc\026\ufffc\027\ufffc" +
    "\030\ufffc\033\ufffc\036\ufffc\037\ufffc\044\ufffc\051\ufffc\054" +
    "\ufffc\001\002\000\032\002\ufffa\003\ufffa\026\ufffa\027\ufffa" +
    "\030\ufffa\033\ufffa\036\ufffa\037\ufffa\042\073\044\ufffa\051" +
    "\ufffa\054\ufffa\001\002\000\006\044\377\051\376\001\002" +
    "\000\030\002\uffb8\003\uffb8\026\uffb8\027\uffb8\030\uffb8\033" +
    "\uffb8\036\uffb8\037\uffb8\044\uffb8\051\uffb8\054\uffb8\001\002" +
    "\000\030\002\uffb9\003\uffb9\026\uffb9\027\uffb9\030\uffb9\033" +
    "\uffb9\036\uffb9\037\uffb9\044\uffb9\051\uffb9\054\uffb9\001\002" +
    "\000\004\002\000\001\002\000\004\002\001\001\002\000" +
    "\004\002\ufffe\001\002\000\006\003\u0104\042\u0105\001\002" +
    "\000\012\003\u0108\042\u0112\043\uff8e\054\u0106\001\002\000" +
    "\010\003\u0108\043\uff8e\054\u0106\001\002\000\006\040\uff8d" +
    "\043\uff8d\001\002\000\004\043\u010c\001\002\000\006\040" +
    "\uff8b\043\uff8b\001\002\000\006\040\u010a\043\uff8f\001\002" +
    "\000\004\054\u010b\001\002\000\006\040\uff8c\043\uff8c\001" +
    "\002\000\004\041\u010d\001\002\000\006\003\u010e\050\u010f" +
    "\001\002\000\004\050\u0110\001\002\000\020\003\uff97\026" +
    "\uff97\027\uff97\030\uff97\033\uff97\037\uff97\054\uff97\001\002" +
    "\000\020\003\uff96\026\uff96\027\uff96\030\uff96\033\uff96\037" +
    "\uff96\054\uff96\001\002\000\004\043\u0117\001\002\000\010" +
    "\003\u0108\043\uff8e\054\u0106\001\002\000\004\043\u0114\001" +
    "\002\000\004\041\u0115\001\002\000\004\050\u0116\001\002" +
    "\000\020\003\uff95\026\uff95\027\uff95\030\uff95\033\uff95\037" +
    "\uff95\054\uff95\001\002\000\004\041\u0118\001\002\000\004" +
    "\050\u0119\001\002\000\020\003\uff94\026\uff94\027\uff94\030" +
    "\uff94\033\uff94\037\uff94\054\uff94\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0117\000\012\002\006\004\003\010\010\054\005\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\004\u0101" +
    "\010\010\054\005\001\001\000\002\001\001\000\010\004" +
    "\377\010\010\054\005\001\001\000\036\006\031\025\015" +
    "\026\033\032\022\033\025\035\014\036\012\037\030\041" +
    "\023\044\024\050\021\051\017\056\034\057\035\001\001" +
    "\000\002\001\001\000\036\006\031\025\015\026\033\032" +
    "\022\033\025\035\014\036\012\037\030\041\023\044\024" +
    "\050\021\051\017\056\034\057\374\001\001\000\012\007" +
    "\372\011\060\034\057\051\066\001\001\000\024\011\273" +
    "\012\274\013\277\014\365\021\272\022\301\023\275\034" +
    "\057\051\066\001\001\000\004\005\364\001\001\000\024" +
    "\011\273\012\274\013\277\014\363\021\272\022\301\023" +
    "\275\034\057\051\066\001\001\000\004\005\362\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\006\031\025" +
    "\015\026\033\032\022\033\025\035\014\036\012\037\030" +
    "\041\023\044\024\050\021\051\017\056\034\057\353\001" +
    "\001\000\002\001\001\000\010\042\236\046\235\047\234" +
    "\001\001\000\002\001\001\000\004\003\227\001\001\000" +
    "\016\003\157\007\155\011\060\031\165\034\057\051\066" +
    "\001\001\000\002\001\001\000\004\005\154\001\001\000" +
    "\004\031\044\001\001\000\004\005\040\001\001\000\036" +
    "\006\031\025\015\026\033\032\022\033\025\035\014\036" +
    "\012\037\030\041\023\044\024\050\021\051\017\056\034" +
    "\057\037\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\007" +
    "\054\011\060\034\057\040\055\051\066\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\034\124\051\066\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\011\070\034\057\051\066\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\011\074\034\057\051\066\052\073\001\001\000\002" +
    "\001\001\000\004\053\101\001\001\000\002\001\001\000" +
    "\010\011\116\034\057\051\066\001\001\000\010\011\115" +
    "\034\057\051\066\001\001\000\010\011\114\034\057\051" +
    "\066\001\001\000\002\001\001\000\004\053\111\001\001" +
    "\000\010\011\110\034\057\051\066\001\001\000\010\011" +
    "\107\034\057\051\066\001\001\000\010\011\106\034\057" +
    "\051\066\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\011\113\034\057" +
    "\051\066\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\011\074\034\057\051\066\052\122\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\007\131\011\060\034\057\051\066\001\001\000\002" +
    "\001\001\000\012\007\133\011\060\034\057\051\066\001" +
    "\001\000\002\001\001\000\004\003\144\001\001\000\002" +
    "\001\001\000\004\003\137\001\001\000\014\007\054\011" +
    "\060\034\057\040\140\051\066\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\007\054\011\060\034\057\040\145\051\066\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\016\221\034\217\051\066\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\007\176\011\060\027" +
    "\200\030\177\034\057\051\066\001\001\000\002\001\001" +
    "\000\012\011\175\034\057\051\066\052\073\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\170\001\001" +
    "\000\014\007\054\011\060\034\057\040\171\051\066\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\053\101\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\215\001\001\000\004\015\214\001\001\000" +
    "\004\015\207\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\016\226\034\217\051\066" +
    "\001\001\000\010\016\225\034\217\051\066\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\016\230\034\217\051\066\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\011\273\012\274" +
    "\013\277\014\271\021\272\022\301\023\275\034\057\051" +
    "\066\001\001\000\006\043\252\045\254\001\001\000\010" +
    "\042\236\046\235\047\251\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\006\031\025\015" +
    "\026\033\032\022\033\025\035\014\036\012\037\030\041" +
    "\023\044\024\050\021\051\017\056\034\057\242\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\006\031\025\015\026\033\032\022\033\025\035\014" +
    "\036\012\037\030\041\023\044\024\050\021\051\017\056" +
    "\034\057\246\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\006\031\025\015\026\033\032\022\033" +
    "\025\035\014\036\012\037\030\041\023\044\024\050\021" +
    "\051\017\056\261\057\260\001\001\000\002\001\001\000" +
    "\036\006\031\025\015\026\033\032\022\033\025\035\014" +
    "\036\012\037\030\041\023\044\024\050\021\051\017\056" +
    "\034\057\037\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\006\031\025\015\026\033\032\022\033\025\035" +
    "\014\036\012\037\030\041\023\044\024\050\021\051\017" +
    "\056\265\057\266\001\001\000\036\006\031\025\015\026" +
    "\033\032\022\033\025\035\014\036\012\037\030\041\023" +
    "\044\024\050\021\051\017\056\034\057\037\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\335\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\003\307\001\001\000\004\017\304\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\011\273" +
    "\012\274\013\277\022\306\023\275\034\057\051\066\001" +
    "\001\000\002\001\001\000\004\017\304\001\001\000\014" +
    "\011\273\012\310\013\277\034\057\051\066\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\011\273\013\332\034\057\051\066\001\001\000\012\011" +
    "\273\013\331\034\057\051\066\001\001\000\012\011\273" +
    "\013\330\034\057\051\066\001\001\000\012\011\273\013" +
    "\327\034\057\051\066\001\001\000\012\011\273\013\326" +
    "\034\057\051\066\001\001\000\012\011\273\013\325\034" +
    "\057\051\066\001\001\000\012\011\273\013\324\034\057" +
    "\051\066\001\001\000\012\011\273\013\323\034\057\051" +
    "\066\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\011\273\012\274\013\277\021" +
    "\337\022\301\023\275\034\057\051\066\001\001\000\002" +
    "\001\001\000\004\020\335\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\006\031\025\015" +
    "\026\033\032\022\033\025\035\014\036\012\037\030\041" +
    "\023\044\024\050\021\051\017\056\034\057\344\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\006\031\025\015\026\033\032\022\033\025\035\014" +
    "\036\012\037\030\041\023\044\024\050\021\051\017\056" +
    "\034\057\350\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\007\176\011\060\027\361\030\177" +
    "\034\057\051\066\001\001\000\016\007\176\011\060\027" +
    "\360\030\177\034\057\051\066\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\024\u0108\055\u0110" +
    "\001\001\000\006\024\u0108\055\u0106\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\024\u0108\055\u0112\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoPython$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoPython$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoPython$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public ManejadorSintacticoVB_PY msVB_PY = ManejadorSintacticoVB_PY.getInstacia();
    public ManejadorInstancias mi = ManejadorInstancias.getInstance();
    public ManejadorCuartetos mc = ManejadorCuartetos.getInstancia();
    public ManejadorBuscarMetodos mbm = ManejadorBuscarMetodos.getInstancia();
    public ManejadorReturn mr = ManejadorReturn.getInstancia();
    public int contadorLineas;
    public LexicoPython lexer;
    private FrameCTDOA frameCTDOA;
    
    public void setContadorLineas(int contadorLineas){
        this.contadorLineas = contadorLineas;
        msVB_PY.setContadorLineas(contadorLineas);
    }

    public SintacticoPython(LexicoPython lexer) { 
        super(lexer);   
        this.lexer = lexer;
        msVB_PY.nuevoAnalisis();
    }

    public void setLinea(int contadorLineas){
        this.contadorLineas = contadorLineas;
    }

    public void setFrameCTDOA(FrameCTDOA frameCTDOA) {
        this.frameCTDOA = frameCTDOA;
        msVB_PY.setFrameCTDOA(frameCTDOA);
    }

    public void setAccion(String tipo, String mensaje, String accion){
        frameCTDOA.addErrores("ERROR Lexico Tipo: " + tipo + "\t Mensaje: " + mensaje + "\tAcción: ERROR\n");
    }

    @Override
    public void syntax_error(Symbol s){
        try {
            msVB_PY.errorSintax(s.left, s.right, s.value, 
                "Uf, error sintactico en el codigo Python, cerca de la linea y columna indicada porfavor revisa que el token\n "
                        + "\t\tidicado corresponda a la declaracion de instruccion correspondiente. Vuelve a intentarlo."
            );
        } catch (Exception e) {
            System.out.println("Error " + e.toString());
        }
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SintacticoPython$actions {
  private final SintacticoPython parser;

  /** Constructor */
  CUP$SintacticoPython$actions(SintacticoPython parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SintacticoPython$do_action(
    int                        CUP$SintacticoPython$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoPython$parser,
    java.util.Stack            CUP$SintacticoPython$stack,
    int                        CUP$SintacticoPython$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoPython$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoPython$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // estructuras_p ::= estructuras 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		if(e == null) RESULT = new ArrayList<Simbolo>(); else RESULT = e;
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("estructuras_p",45, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // estructuras_p ::= estructuras estructuras_p 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = parser.msVB_PY.simbolosReturn(a, e, aleft, aright);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("estructuras_p",45, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // estructuras ::= error DEDENT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		parser.msVB_PY.errorSintax(eleft, eright, e, "Error en el bloque de instrucciones de la estructura, por favor revisa la entrada en la linea y columna indicada. \nEstructura esperada: << print || while || for || Asignacion de variables || If >>, se recupero hasta: << dedent >>");
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("estructuras",44, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // estructuras ::= error SALTO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		parser.msVB_PY.errorSintax(eleft, eright, e, "Error en el bloque de instrucciones de la estructura, por favor revisa la entrada en la linea y columna indicada. \nEstructura esperada: << print || while || for || Asignacion de variables || If >>, se recupero hasta: << Salto de Linea >>");
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("estructuras",44, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // estructuras ::= llamada_fp space 
            {
              Object RESULT =null;
		
        Object as = null;
        parser.mc.addYRemovePuntero(as, false);
    
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("estructuras",44, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // estructuras ::= return space 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		RESULT = e;
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("estructuras",44, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // estructuras ::= estructura_if 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("estructuras",44, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // estructuras ::= for 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("estructuras",44, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // estructuras ::= while 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("estructuras",44, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // estructuras ::= asignacion_variables space 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		parser.msVB_PY.declararVaiablesPY(eleft, eright, (Simbolo) e);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("estructuras",44, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // estructuras ::= mensaje_terminal space 
            {
              Object RESULT =null;
		/* Ignore */
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("estructuras",44, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // param_p ::= error param_p 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		 
        RESULT = a;
        parser.msVB_PY.errorSintax(eleft, eright, e, "Error sintactico en la instruccion de llamada a una funcion, no se esperaba el token indicado para el reconocimiento de parametros. Se esperaba el token: << Param, Param_n ... >>");
    
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("param_p",41, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // param_p ::= param_p COMA operaciones_aritmeticas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = parser.msVB_PY.lista(a, e);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("param_p",41, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // param_p ::= COMA operaciones_aritmeticas 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("param_p",41, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // param ::= 
            {
              Object RESULT =null;

              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("param",40, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // param ::= operaciones_aritmeticas 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("param",40, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // param ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		 
        parser.msVB_PY.errorSintax(eleft, eright, e, "Error sintactico en la instruccion de llamada a una funcion, no se esperaba el token indicado para el reconocimiento de parametros. Se esperaba el token: << Param, Param_n ... >>");
    
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("param",40, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // param ::= operaciones_aritmeticas param_p 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		
        List<Simbolo> lista = new ArrayList<>();
        if (e != null) {
            lista.add((Simbolo) e);
        }
        if(a instanceof Simbolo) {
            lista.add((Simbolo) a);
        } else {
            lista.addAll((List<Simbolo>) a);
        }
        RESULT = lista;
    
    
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("param",40, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // llamada_fp ::= error PARENTESIS_A param PARENTESIS_C 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-3)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		
        parser.msVB_PY.errorSintax(xleft, xright, x, "Error sintactico en la instruccion del llamado a una funcion. Se esperaba el token: << Identificador >>, no el token indicado.");
    
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("llamada_fp",39, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // llamada_fp ::= ID PARENTESIS_A param PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		RESULT = parser.mbm.buscarMetodo("PY_", a, e, aleft, aright, 2, true);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("llamada_fp",39, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // parametros_p ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		 
        RESULT = new ArrayList<>();
        parser.msVB_PY.errorSintax(eleft, eright, e, "Error sintactico en la instruccion de parametros, no se esperaba el token indicado. Se espera una estructura: << Param, Param_n ... >>.");
    
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("parametros_p",18, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // parametros_p ::= parametros_p COMA ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		
        Simbolo s = parser.msVB_PY.parametroPY(e, eleft, eright);
        List<Simbolo> listaSimbolos = new ArrayList<>();
        if(a != null) {
            if(a instanceof Simbolo) {
                listaSimbolos.add((Simbolo) a);
            } else {
                listaSimbolos = (List<Simbolo>) a;
            }
        }
        if(s != null) {
            listaSimbolos.add((Simbolo) s);
        }
        RESULT = listaSimbolos;
    
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("parametros_p",18, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // parametros_p ::= ID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = parser.msVB_PY.parametroPY(e, eleft, eright);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("parametros_p",18, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // parametros ::= 
            {
              Object RESULT =null;
		RESULT = new ArrayList<>();
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("parametros",43, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // parametros ::= parametros_p 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("parametros",43, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // space ::= 
            {
              Object RESULT =null;

              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("space",3, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // space ::= SALTO 
            {
              Object RESULT =null;

              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("space",3, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // def ::= def_p estructuras_p 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		
            parser.lexer.limpiarStack(); 
            RESULT = parser.msVB_PY.def(((Procedimiento) e).getU(), ((Procedimiento) e).getE(), i, ileft, iright);
        
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("def",42, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // def ::= def_p estructuras_p DEDENT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		  
            parser.lexer.limpiarStack(); 
            RESULT = parser.msVB_PY.def(((Procedimiento) e).getU(), ((Procedimiento) e).getE(), i, ileft, iright);
        
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("def",42, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // def_p ::= DEF ID error parametros PARENTESIS_C DOS_PUNTOS INDENT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-5)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-4)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-3)).value;
		
        parser.msVB_PY.errorSintax(xleft, xright, x, "Error sintactico en la instruccion de la estructura def. Se esperaba el token: << ( >>, no el token indicado.");
        parser.mc.addCuartetoProcedimiento(2, a, "PY", e, Constantes.FLOAT_VAR_VB_PY);  RESULT = new Procedimiento(a, e);
    
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("def_p",6, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // def_p ::= DEF ID error PARENTESIS_A parametros PARENTESIS_C DOS_PUNTOS INDENT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-6)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-5)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-3)).value;
		
        parser.msVB_PY.errorSintax(xleft, xright, x, "Error sintactico en la instruccion de la estructura def. Se esperaba el token: << ( >>, no el token indicado.");
        parser.mc.addCuartetoProcedimiento(2, a, "PY", e, Constantes.FLOAT_VAR_VB_PY);  RESULT = new Procedimiento(a, e);
    
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("def_p",6, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // def_p ::= DEF ID PARENTESIS_A parametros PARENTESIS_C DOS_PUNTOS error INDENT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-4)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		
        parser.msVB_PY.errorSintax(xleft, xright, x, "Error sintactico en la instruccion de la estructura def. Se esperaba el token: << Indent >>, no el token indicado.");
        parser.mc.addCuartetoProcedimiento(2, a, "PY", e, Constantes.FLOAT_VAR_VB_PY);  RESULT = new Procedimiento(a, e);
    
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("def_p",6, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // def_p ::= DEF ID PARENTESIS_A parametros PARENTESIS_C DOS_PUNTOS INDENT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-3)).value;
		parser.mc.addCuartetoProcedimiento(2, a, "PY", e, Constantes.FLOAT_VAR_VB_PY);  RESULT = new Procedimiento(a, e);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("def_p",6, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // estructura_if ::= if else_if_p else 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = parser.msVB_PY.construirCondicionalIf(a, e, i);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("estructura_if",38, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // estructura_if ::= if else_if_p 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = parser.msVB_PY.construirCondicionalIf(a, e, null);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("estructura_if",38, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // else_if_p ::= 
            {
              Object RESULT =null;
		RESULT = null;
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("else_if_p",37, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // else_if_p ::= else_if else_if_p 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		
        List<Simbolo> listaSimbolos = new ArrayList<>();
        if(a != null) {
            if(a instanceof Simbolo) {
                listaSimbolos.add((Simbolo) a);
            } else {
                listaSimbolos = (List<Simbolo>) a;
            }
        }
        if(e != null) {
            listaSimbolos.add((Simbolo) e);
        }
        RESULT = listaSimbolos;
    
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("else_if_p",37, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // else ::= ee DOS_PUNTOS error INDENT estructuras SALTO 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-3)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		
        parser.msVB_PY.errorSintax(xleft, xright, x, "Error sintactico en la instruccion de la estructura else. Se esperaba el token: << Indent >>, no el token indicado.");
        RESULT = parser.msVB_PY.crearEstructuraCondicional(a, false, 3); parser.mc.imprimirResto();
    
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("else",35, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // else ::= ee DOS_PUNTOS error INDENT estructuras_p DEDENT 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-3)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		
        parser.msVB_PY.errorSintax(xleft, xright, x, "Error sintactico en la instruccion de la estructura else. Se esperaba el token: << Indent >>, no el token indicado.");
        RESULT = parser.msVB_PY.crearEstructuraCondicional(a, false, 3); parser.mc.imprimirResto();
    
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("else",35, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // else ::= ee DOS_PUNTOS INDENT estructuras SALTO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		RESULT = parser.msVB_PY.crearEstructuraCondicional(a, false, 3); parser.mc.imprimirResto();
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("else",35, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // else ::= ee DOS_PUNTOS INDENT estructuras_p DEDENT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		RESULT = parser.msVB_PY.crearEstructuraCondicional(a, false, 3); parser.mc.imprimirResto();
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("else",35, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // else_if ::= ie DOS_PUNTOS error INDENT estructuras_p SALTO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-5)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-3)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		
        parser.msVB_PY.errorSintax(xleft, xright, x, "Error sintactico en la instruccion de la estructura elif. Se esperaba el token: << Indent >>, no el token indicado.");
        RESULT = parser.msVB_PY.crearEstructuraCondicional(a, e, 2); parser.mc.imprimirResto();
    
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("else_if",36, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // else_if ::= ie DOS_PUNTOS error INDENT estructuras_p DEDENT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-5)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-3)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		
        parser.msVB_PY.errorSintax(xleft, xright, x, "Error sintactico en la instruccion de la estructura elif. Se esperaba el token: << Indent >>, no el token indicado.");
        RESULT = parser.msVB_PY.crearEstructuraCondicional(a, e, 2); parser.mc.imprimirResto();
    
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("else_if",36, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // else_if ::= ie DOS_PUNTOS INDENT estructuras_p SALTO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		RESULT = parser.msVB_PY.crearEstructuraCondicional(a, e, 2); parser.mc.imprimirResto();
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("else_if",36, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // else_if ::= ie DOS_PUNTOS INDENT estructuras_p DEDENT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		RESULT = parser.msVB_PY.crearEstructuraCondicional(a, e, 2); parser.mc.imprimirResto();
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("else_if",36, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ee ::= ELSE 
            {
              Object RESULT =null;
		parser.mc.escribirEtiquetasInicio(false); parser.mc.escribirEtiquetaFin(); parser.mc.nuevoAnalisisBoolean(); 
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("ee",33, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ie ::= ELIF condicional 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		parser.mc.escribirEtiquetasInicio(false); parser.mc.escribirEtiquetaFin(); parser.mc.nuevoAnalisisBoolean(); RESULT = e;
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("ie",32, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ii ::= IF condicional 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		parser.mc.escribirEtiquetasInicio(false); parser.mc.escribirEtiquetaFin(); parser.mc.nuevoAnalisisBoolean(); RESULT = e;
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("ii",31, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // if ::= ii DOS_PUNTOS error INDENT estructuras_p SALTO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-5)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-3)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		
        parser.msVB_PY.errorSintax(xleft, xright, x, "Error sintactico en la instruccion de la estructura if. Se esperaba el token: << Indent >>, no el token indicado.");
        RESULT = parser.msVB_PY.crearEstructuraCondicional(e, a, 1); parser.mc.imprimirResto();
    
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("if",34, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // if ::= ii DOS_PUNTOS error INDENT estructuras_p DEDENT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-5)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-3)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		
        parser.msVB_PY.errorSintax(xleft, xright, x, "Error sintactico en la instruccion de la estructura if. Se esperaba el token: << Indent >>, no el token indicado.");
        RESULT = parser.msVB_PY.crearEstructuraCondicional(e, a, 1); parser.mc.imprimirResto();
    
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("if",34, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // if ::= ii DOS_PUNTOS INDENT estructuras_p SALTO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		RESULT = parser.msVB_PY.crearEstructuraCondicional(e, a, 1); parser.mc.imprimirResto();
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("if",34, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // if ::= ii DOS_PUNTOS INDENT estructuras_p DEDENT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		RESULT = parser.msVB_PY.crearEstructuraCondicional(e, a, 1); parser.mc.imprimirResto();
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("if",34, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // rango ::= error 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		parser.msVB_PY.errorSintax(xleft, xright, x, "Error sintactico en la instruccion de la estructura for. Se esperaba el token: << Identificador | Opearcion Aritmetica >>, no el token indicado.");
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("rango",30, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // rango ::= return_dato COMA return_dato COMA return_dato 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		
        List<Simbolo> lista = new ArrayList<>();
        if(a != null) {
            lista.add((Simbolo) a);
        } 
        if(e != null) {
            lista.add((Simbolo) e);
        }
        if(e != null) { 
            lista.add((Simbolo) i); 
        }
        RESULT = lista;
    
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("rango",30, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // rango ::= return_dato COMA return_dato 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		
        List<Simbolo> lista = new ArrayList<>();
        if(a != null) {
            lista.add((Simbolo) a);
        } 
        if(e != null) {
            lista.add((Simbolo) e);
        }
        RESULT = lista;
    
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("rango",30, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // rango ::= return_dato 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = a;
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("rango",30, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // for ::= for_p estructuras_p DEDENT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		 
        RESULT = parser.msVB_PY.cicloForPY("", eleft, eright, ((For) e).getRango(), i);
        parser.mc.finFor(((For) e).getLista());
    
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("for",29, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // for ::= for_p estructuras_p SALTO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		
        RESULT = parser.msVB_PY.cicloForPY("", eleft, eright, ((For) e).getRango(), i);
        parser.mc.finFor(((For) e).getLista());
    
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("for",29, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // for_p ::= error var IN RANGE ppa rango PARENTESIS_C DOS_PUNTOS INDENT 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-8)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-8)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-3)).value;
		
        parser.msVB_PY.errorSintax(xleft, xright, x, "Error sintactico en la instruccion de la estructura for. Se esperaba el token: << for >>, no el token indicado.");
        RESULT = new For(e, (Simbolo) a, parser.mc.addForPY(a, e));
    
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("for_p",24, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // for_p ::= FOR var IN error RANGE ppa rango PARENTESIS_C DOS_PUNTOS INDENT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-8)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-6)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-6)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-3)).value;
		
        parser.msVB_PY.errorSintax(xleft, xright, x, "Error sintactico en la instruccion de la estructura for. Se esperaba el token: << range >>, no el token indicado.");
        RESULT = new For(e, (Simbolo) a, parser.mc.addForPY(a, e));
    
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("for_p",24, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-9)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // for_p ::= FOR var error IN RANGE ppa rango PARENTESIS_C DOS_PUNTOS INDENT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-8)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-7)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-7)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-3)).value;
		
        parser.msVB_PY.errorSintax(xleft, xright, x, "Error sintactico en la instruccion de la estructura for. Se esperaba el token: << in >>, no el token indicado.");
        RESULT = new For(e, (Simbolo) a, parser.mc.addForPY(a, e));
    
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("for_p",24, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-9)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // for_p ::= FOR var IN RANGE ppa rango error DOS_PUNTOS INDENT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-3)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).value;
		
        parser.msVB_PY.errorSintax(xleft, xright, x, "Error sintactico en la instruccion de la estructura for. Se esperaba el token: << ) >>, no el token indicado.");
        RESULT = new For(e, (Simbolo) a, parser.mc.addForPY(a, e));
    
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("for_p",24, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // for_p ::= FOR var IN RANGE ppa rango PARENTESIS_C DOS_PUNTOS INDENT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-3)).value;
		RESULT = new For(e, (Simbolo) a, parser.mc.addForPY(a, e));
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("for_p",24, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // var ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		parser.msVB_PY.errorSintax(eleft, eright, e, "Error sintactico en la declaracion de datos, de la instruccion for. Se esperaba el token: << Identificador >>");
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("var",23, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // var ::= ID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = parser.msVB_PY.idPY((String) e, eleft, eright);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("var",23, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // while ::= while_p estructuras_p DEDENT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		
            RESULT = parser.msVB_PY.contruirEstructuraCiloDW(e, ((While) a).getA(), 1);
            parser.mc.finWhile(((While) a).getIdEtiqueta());
            parser.mc.imprimirResto();
        
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("while",25, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // while ::= while_p estructuras_p SALTO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		
            RESULT = parser.msVB_PY.contruirEstructuraCiloDW(e, ((While) a).getA(), 1);
            parser.mc.finWhile(((While) a).getIdEtiqueta());
            parser.mc.imprimirResto();
        
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("while",25, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // while_p ::= while_n condicional DOS_PUNTOS error INDENT 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-4)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-4)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		
        parser.msVB_PY.errorSintax(eleft, eright, e, "Error sintactico en la instrucion while. Se esperaba el token: << Indent >>, no el token indicado.");
        parser.mc.nuevoAnalisisBoolean();
        parser.mc.escribirEtiquetasInicio(false);
        parser.mc.addEtiquetasEstructuras();
        ((While) w).setA(a);
        RESULT = w;
    
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("while_p",28, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // while_p ::= while_n condicional DOS_PUNTOS INDENT 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-3)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-3)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).value;
		
        parser.mc.nuevoAnalisisBoolean();
        parser.mc.escribirEtiquetasInicio(false);
        parser.mc.addEtiquetasEstructuras();
        ((While) w).setA(a);
        RESULT = w;
    
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("while_p",28, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // while_n ::= WHILE 
            {
              Object RESULT =null;
		RESULT = new While(parser.mc.addWhile(), null);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("while_n",27, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // solicitud_p ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		parser.msVB_PY.errorSintax(eleft, eright, e, "Error sintactico en la instruccion solicitud de datos. Se esperaba una estructura como: << ( Texto ) >>.");
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("solicitud_p",11, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // solicitud_p ::= error PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		parser.msVB_PY.errorSintax(eleft, eright, e, "Error sintactico en la instruccion solicitud de datos. Se esperaba el token: << ) >>.");
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("solicitud_p",11, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // solicitud_p ::= PARENTESIS_A PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("solicitud_p",11, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // solicitud_p ::= PARENTESIS_A CADENA PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		parser.mc.imprimir(new Simbolo(null, e));
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("solicitud_p",11, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // solicitud_datos ::= CINPUT solicitud_p 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		RESULT = new Simbolo(Constantes.CHAR_VAR_VB_PY, '\b', 2);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("solicitud_datos",22, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // solicitud_datos ::= FINPUT solicitud_p 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		RESULT = new Simbolo(Constantes.FLOAT_VAR_VB_PY, 0, 3);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("solicitud_datos",22, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // solicitud_datos ::= IINPUT solicitud_p 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		RESULT = new Simbolo(Constantes.INT_VAR_VB_PY, 0, 1);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("solicitud_datos",22, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // asignacion ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		parser.msVB_PY.errorSintax(eleft, eright, e, "Error sintactico en la instruccion de valores a asignar. Se esperaba: << Identificador, Numero, Operacion Aritmetica >>.");
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("asignacion",21, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // asignacion ::= solicitud_datos 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("asignacion",21, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // asignacion ::= return_dato 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("asignacion",21, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // asignacion_variables ::= error IGUAL asignacion 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		  
       parser.msVB_PY.errorSintax(oleft, oright, o, "Error sintactico en la intruccion asignacion de variables. Se esperaba el token: << Identificador >>");
    
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("asignacion_variables",20, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // asignacion_variables ::= ID error asignacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		  
        parser.msVB_PY.errorSintax(oleft, oright, o, "Error sintactico en la intruccion asignacion de variables. Se esperaba el token: << = >>");
        if(e != null) {
            RESULT = new Simbolo(((Simbolo) e).getTipo(), ((Simbolo) e), a);
        } else { 
            RESULT = e;
        }
    
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("asignacion_variables",20, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // asignacion_variables ::= ID IGUAL asignacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		  
        if(e != null) {
            RESULT = new Simbolo(((Simbolo) e).getTipo(), ((Simbolo) e), a);
        } else { 
            RESULT = e;
        }
    
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("asignacion_variables",20, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // mensaje_terminal ::= PRINT ppa concatenacion error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		
        parser.msVB_PY.errorSintax(oleft, oright, o, "Error sintactico en la intruccion de mensaje terminal. Se esperaba el token: << ) >>");
        parser.mc.imprimirNuevaLinea(); RESULT = e;
    
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("mensaje_terminal",19, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // mensaje_terminal ::= error ppa concatenacion PARENTESIS_C 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-3)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		
        parser.msVB_PY.errorSintax(oleft, oright, o, "Error sintactico en la intruccion de mensaje terminal. Se esperaba el token: << print >>");
        parser.mc.imprimirNuevaLinea(); RESULT = e;
    
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("mensaje_terminal",19, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // mensaje_terminal ::= PRINT ppa concatenacion PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		parser.mc.imprimirNuevaLinea(); RESULT = e;
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("mensaje_terminal",19, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // concatenacion ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		parser.msVB_PY.errorSintax(eleft, eright, e, "Error sintactico en la concatenacion de cadenas, de la instruccion de imprimir mensajes en la terminal. Se esperaba una concatenacion de cadenas.");
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("concatenacion",12, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // concatenacion ::= estruct 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		parser.mc.imprimirPrintf(0, (Simbolo) e, -1); RESULT = e;
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("concatenacion",12, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // concatenacion ::= CADENA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		parser.mc.imprimir(new Simbolo(null, e)); RESULT = e;
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("concatenacion",12, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // concatenacion ::= concatenacion COMA concatenacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		parser.msVB_PY.concatencacion(a, e);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("concatenacion",12, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // concatenacion ::= concatenacion MAS concatenacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		parser.msVB_PY.concatencacion(a, e);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("concatenacion",12, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ppa ::= error 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		parser.msVB_PY.errorSintax(xleft, xright, x, "Error sintactico en la instruccion indicada. Se esperaba el token: << ( >>, no el token indicado.");
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("ppa",1, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ppa ::= PARENTESIS_A 
            {
              Object RESULT =null;

              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("ppa",1, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // condicional_not ::= operaciones_logicas 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		parser.mc.gotoEscribir(); RESULT = e;
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("condicional_not",17, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // condicional_not ::= NOT ppa operaciones_logicas error 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		
        parser.msVB_PY.errorSintax(eleft, eright, e, "Error sintactico en las operacionaciones logicas, de la intruccion condicional not. Se esperaba el token: << ) >>");
        RESULT = parser.msVB_PY.comprobacionCondicional(a, true, 3, aleft, aright);
    
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("condicional_not",17, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // condicional_not ::= NOT ppa operaciones_logicas PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		RESULT = parser.msVB_PY.comprobacionCondicional(a, true, 3, aleft, aright);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("condicional_not",17, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // condicional_and ::= condicional_not 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = a;
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("condicional_and",16, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // condicional_and ::= condicional_and and condicional_and 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = parser.msVB_PY.comprobacionCondicional(a, e, 1, cleft, cright);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("condicional_and",16, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // condicional_or ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		parser.msVB_PY.errorSintax(eleft, eright, e, "Error sintactico en las operacionaciones logicas, de la intruccion condicional. Se esperaba la estructura: << OP1 Operador Logico OP2 >>");
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("condicional_or",15, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // condicional_or ::= condicional_and 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = a;
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("condicional_or",15, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // condicional_or ::= condicional_or or condicional_or 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = parser.msVB_PY.comprobacionCondicional(a, e, 2, cleft, cright);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("condicional_or",15, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // or ::= OR 
            {
              Object RESULT =null;
		parser.mc.or(); parser.mc.condicionalOR(); if (!parser.mc.ultimoAgregadorEtiqueta()) { parser.mc.escribirEtiqueta();}
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("or",14, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // and ::= AND 
            {
              Object RESULT =null;
		parser.mc.and(); parser.mc.condicionalAND(); parser.mc.escribirEtiqueta();
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("and",13, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // condicional ::= error INDENT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		
        parser.mc.nuevoAnalisisBoolean();  
        parser.msVB_PY.errorSintax(eleft, eright, e, "Error sintactico en las operacionaciones logicas, de la instruccion condicional. Se esperaba una operacion condicional como: << OP1 OperadorComparacion OP2 >>");
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("condicional",10, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // condicional ::= error SALTO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		
        parser.mc.nuevoAnalisisBoolean();  
        parser.msVB_PY.errorSintax(eleft, eright, e, "Error sintactico en las operacionaciones logicas, de la instruccion condicional. Se esperaba una operacion condicional como: << OP1 OperadorComparacion OP2 >>");
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("condicional",10, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // condicional ::= condicional_or 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		parser.mc.nuevoAnalisisBoolean(); RESULT = e;
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("condicional",10, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // tipos_comparacion ::= error 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		parser.msVB_PY.errorSintax(aleft, aright, a, "Error sintactico en la instruccion de operaciones de comparacion. Se esperaba algun token como: << Identificador, Operacion Aritmetica, Caracter >>");
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("tipos_comparacion",9, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // tipos_comparacion ::= CARACTER 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = new Simbolo(Constantes.CHAR_VAR_VB_PY, e);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("tipos_comparacion",9, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // tipos_comparacion ::= operaciones_aritmeticas 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("tipos_comparacion",9, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // operaciones_logicas ::= tipos_comparacion error tipos_comparacion 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		parser.msVB_PY.errorSintax(aleft, aright, a, "Error sintactico en la instruccion de operaciones de comparacion. Se esperaba algun token como: << <, >, <=.>=, <>, = >>");
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",8, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // operaciones_logicas ::= tipos_comparacion MAYOR_IGUAL tipos_comparacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = parser.msVB_PY.comprobarOperacionesLogicas(a, e, 6, cleft, cright);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",8, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // operaciones_logicas ::= tipos_comparacion MAYOR tipos_comparacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = parser.msVB_PY.comprobarOperacionesLogicas(a, e, 5, cleft, cright);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",8, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // operaciones_logicas ::= tipos_comparacion MENOR_IGUAL tipos_comparacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = parser.msVB_PY.comprobarOperacionesLogicas(a, e, 4, cleft, cright);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",8, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // operaciones_logicas ::= tipos_comparacion MENOR tipos_comparacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = parser.msVB_PY.comprobarOperacionesLogicas(a, e, 3, cleft, cright);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",8, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // operaciones_logicas ::= tipos_comparacion DIFERENTE tipos_comparacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = parser.msVB_PY.comprobarOperacionesLogicas(a, e, 2, cleft, cright);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",8, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // operaciones_logicas ::= tipos_comparacion DISTINTO tipos_comparacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = parser.msVB_PY.comprobarOperacionesLogicas(a, e, 2, cleft, cright);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",8, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // operaciones_logicas ::= tipos_comparacion IGUAL_IGUAL tipos_comparacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = parser.msVB_PY.comprobarOperacionesLogicas(a, e, 1, cleft, cright);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",8, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // estruct ::= llamada_fp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		
        if(a != null) {
            Tipo tipo = ((Simbolo) a).getTipoFuncion();
            if(tipo != null && tipo.getNombre().equals("Funcion")) {
                RESULT = a;
            } else {
                parser.msVB_PY.errorSemantico(aleft, aright, "Asignacion", "Error, los metodos no pueden asignarse.");
                RESULT = null;
            }
        }
    
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("estruct",26, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // estruct ::= REAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		float e = (float)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = new Simbolo(Constantes.FLOAT_VAR_VB_PY, e);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("estruct",26, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // estruct ::= NUMERO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = new Simbolo(Constantes.INT_VAR_VB_PY, e);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("estruct",26, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // estruct ::= ID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = parser.msVB_PY.metodoBuscarID(e.toString(), eleft, eright);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("estruct",26, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // estruct ::= PARENTESIS_A operaciones_aritmeticas PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		RESULT = e;
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("estruct",26, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // operaciones_aritmeticas ::= estruct 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("operaciones_aritmeticas",7, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // operaciones_aritmeticas ::= MENOS estruct 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = parser.msVB_PY.modificarVariables(e, eleft, eright);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("operaciones_aritmeticas",7, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // operaciones_aritmeticas ::= operaciones_aritmeticas DIV operaciones_aritmeticas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = parser.msVB_PY.realizarOperaciones(a, e, aleft, aright, eleft, eright, 4);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("operaciones_aritmeticas",7, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // operaciones_aritmeticas ::= operaciones_aritmeticas POR operaciones_aritmeticas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = parser.msVB_PY.realizarOperaciones(a, e, aleft, aright, eleft, eright, 3);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("operaciones_aritmeticas",7, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // operaciones_aritmeticas ::= operaciones_aritmeticas MOD operaciones_aritmeticas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = parser.msVB_PY.realizarOperaciones(a, e, aleft, aright, eleft, eright, 5);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("operaciones_aritmeticas",7, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // operaciones_aritmeticas ::= operaciones_aritmeticas MENOS operaciones_aritmeticas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = parser.msVB_PY.realizarOperaciones(a, e, aleft, aright, eleft, eright, 2);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("operaciones_aritmeticas",7, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // operaciones_aritmeticas ::= operaciones_aritmeticas MAS operaciones_aritmeticas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = parser.msVB_PY.realizarOperaciones(a, e, aleft, aright, eleft, eright, 1);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("operaciones_aritmeticas",7, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // return_dato ::= operaciones_aritmeticas 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("return_dato",5, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // return_dato ::= CARACTER 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = new Simbolo(Constantes.CHAR_VAR_VB_PY, e);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("return_dato",5, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // return ::= RETURN error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		parser.msVB_PY.errorSintax(eleft, eright, e, "Error en la sintaxis de la instruccion return. Se esperaba: << Operacion aritmetica, identificador, numero>>.");
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("return",4, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // return ::= error return_dato 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		  
        parser.msVB_PY.errorSintax(aleft, aright, a, "Error en la sintaxis de la instruccion return. Se esperaba el token << RETURN >>");
        if(e != null) {
            if (parser.mr.compararReturn((Simbolo) e, eleft, eright)){
                RESULT = new Simbolo(Constantes.RETURN_VAR, e);
            } else {
                RESULT = null;
            }
        } else {
            RESULT = null;
        }    
    
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("return",4, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // return ::= RETURN return_dato 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		 
        if(e != null) {
            if (parser.mr.compararReturn((Simbolo) e, eleft, eright)){
                RESULT = new Simbolo(Constantes.RETURN_VAR, e);
            } else {
                RESULT = null;
            }
        } else {
            RESULT = null;
        }    
    
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("return",4, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // estructuras_def ::= 
            {
              Object RESULT =null;
		RESULT = null;
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("estructuras_def",2, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // estructuras_def ::= def estructuras_def 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		
        List<Simbolo> listaSimbolos = new ArrayList<>();
        if(a != null) {
            if(a instanceof Simbolo) {
                listaSimbolos.add((Simbolo) a);
            } else {
                listaSimbolos = (List<Simbolo>) a;
            }
        }
        if(e != null) {
            listaSimbolos.add((Simbolo) e);
        }
        RESULT = listaSimbolos;
    
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("estructuras_def",2, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= estructuras_def 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		parser.mi.setClasePY(parser.msVB_PY.clasePY(e));
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= SALTO estructuras_def 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		parser.mi.setClasePY(parser.msVB_PY.clasePY(e));
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoPython$parser.done_parsing();
          return CUP$SintacticoPython$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

