
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Nov 10 03:26:43 CST 2020
//----------------------------------------------------

package proyectofinal.ctdoa.backend.analizador.python;

import java_cup.runtime.*;
import proyectofinal.ctdoa.backend.objetos.*;
import proyectofinal.ctdoa.backend.manejadores.*;
import java.util.ArrayList;
import java.util.List;
import proyectofinal.ctdoa.frontend.gui.FrameCTDOA;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Nov 10 03:26:43 CST 2020
  */
public class SintacticoPython extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SintacticoPython() {super();}

  /** Constructor which sets the default scanner. */
  public SintacticoPython(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoPython(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\161\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\004\000\002\003\002\000\002\005\004" +
    "\000\002\005\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\010\005\000\002\010\005\000\002" +
    "\010\005\000\002\010\005\000\002\010\005\000\002\010" +
    "\004\000\002\010\003\000\002\033\005\000\002\033\003" +
    "\000\002\033\003\000\002\033\003\000\002\033\003\000" +
    "\002\011\005\000\002\011\005\000\002\011\005\000\002" +
    "\011\005\000\002\011\005\000\002\011\005\000\002\011" +
    "\005\000\002\012\003\000\002\012\003\000\002\013\003" +
    "\000\002\013\004\000\002\013\004\000\002\016\003\000" +
    "\002\017\003\000\002\020\005\000\002\020\003\000\002" +
    "\020\003\000\002\021\005\000\002\021\003\000\002\022" +
    "\006\000\002\022\003\000\002\015\005\000\002\015\005" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\024\006\000\002\025\005\000\002\026\003\000\002" +
    "\026\003\000\002\027\004\000\002\027\004\000\002\027" +
    "\004\000\002\014\005\000\002\014\004\000\002\014\004" +
    "\000\002\014\003\000\002\034\003\000\002\035\006\000" +
    "\002\032\005\000\002\032\005\000\002\030\003\000\002" +
    "\030\003\000\002\031\013\000\002\036\005\000\002\036" +
    "\005\000\002\037\003\000\002\037\005\000\002\037\007" +
    "\000\002\043\007\000\002\043\007\000\002\040\004\000" +
    "\002\041\004\000\002\042\003\000\002\045\007\000\002" +
    "\045\007\000\002\044\007\000\002\044\007\000\002\046" +
    "\004\000\002\046\002\000\002\047\004\000\002\047\005" +
    "\000\002\007\011\000\002\053\005\000\002\053\004\000" +
    "\002\004\003\000\002\004\002\000\002\054\003\000\002" +
    "\054\002\000\002\023\003\000\002\023\005\000\002\023" +
    "\003\000\002\050\006\000\002\051\004\000\002\051\003" +
    "\000\002\051\003\000\002\051\002\000\002\052\004\000" +
    "\002\052\005\000\002\052\004\000\002\055\004\000\002" +
    "\055\004\000\002\055\003\000\002\055\003\000\002\055" +
    "\003\000\002\055\004\000\002\055\004\000\002\055\004" +
    "\000\002\055\004\000\002\056\004\000\002\056\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\306\000\010\002\ufffd\036\005\044\010\001\002\000" +
    "\004\002\uffff\001\002\000\004\054\276\001\002\000\006" +
    "\002\ufffd\036\005\001\002\000\004\002\274\001\002\000" +
    "\006\002\ufffd\036\005\001\002\000\020\003\030\026\027" +
    "\027\012\030\033\033\017\037\014\054\020\001\002\000" +
    "\022\003\uffc6\005\uffc6\007\uffc6\023\uffc6\042\uffc6\052\uffc6" +
    "\053\uffc6\054\uffc6\001\002\000\020\003\030\026\027\027" +
    "\012\030\033\033\017\037\014\054\020\001\002\000\020" +
    "\003\060\005\064\007\053\042\062\052\056\053\061\054" +
    "\057\001\002\000\022\003\172\005\176\007\053\023\174" +
    "\042\062\052\056\053\061\054\057\001\002\000\030\002" +
    "\uffa9\003\uffa9\026\uffa9\027\uffa9\030\uffa9\033\uffa9\036\uffa9" +
    "\037\uffa9\044\040\051\uffa9\054\uffa9\001\002\000\022\003" +
    "\172\005\176\007\053\023\174\042\062\052\056\053\061" +
    "\054\057\001\002\000\006\013\242\042\101\001\002\000" +
    "\030\002\uffa9\003\uffa9\026\uffa9\027\uffa9\030\uffa9\033\uffa9" +
    "\036\uffa9\037\uffa9\044\040\051\uffa9\054\uffa9\001\002\000" +
    "\030\002\uff97\003\uff97\026\uff97\027\uff97\030\uff97\033\uff97" +
    "\036\uff97\037\uff97\044\uff97\051\uff97\054\uff97\001\002\000" +
    "\020\003\030\026\027\027\012\030\033\033\017\037\014" +
    "\054\020\001\002\000\004\041\231\001\002\000\034\002" +
    "\uffb0\003\uffb0\026\uffb0\027\uffb0\030\uffb0\033\uffb0\034\uffb0" +
    "\035\142\036\uffb0\037\uffb0\044\uffb0\051\uffb0\054\uffb0\001" +
    "\002\000\030\002\uff99\003\uff99\026\uff99\027\uff99\030\uff99" +
    "\033\uff99\036\uff99\037\uff99\044\uff99\051\uff99\054\uff99\001" +
    "\002\000\004\042\130\001\002\000\030\002\ufffb\003\ufffb" +
    "\026\ufffb\027\ufffb\030\ufffb\033\ufffb\036\ufffb\037\ufffb\044" +
    "\127\051\126\054\ufffb\001\002\000\030\002\uffa9\003\uffa9" +
    "\026\uffa9\027\uffa9\030\uffa9\033\uffa9\036\uffa9\037\uffa9\044" +
    "\040\051\uffa9\054\uffa9\001\002\000\030\002\uff98\003\uff98" +
    "\026\uff98\027\uff98\030\uff98\033\uff98\036\uff98\037\uff98\044" +
    "\uff98\051\uff98\054\uff98\001\002\000\006\003\044\054\043" +
    "\001\002\000\030\002\uff91\003\030\026\027\027\012\030" +
    "\033\033\017\036\uff91\037\014\044\uff91\051\uff91\054\020" +
    "\001\002\000\010\002\uffab\036\uffab\051\041\001\002\000" +
    "\030\002\uffa9\003\uffa9\026\uffa9\027\uffa9\030\uffa9\033\uffa9" +
    "\036\uffa9\037\uffa9\044\040\051\uffa9\054\uffa9\001\002\000" +
    "\030\002\uff9a\003\uff9a\026\uff9a\027\uff9a\030\uff9a\033\uff9a" +
    "\036\uff9a\037\uff9a\044\uff9a\051\uff9a\054\uff9a\001\002\000" +
    "\030\002\uffaa\003\uffaa\026\uffaa\027\uffaa\030\uffaa\033\uffaa" +
    "\036\uffaa\037\uffaa\044\uffaa\051\uffaa\054\uffaa\001\002\000" +
    "\006\002\uffac\036\uffac\001\002\000\012\002\uff92\036\uff92" +
    "\044\uff92\051\uff92\001\002\000\004\031\uffc2\001\002\000" +
    "\004\031\uffc1\001\002\000\004\031\046\001\002\000\004" +
    "\032\047\001\002\000\004\042\050\001\002\000\020\003" +
    "\060\005\064\007\053\042\062\052\056\053\061\054\057" +
    "\001\002\000\006\040\121\043\uffbd\001\002\000\004\043" +
    "\116\001\002\000\012\042\062\052\056\053\061\054\057" +
    "\001\002\000\072\002\ufff1\003\ufff1\006\ufff1\007\ufff1\010" +
    "\ufff1\011\ufff1\012\ufff1\014\ufff1\015\ufff1\016\ufff1\017\ufff1" +
    "\020\ufff1\021\ufff1\022\ufff1\024\ufff1\025\ufff1\026\ufff1\027" +
    "\ufff1\030\ufff1\033\ufff1\036\ufff1\037\ufff1\040\ufff1\041\ufff1" +
    "\043\ufff1\044\ufff1\051\ufff1\054\ufff1\001\002\000\046\002" +
    "\ufff9\003\ufff9\006\067\007\071\010\073\011\066\012\072" +
    "\026\ufff9\027\ufff9\030\ufff9\033\ufff9\036\ufff9\037\ufff9\040" +
    "\ufff9\043\ufff9\044\ufff9\051\ufff9\054\ufff9\001\002\000\072" +
    "\002\uffee\003\uffee\006\uffee\007\uffee\010\uffee\011\uffee\012" +
    "\uffee\014\uffee\015\uffee\016\uffee\017\uffee\020\uffee\021\uffee" +
    "\022\uffee\024\uffee\025\uffee\026\uffee\027\uffee\030\uffee\033" +
    "\uffee\036\uffee\037\uffee\040\uffee\041\uffee\043\uffee\044\uffee" +
    "\051\uffee\054\uffee\001\002\000\074\002\uffef\003\uffef\006" +
    "\uffef\007\uffef\010\uffef\011\uffef\012\uffef\014\uffef\015\uffef" +
    "\016\uffef\017\uffef\020\uffef\021\uffef\022\uffef\024\uffef\025" +
    "\uffef\026\uffef\027\uffef\030\uffef\033\uffef\036\uffef\037\uffef" +
    "\040\uffef\041\uffef\042\101\043\uffef\044\uffef\051\uffef\054" +
    "\uffef\001\002\000\034\002\ufff8\003\ufff8\026\ufff8\027\ufff8" +
    "\030\ufff8\033\ufff8\036\ufff8\037\ufff8\040\ufff8\043\ufff8\044" +
    "\ufff8\051\ufff8\054\ufff8\001\002\000\072\002\uffed\003\uffed" +
    "\006\uffed\007\uffed\010\uffed\011\uffed\012\uffed\014\uffed\015" +
    "\uffed\016\uffed\017\uffed\020\uffed\021\uffed\022\uffed\024\uffed" +
    "\025\uffed\026\uffed\027\uffed\030\uffed\033\uffed\036\uffed\037" +
    "\uffed\040\uffed\041\uffed\043\uffed\044\uffed\051\uffed\054\uffed" +
    "\001\002\000\014\007\053\042\062\052\056\053\061\054" +
    "\057\001\002\000\072\002\uffec\003\uffec\006\uffec\007\uffec" +
    "\010\uffec\011\uffec\012\uffec\014\uffec\015\uffec\016\uffec\017" +
    "\uffec\020\uffec\021\uffec\022\uffec\024\uffec\025\uffec\026\uffec" +
    "\027\uffec\030\uffec\033\uffec\036\uffec\037\uffec\040\uffec\041" +
    "\uffec\043\uffec\044\uffec\051\uffec\054\uffec\001\002\000\034" +
    "\002\ufffa\003\ufffa\026\ufffa\027\ufffa\030\ufffa\033\ufffa\036" +
    "\ufffa\037\ufffa\040\ufffa\043\ufffa\044\ufffa\051\ufffa\054\ufffa" +
    "\001\002\000\016\006\067\007\071\010\073\011\066\012" +
    "\072\043\070\001\002\000\014\007\053\042\062\052\056" +
    "\053\061\054\057\001\002\000\014\007\053\042\062\052" +
    "\056\053\061\054\057\001\002\000\072\002\ufff0\003\ufff0" +
    "\006\ufff0\007\ufff0\010\ufff0\011\ufff0\012\ufff0\014\ufff0\015" +
    "\ufff0\016\ufff0\017\ufff0\020\ufff0\021\ufff0\022\ufff0\024\ufff0" +
    "\025\ufff0\026\ufff0\027\ufff0\030\ufff0\033\ufff0\036\ufff0\037" +
    "\ufff0\040\ufff0\041\ufff0\043\ufff0\044\ufff0\051\ufff0\054\ufff0" +
    "\001\002\000\014\007\053\042\062\052\056\053\061\054" +
    "\057\001\002\000\014\007\053\042\062\052\056\053\061" +
    "\054\057\001\002\000\014\007\053\042\062\052\056\053" +
    "\061\054\057\001\002\000\072\002\ufff4\003\ufff4\006\ufff4" +
    "\007\ufff4\010\ufff4\011\ufff4\012\ufff4\014\ufff4\015\ufff4\016" +
    "\ufff4\017\ufff4\020\ufff4\021\ufff4\022\ufff4\024\ufff4\025\ufff4" +
    "\026\ufff4\027\ufff4\030\ufff4\033\ufff4\036\ufff4\037\ufff4\040" +
    "\ufff4\041\ufff4\043\ufff4\044\ufff4\051\ufff4\054\ufff4\001\002" +
    "\000\072\002\ufff3\003\ufff3\006\ufff3\007\ufff3\010\ufff3\011" +
    "\ufff3\012\ufff3\014\ufff3\015\ufff3\016\ufff3\017\ufff3\020\ufff3" +
    "\021\ufff3\022\ufff3\024\ufff3\025\ufff3\026\ufff3\027\ufff3\030" +
    "\ufff3\033\ufff3\036\ufff3\037\ufff3\040\ufff3\041\ufff3\043\ufff3" +
    "\044\ufff3\051\ufff3\054\ufff3\001\002\000\072\002\ufff6\003" +
    "\ufff6\006\ufff6\007\ufff6\010\073\011\066\012\072\014\ufff6" +
    "\015\ufff6\016\ufff6\017\ufff6\020\ufff6\021\ufff6\022\ufff6\024" +
    "\ufff6\025\ufff6\026\ufff6\027\ufff6\030\ufff6\033\ufff6\036\ufff6" +
    "\037\ufff6\040\ufff6\041\ufff6\043\ufff6\044\ufff6\051\ufff6\054" +
    "\ufff6\001\002\000\072\002\ufff7\003\ufff7\006\ufff7\007\ufff7" +
    "\010\073\011\066\012\072\014\ufff7\015\ufff7\016\ufff7\017" +
    "\ufff7\020\ufff7\021\ufff7\022\ufff7\024\ufff7\025\ufff7\026\ufff7" +
    "\027\ufff7\030\ufff7\033\ufff7\036\ufff7\037\ufff7\040\ufff7\041" +
    "\ufff7\043\ufff7\044\ufff7\051\ufff7\054\ufff7\001\002\000\072" +
    "\002\ufff5\003\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5\012" +
    "\ufff5\014\ufff5\015\ufff5\016\ufff5\017\ufff5\020\ufff5\021\ufff5" +
    "\022\ufff5\024\ufff5\025\ufff5\026\ufff5\027\ufff5\030\ufff5\033" +
    "\ufff5\036\ufff5\037\ufff5\040\ufff5\041\ufff5\043\ufff5\044\ufff5" +
    "\051\ufff5\054\ufff5\001\002\000\020\003\104\007\053\042" +
    "\062\043\uff9f\052\056\053\061\054\057\001\002\000\004" +
    "\043\114\001\002\000\022\003\107\006\067\007\071\010" +
    "\073\011\066\012\072\040\105\043\uffa0\001\002\000\004" +
    "\043\uffa1\001\002\000\014\007\053\042\062\052\056\053" +
    "\061\054\057\001\002\000\006\040\111\043\uffa2\001\002" +
    "\000\006\003\107\040\105\001\002\000\006\040\111\043" +
    "\uff9c\001\002\000\014\007\053\042\062\052\056\053\061" +
    "\054\057\001\002\000\020\006\067\007\071\010\073\011" +
    "\066\012\072\040\uff9d\043\uff9d\001\002\000\020\006\067" +
    "\007\071\010\073\011\066\012\072\040\uff9e\043\uff9e\001" +
    "\002\000\072\002\uffa3\003\uffa3\006\uffa3\007\uffa3\010\uffa3" +
    "\011\uffa3\012\uffa3\014\uffa3\015\uffa3\016\uffa3\017\uffa3\020" +
    "\uffa3\021\uffa3\022\uffa3\024\uffa3\025\uffa3\026\uffa3\027\uffa3" +
    "\030\uffa3\033\uffa3\036\uffa3\037\uffa3\040\uffa3\041\uffa3\043" +
    "\uffa3\044\uffa3\051\uffa3\054\uffa3\001\002\000\072\002\ufff2" +
    "\003\ufff2\006\ufff2\007\ufff2\010\ufff2\011\ufff2\012\ufff2\014" +
    "\ufff2\015\ufff2\016\ufff2\017\ufff2\020\ufff2\021\ufff2\022\ufff2" +
    "\024\ufff2\025\ufff2\026\ufff2\027\ufff2\030\ufff2\033\ufff2\036" +
    "\ufff2\037\ufff2\040\ufff2\041\ufff2\043\ufff2\044\ufff2\051\ufff2" +
    "\054\ufff2\001\002\000\004\041\117\001\002\000\004\050" +
    "\120\001\002\000\020\003\uffc0\026\uffc0\027\uffc0\030\uffc0" +
    "\033\uffc0\037\uffc0\054\uffc0\001\002\000\020\003\060\005" +
    "\064\007\053\042\062\052\056\053\061\054\057\001\002" +
    "\000\006\040\123\043\uffbc\001\002\000\020\003\060\005" +
    "\064\007\053\042\062\052\056\053\061\054\057\001\002" +
    "\000\004\043\uffbb\001\002\000\030\002\uff96\003\uff96\026" +
    "\uff96\027\uff96\030\uff96\033\uff96\036\uff96\037\uff96\044\uff96" +
    "\051\uff96\054\uff96\001\002\000\030\002\uff93\003\uff93\026" +
    "\uff93\027\uff93\030\uff93\033\uff93\036\uff93\037\uff93\044\uff93" +
    "\051\uff93\054\uff93\001\002\000\030\002\uff94\003\uff94\026" +
    "\uff94\027\uff94\030\uff94\033\uff94\036\uff94\037\uff94\044\uff94" +
    "\051\uff94\054\uff94\001\002\000\016\003\133\004\131\042" +
    "\062\052\056\053\061\054\057\001\002\000\010\006\uffd4" +
    "\040\uffd4\043\uffd4\001\002\000\010\006\uffd3\040\uffd3\043" +
    "\uffd3\001\002\000\010\006\uffd2\040\uffd2\043\uffd2\001\002" +
    "\000\010\006\136\040\135\043\137\001\002\000\016\003" +
    "\133\004\131\042\062\052\056\053\061\054\057\001\002" +
    "\000\016\003\133\004\131\042\062\052\056\053\061\054" +
    "\057\001\002\000\030\002\uffd1\003\uffd1\026\uffd1\027\uffd1" +
    "\030\uffd1\033\uffd1\036\uffd1\037\uffd1\044\uffd1\051\uffd1\054" +
    "\uffd1\001\002\000\010\006\uffd6\040\uffd6\043\uffd6\001\002" +
    "\000\010\006\uffd5\040\uffd5\043\uffd5\001\002\000\022\003" +
    "\172\005\176\007\053\023\174\042\062\052\056\053\061" +
    "\054\057\001\002\000\032\002\uffaf\003\uffaf\026\uffaf\027" +
    "\uffaf\030\uffaf\033\uffaf\034\155\036\uffaf\037\uffaf\044\uffaf" +
    "\051\uffaf\054\uffaf\001\002\000\034\002\uffb0\003\uffb0\026" +
    "\uffb0\027\uffb0\030\uffb0\033\uffb0\034\uffb0\035\142\036\uffb0" +
    "\037\uffb0\044\uffb0\051\uffb0\054\uffb0\001\002\000\004\041" +
    "\146\001\002\000\004\050\147\001\002\000\020\003\030" +
    "\026\027\027\012\030\033\033\017\037\014\054\020\001" +
    "\002\000\006\044\152\051\151\001\002\000\034\002\uffb5" +
    "\003\uffb5\026\uffb5\027\uffb5\030\uffb5\033\uffb5\034\uffb5\035" +
    "\uffb5\036\uffb5\037\uffb5\044\uffb5\051\uffb5\054\uffb5\001\002" +
    "\000\034\002\uffb4\003\uffb4\026\uffb4\027\uffb4\030\uffb4\033" +
    "\uffb4\034\uffb4\035\uffb4\036\uffb4\037\uffb4\044\uffb4\051\uffb4" +
    "\054\uffb4\001\002\000\032\002\uffb1\003\uffb1\026\uffb1\027" +
    "\uffb1\030\uffb1\033\uffb1\034\uffb1\036\uffb1\037\uffb1\044\uffb1" +
    "\051\uffb1\054\uffb1\001\002\000\004\041\157\001\002\000" +
    "\004\041\uffb6\001\002\000\030\002\uffae\003\uffae\026\uffae" +
    "\027\uffae\030\uffae\033\uffae\036\uffae\037\uffae\044\uffae\051" +
    "\uffae\054\uffae\001\002\000\004\050\160\001\002\000\020" +
    "\003\030\026\027\027\012\030\033\033\017\037\014\054" +
    "\020\001\002\000\024\003\030\026\027\027\012\030\033" +
    "\033\017\037\014\044\164\051\uff91\054\020\001\002\000" +
    "\004\051\163\001\002\000\030\002\uffb3\003\uffb3\026\uffb3" +
    "\027\uffb3\030\uffb3\033\uffb3\036\uffb3\037\uffb3\044\uffb3\051" +
    "\uffb3\054\uffb3\001\002\000\030\002\uffb2\003\uffb2\026\uffb2" +
    "\027\uffb2\030\uffb2\033\uffb2\036\uffb2\037\uffb2\044\uffb2\051" +
    "\uffb2\054\uffb2\001\002\000\004\041\uffb7\001\002\000\006" +
    "\025\226\041\uffe2\001\002\000\042\006\067\007\071\010" +
    "\073\011\066\012\072\014\uffe4\015\uffe4\016\uffe4\017\uffe4" +
    "\020\uffe4\021\uffe4\022\uffe4\024\uffe4\025\uffe4\041\uffe4\043" +
    "\uffe4\001\002\000\010\024\uffd7\025\uffd7\041\uffd7\001\002" +
    "\000\010\024\uffd9\025\uffd9\041\uffd9\001\002\000\012\025" +
    "\uffdb\041\uffdb\044\224\050\223\001\002\000\020\014\207" +
    "\015\205\016\206\017\210\020\212\021\211\022\213\001" +
    "\002\000\004\042\202\001\002\000\010\024\177\025\uffdc" +
    "\041\uffdc\001\002\000\030\014\uffe3\015\uffe3\016\uffe3\017" +
    "\uffe3\020\uffe3\021\uffe3\022\uffe3\024\uffe3\025\uffe3\041\uffe3" +
    "\043\uffe3\001\002\000\020\005\uffdf\007\uffdf\023\uffdf\042" +
    "\uffdf\052\uffdf\053\uffdf\054\uffdf\001\002\000\020\005\176" +
    "\007\053\023\174\042\062\052\056\053\061\054\057\001" +
    "\002\000\010\024\177\025\uffda\041\uffda\001\002\000\016" +
    "\005\176\007\053\042\062\052\056\053\061\054\057\001" +
    "\002\000\004\043\204\001\002\000\010\024\uffd8\025\uffd8" +
    "\041\uffd8\001\002\000\016\005\176\007\053\042\062\052" +
    "\056\053\061\054\057\001\002\000\016\005\176\007\053" +
    "\042\062\052\056\053\061\054\057\001\002\000\016\005" +
    "\176\007\053\042\062\052\056\053\061\054\057\001\002" +
    "\000\016\005\176\007\053\042\062\052\056\053\061\054" +
    "\057\001\002\000\016\005\176\007\053\042\062\052\056" +
    "\053\061\054\057\001\002\000\016\005\176\007\053\042" +
    "\062\052\056\053\061\054\057\001\002\000\016\005\176" +
    "\007\053\042\062\052\056\053\061\054\057\001\002\000" +
    "\012\024\uffe5\025\uffe5\041\uffe5\043\uffe5\001\002\000\012" +
    "\024\uffe6\025\uffe6\041\uffe6\043\uffe6\001\002\000\012\024" +
    "\uffe7\025\uffe7\041\uffe7\043\uffe7\001\002\000\012\024\uffe8" +
    "\025\uffe8\041\uffe8\043\uffe8\001\002\000\012\024\uffea\025" +
    "\uffea\041\uffea\043\uffea\001\002\000\012\024\uffe9\025\uffe9" +
    "\041\uffe9\043\uffe9\001\002\000\012\024\uffeb\025\uffeb\041" +
    "\uffeb\043\uffeb\001\002\000\004\041\uffe0\001\002\000\004" +
    "\041\uffe1\001\002\000\022\003\230\005\176\007\053\023" +
    "\174\042\062\052\056\053\061\054\057\001\002\000\022" +
    "\003\uffde\005\uffde\007\uffde\023\uffde\042\uffde\052\uffde\053" +
    "\uffde\054\uffde\001\002\000\006\025\226\041\uffdd\001\002" +
    "\000\006\025\uffdb\041\uffdb\001\002\000\004\050\232\001" +
    "\002\000\020\003\030\026\027\027\012\030\033\033\017" +
    "\037\014\054\020\001\002\000\006\044\235\051\234\001" +
    "\002\000\034\002\uffba\003\uffba\026\uffba\027\uffba\030\uffba" +
    "\033\uffba\034\uffba\035\uffba\036\uffba\037\uffba\044\uffba\051" +
    "\uffba\054\uffba\001\002\000\034\002\uffb9\003\uffb9\026\uffb9" +
    "\027\uffb9\030\uffb9\033\uffb9\034\uffb9\035\uffb9\036\uffb9\037" +
    "\uffb9\044\uffb9\051\uffb9\054\uffb9\001\002\000\006\044\240" +
    "\051\237\001\002\000\030\002\uffbe\003\uffbe\026\uffbe\027" +
    "\uffbe\030\uffbe\033\uffbe\036\uffbe\037\uffbe\044\uffbe\051\uffbe" +
    "\054\uffbe\001\002\000\030\002\uffbf\003\uffbf\026\uffbf\027" +
    "\uffbf\030\uffbf\033\uffbf\036\uffbf\037\uffbf\044\uffbf\051\uffbf" +
    "\054\uffbf\001\002\000\030\002\uff95\003\uff95\026\uff95\027" +
    "\uff95\030\uff95\033\uff95\036\uff95\037\uff95\044\uff95\051\uff95" +
    "\054\uff95\001\002\000\026\003\060\005\064\007\053\042" +
    "\062\045\250\046\246\047\247\052\056\053\061\054\057" +
    "\001\002\000\030\002\uffcf\003\uffcf\026\uffcf\027\uffcf\030" +
    "\uffcf\033\uffcf\036\uffcf\037\uffcf\044\uffcf\051\uffcf\054\uffcf" +
    "\001\002\000\030\002\uffce\003\uffce\026\uffce\027\uffce\030" +
    "\uffce\033\uffce\036\uffce\037\uffce\044\uffce\051\uffce\054\uffce" +
    "\001\002\000\030\002\uffd0\003\uffd0\026\uffd0\027\uffd0\030" +
    "\uffd0\033\uffd0\036\uffd0\037\uffd0\044\uffd0\051\uffd0\054\uffd0" +
    "\001\002\000\006\003\251\042\252\001\002\000\006\003" +
    "\251\042\252\001\002\000\006\003\251\042\252\001\002" +
    "\000\032\002\uffc7\003\uffc7\026\uffc7\027\uffc7\030\uffc7\033" +
    "\uffc7\036\uffc7\037\uffc7\043\257\044\uffc7\051\uffc7\054\uffc7" +
    "\001\002\000\006\004\255\043\254\001\002\000\030\002" +
    "\uffcd\003\uffcd\026\uffcd\027\uffcd\030\uffcd\033\uffcd\036\uffcd" +
    "\037\uffcd\044\uffcd\051\uffcd\054\uffcd\001\002\000\030\002" +
    "\uffc9\003\uffc9\026\uffc9\027\uffc9\030\uffc9\033\uffc9\036\uffc9" +
    "\037\uffc9\044\uffc9\051\uffc9\054\uffc9\001\002\000\004\043" +
    "\256\001\002\000\030\002\uffca\003\uffca\026\uffca\027\uffca" +
    "\030\uffca\033\uffca\036\uffca\037\uffca\044\uffca\051\uffca\054" +
    "\uffca\001\002\000\030\002\uffc8\003\uffc8\026\uffc8\027\uffc8" +
    "\030\uffc8\033\uffc8\036\uffc8\037\uffc8\044\uffc8\051\uffc8\054" +
    "\uffc8\001\002\000\030\002\uffcb\003\uffcb\026\uffcb\027\uffcb" +
    "\030\uffcb\033\uffcb\036\uffcb\037\uffcb\044\uffcb\051\uffcb\054" +
    "\uffcb\001\002\000\030\002\uffcc\003\uffcc\026\uffcc\027\uffcc" +
    "\030\uffcc\033\uffcc\036\uffcc\037\uffcc\044\uffcc\051\uffcc\054" +
    "\uffcc\001\002\000\004\041\uffb8\001\002\000\030\002\uff9b" +
    "\003\uff9b\026\uff9b\027\uff9b\030\uff9b\033\uff9b\036\uff9b\037" +
    "\uff9b\044\uff9b\051\uff9b\054\uff9b\001\002\000\004\041\265" +
    "\001\002\000\004\050\266\001\002\000\020\003\uffc5\026" +
    "\uffc5\027\uffc5\030\uffc5\033\uffc5\037\uffc5\054\uffc5\001\002" +
    "\000\030\002\ufffc\003\ufffc\026\ufffc\027\ufffc\030\ufffc\033" +
    "\ufffc\036\ufffc\037\ufffc\044\ufffc\051\ufffc\054\ufffc\001\002" +
    "\000\006\044\272\051\271\001\002\000\030\002\uffc3\003" +
    "\uffc3\026\uffc3\027\uffc3\030\uffc3\033\uffc3\036\uffc3\037\uffc3" +
    "\044\uffc3\051\uffc3\054\uffc3\001\002\000\030\002\uffc4\003" +
    "\uffc4\026\uffc4\027\uffc4\030\uffc4\033\uffc4\036\uffc4\037\uffc4" +
    "\044\uffc4\051\uffc4\054\uffc4\001\002\000\004\002\000\001" +
    "\002\000\004\002\001\001\002\000\004\002\ufffe\001\002" +
    "\000\004\042\277\001\002\000\010\003\302\043\uffa7\054" +
    "\300\001\002\000\006\040\uffa6\043\uffa6\001\002\000\004" +
    "\043\306\001\002\000\006\040\uffa4\043\uffa4\001\002\000" +
    "\006\040\304\043\uffa8\001\002\000\004\054\305\001\002" +
    "\000\006\040\uffa5\043\uffa5\001\002\000\004\041\307\001" +
    "\002\000\004\050\310\001\002\000\020\003\uffad\026\uffad" +
    "\027\uffad\030\uffad\033\uffad\037\uffad\054\uffad\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\306\000\012\002\006\003\003\007\010\053\005\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\003\274" +
    "\007\010\053\005\001\001\000\002\001\001\000\010\003" +
    "\272\007\010\053\005\001\001\000\036\005\030\024\015" +
    "\025\035\031\022\032\025\034\014\035\012\036\031\040" +
    "\023\043\024\047\021\050\020\055\033\056\034\001\001" +
    "\000\002\001\001\000\036\005\030\024\015\025\035\031" +
    "\022\032\025\034\014\035\012\036\031\040\023\043\024" +
    "\047\021\050\020\055\033\056\267\001\001\000\012\006" +
    "\266\010\054\033\053\050\062\001\001\000\024\010\166" +
    "\011\167\012\172\013\263\020\165\021\174\022\170\033" +
    "\053\050\062\001\001\000\004\004\262\001\001\000\024" +
    "\010\166\011\167\012\172\013\261\020\165\021\174\022" +
    "\170\033\053\050\062\001\001\000\002\001\001\000\004" +
    "\004\240\001\001\000\002\001\001\000\036\005\030\024" +
    "\015\025\035\031\022\032\025\034\014\035\012\036\031" +
    "\040\023\043\024\047\021\050\020\055\033\056\235\001" +
    "\001\000\002\001\001\000\010\041\144\045\143\046\142" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\004\124\001\001\000\002\001\001\000\004" +
    "\030\044\001\001\000\036\005\030\024\015\025\035\031" +
    "\022\032\025\034\014\035\012\036\031\040\023\043\024" +
    "\047\021\050\020\055\033\056\041\001\001\000\002\001" +
    "\001\000\004\004\036\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\006\050\010\054\033\053\037" +
    "\051\050\062\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\033\114\050\062\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\010\064\033\053\050" +
    "\062\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\010\077\033\053\050\062\001\001\000" +
    "\010\010\076\033\053\050\062\001\001\000\002\001\001" +
    "\000\010\010\075\033\053\050\062\001\001\000\010\010" +
    "\074\033\053\050\062\001\001\000\010\010\073\033\053" +
    "\050\062\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\010\102\033\053\050\062\051\101\001\001\000\002\001" +
    "\001\000\004\052\105\001\001\000\002\001\001\000\010" +
    "\010\112\033\053\050\062\001\001\000\002\001\001\000" +
    "\004\052\107\001\001\000\002\001\001\000\010\010\111" +
    "\033\053\050\062\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\006\121\010" +
    "\054\033\053\050\062\001\001\000\002\001\001\000\012" +
    "\006\123\010\054\033\053\050\062\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\015\133\033\131\050\062\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\015\140\033\131\050\062\001\001\000\010\015" +
    "\137\033\131\050\062\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\010\166\011\167\012" +
    "\172\013\164\020\165\021\174\022\170\033\053\050\062" +
    "\001\001\000\006\042\153\044\155\001\001\000\010\041" +
    "\144\045\143\046\152\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\005\030\024\015\025\035\031\022\032" +
    "\025\034\014\035\012\036\031\040\023\043\024\047\021" +
    "\050\020\055\033\056\147\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\005\030\024\015\025\035\031\022\032\025" +
    "\034\014\035\012\036\031\040\023\043\024\047\021\050" +
    "\020\055\160\056\161\001\001\000\036\005\030\024\015" +
    "\025\035\031\022\032\025\034\014\035\012\036\031\040" +
    "\023\043\024\047\021\050\020\055\033\056\041\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\017\224\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\016\177\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\010\166\011" +
    "\167\012\172\021\200\022\170\033\053\050\062\001\001" +
    "\000\004\016\177\001\001\000\014\010\166\011\202\012" +
    "\172\033\053\050\062\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\010\166\012\221\033\053\050\062\001" +
    "\001\000\012\010\166\012\220\033\053\050\062\001\001" +
    "\000\012\010\166\012\217\033\053\050\062\001\001\000" +
    "\012\010\166\012\216\033\053\050\062\001\001\000\012" +
    "\010\166\012\215\033\053\050\062\001\001\000\012\010" +
    "\166\012\214\033\053\050\062\001\001\000\012\010\166" +
    "\012\213\033\053\050\062\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\010\166\011\167\012\172" +
    "\020\226\021\174\022\170\033\053\050\062\001\001\000" +
    "\002\001\001\000\004\017\224\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\005\030\024\015\025\035\031" +
    "\022\032\025\034\014\035\012\036\031\040\023\043\024" +
    "\047\021\050\020\055\033\056\232\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\006\242\010\054\026\244\027\243\033\053\050\062" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\260\001\001\000\004\014\257\001\001" +
    "\000\004\014\252\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\023\302\054\300\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoPython$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoPython$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoPython$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public ManejadorSintacticoVB_PY msVB_PY = ManejadorSintacticoVB_PY.getInstacia();
    public ManejadorInstancias mi = ManejadorInstancias.getInstance();
    public ManejadorCuartetos mc = ManejadorCuartetos.getInstancia();
    public ManejadorBuscarMetodos mbm = ManejadorBuscarMetodos.getInstancia();
    public ManejadorReturn mr = ManejadorReturn.getInstancia();
    public int contadorLineas;
    public LexicoPython lexer;
    private FrameCTDOA frameCTDOA;
    
    public void setContadorLineas(int contadorLineas){
        this.contadorLineas = contadorLineas;
        msVB_PY.setContadorLineas(contadorLineas);
    }

    public SintacticoPython(LexicoPython lexer) { 
        super(lexer);   
        this.lexer = lexer;
        msVB_PY.nuevoAnalisis();
    }

    public void setLinea(int contadorLineas){
        this.contadorLineas = contadorLineas;
    }

    public void setFrameCTDOA(FrameCTDOA frameCTDOA) {
        this.frameCTDOA = frameCTDOA;
        msVB_PY.setFrameCTDOA(frameCTDOA);
    }

    public void setAccion(String tipo, String mensaje, String accion){
        frameCTDOA.addErrores("ERROR Lexico Tipo: " + tipo + "\t Mensaje: " + mensaje + "\tAcción: ERROR\n");
    }

    @Override
    public void syntax_error(Symbol s){
        try {
            msVB_PY.errorSintax(s.left, s.right, s.value, 
                "Uf, error sintactico cerca de la linea y columna indicada porfavor revisa que el token\n "
                        + "\t\tidicado corresponda a la declaracion de instruccion correspondiente. Vuelve a intentarlo."
            );
        } catch (Exception e) {
            System.out.println("Error " + e.toString());
        }
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SintacticoPython$actions {
  private final SintacticoPython parser;

  /** Constructor */
  CUP$SintacticoPython$actions(SintacticoPython parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SintacticoPython$do_action(
    int                        CUP$SintacticoPython$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoPython$parser,
    java.util.Stack            CUP$SintacticoPython$stack,
    int                        CUP$SintacticoPython$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoPython$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoPython$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // estructuras_p ::= estructuras 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		if(e == null) RESULT = new ArrayList<Simbolo>(); else RESULT = e;
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("estructuras_p",44, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // estructuras_p ::= estructuras estructuras_p 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = parser.msVB_PY.simbolosReturn(a, e, aleft, aright);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("estructuras_p",44, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // estructuras ::= error DEDENT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		parser.msVB_PY.errorSintax(eleft, eright, e, "Error en el bloque de instrucciones de la estructura, por favor revisa la entrada en la linea y columna indicada.");
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("estructuras",43, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // estructuras ::= error SALTO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		parser.msVB_PY.errorSintax(eleft, eright, e, "Error en el bloque de instrucciones de la estructura, por favor revisa la entrada en la linea y columna indicada.");
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("estructuras",43, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // estructuras ::= llamada_fp space 
            {
              Object RESULT =null;
		
        Object as = null;
        parser.mc.addYRemovePuntero(as, false);
    
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("estructuras",43, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // estructuras ::= return space 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		RESULT = e;
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("estructuras",43, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // estructuras ::= estructura_if 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("estructuras",43, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // estructuras ::= for 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("estructuras",43, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // estructuras ::= while 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("estructuras",43, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // estructuras ::= asignacion_variables space 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		parser.msVB_PY.declararVaiablesPY(eleft, eright, (Simbolo) e);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("estructuras",43, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // estructuras ::= mensaje_terminal space 
            {
              Object RESULT =null;
		/* Ignore */
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("estructuras",43, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // param_p ::= error param_p 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		 
        RESULT = a;
        parser.msVB_PY.errorSintax(eleft, eright, e, "Error sintactico en la instruccion de llamada a una funcion, no se esperaba el token indicado para el reconocimiento de parametros.");
    
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("param_p",40, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // param_p ::= param_p COMA operaciones_aritmeticas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = parser.msVB_PY.lista(a, e);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("param_p",40, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // param_p ::= COMA operaciones_aritmeticas 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("param_p",40, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // param ::= 
            {
              Object RESULT =null;

              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("param",39, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // param ::= operaciones_aritmeticas 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("param",39, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // param ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		 
        parser.msVB_PY.errorSintax(eleft, eright, e, "Error sintactico en la instruccion de llamada a una funcion, no se esperaba el token indicado para el reconocimiento de parametros.");
    
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("param",39, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // param ::= operaciones_aritmeticas param_p 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		
        List<Simbolo> lista = new ArrayList<>();
        if (e != null) {
            lista.add((Simbolo) e);
        }
        if(a instanceof Simbolo) {
            lista.add((Simbolo) a);
        } else {
            lista.addAll((List<Simbolo>) a);
        }
        RESULT = lista;
    
    
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("param",39, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // llamada_fp ::= ID PARENTESIS_A param PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		RESULT = parser.mbm.buscarMetodo("PY_", a, e, aleft, aright, 2, true);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("llamada_fp",38, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // parametros_p ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		 
        RESULT = new ArrayList<>();
        parser.msVB_PY.errorSintax(eleft, eright, e, "Error sintactico en la instruccion de parametros, no se esperaba el token indicado.");
    
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("parametros_p",17, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // parametros_p ::= parametros_p COMA ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		
        Simbolo s = parser.msVB_PY.parametroPY(e, eleft, eright);
        List<Simbolo> listaSimbolos = new ArrayList<>();
        if(a != null) {
            if(a instanceof Simbolo) {
                listaSimbolos.add((Simbolo) a);
            } else {
                listaSimbolos = (List<Simbolo>) a;
            }
        }
        if(s != null) {
            listaSimbolos.add((Simbolo) s);
        }
        RESULT = listaSimbolos;
    
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("parametros_p",17, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // parametros_p ::= ID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = parser.msVB_PY.parametroPY(e, eleft, eright);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("parametros_p",17, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // parametros ::= 
            {
              Object RESULT =null;
		RESULT = new ArrayList<>();
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("parametros",42, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // parametros ::= parametros_p 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("parametros",42, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // space ::= 
            {
              Object RESULT =null;

              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("space",2, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // space ::= SALTO 
            {
              Object RESULT =null;

              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("space",2, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // def ::= def_p estructuras_p 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		
            parser.lexer.limpiarStack(); 
            RESULT = parser.msVB_PY.def(((Procedimiento) e).getU(), ((Procedimiento) e).getE(), i, ileft, iright);
        
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("def",41, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // def ::= def_p estructuras_p DEDENT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		  
            parser.lexer.limpiarStack(); 
            RESULT = parser.msVB_PY.def(((Procedimiento) e).getU(), ((Procedimiento) e).getE(), i, ileft, iright);
        
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("def",41, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // def_p ::= DEF ID PARENTESIS_A parametros PARENTESIS_C DOS_PUNTOS INDENT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-3)).value;
		parser.mc.addCuartetoProcedimiento(2, a, "PY", e, Constantes.FLOAT_VAR_VB_PY);  RESULT = new Procedimiento(a, e);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("def_p",5, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // estructura_if ::= if else_if_p else 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = parser.msVB_PY.construirCondicionalIf(a, e, i);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("estructura_if",37, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // estructura_if ::= if else_if_p 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = parser.msVB_PY.construirCondicionalIf(a, e, null);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("estructura_if",37, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // else_if_p ::= 
            {
              Object RESULT =null;
		RESULT = null;
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("else_if_p",36, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // else_if_p ::= else_if else_if_p 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		
        List<Simbolo> listaSimbolos = new ArrayList<>();
        if(a != null) {
            if(a instanceof Simbolo) {
                listaSimbolos.add((Simbolo) a);
            } else {
                listaSimbolos = (List<Simbolo>) a;
            }
        }
        if(e != null) {
            listaSimbolos.add((Simbolo) e);
        }
        RESULT = listaSimbolos;
    
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("else_if_p",36, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // else ::= ee DOS_PUNTOS INDENT estructuras SALTO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		RESULT = parser.msVB_PY.crearEstructuraCondicional(a, false, 3); parser.mc.imprimirResto();
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("else",34, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // else ::= ee DOS_PUNTOS INDENT estructuras_p DEDENT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		RESULT = parser.msVB_PY.crearEstructuraCondicional(a, false, 3); parser.mc.imprimirResto();
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("else",34, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // else_if ::= ie DOS_PUNTOS INDENT estructuras_p SALTO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		RESULT = parser.msVB_PY.crearEstructuraCondicional(a, e, 2); parser.mc.imprimirResto();
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("else_if",35, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // else_if ::= ie DOS_PUNTOS INDENT estructuras_p DEDENT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		RESULT = parser.msVB_PY.crearEstructuraCondicional(a, e, 2); parser.mc.imprimirResto();
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("else_if",35, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ee ::= ELSE 
            {
              Object RESULT =null;
		parser.mc.escribirEtiquetasInicio(false); parser.mc.escribirEtiquetaFin(); parser.mc.nuevoAnalisisBoolean(); 
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("ee",32, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ie ::= ELIF condicional 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		parser.mc.escribirEtiquetasInicio(false); parser.mc.escribirEtiquetaFin(); parser.mc.nuevoAnalisisBoolean(); RESULT = e;
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("ie",31, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ii ::= IF condicional 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		parser.mc.escribirEtiquetasInicio(false); parser.mc.escribirEtiquetaFin(); parser.mc.nuevoAnalisisBoolean(); RESULT = e;
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("ii",30, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // if ::= ii DOS_PUNTOS INDENT estructuras_p SALTO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		RESULT = parser.msVB_PY.crearEstructuraCondicional(e, a, 1); parser.mc.imprimirResto();
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("if",33, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // if ::= ii DOS_PUNTOS INDENT estructuras_p DEDENT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		RESULT = parser.msVB_PY.crearEstructuraCondicional(e, a, 1); parser.mc.imprimirResto();
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("if",33, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // rango ::= return_dato COMA return_dato COMA return_dato 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		
        List<Simbolo> lista = new ArrayList<>();
        if(a != null) {
            lista.add((Simbolo) a);
        } 
        if(e != null) {
            lista.add((Simbolo) e);
        }
        if(e != null) { 
            lista.add((Simbolo) i); 
        }
        RESULT = lista;
    
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("rango",29, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // rango ::= return_dato COMA return_dato 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		
        List<Simbolo> lista = new ArrayList<>();
        if(a != null) {
            lista.add((Simbolo) a);
        } 
        if(e != null) {
            lista.add((Simbolo) e);
        }
        RESULT = lista;
    
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("rango",29, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // rango ::= return_dato 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = a;
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("rango",29, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // for ::= for_p estructuras_p DEDENT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		 
        RESULT = parser.msVB_PY.cicloForPY("", eleft, eright, ((For) e).getRango(), i);
        parser.mc.finFor(((For) e).getLista());
    
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("for",28, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // for ::= for_p estructuras_p SALTO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		
        RESULT = parser.msVB_PY.cicloForPY("", eleft, eright, ((For) e).getRango(), i);
        parser.mc.finFor(((For) e).getLista());
    
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("for",28, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // for_p ::= FOR var IN RANGE PARENTESIS_A rango PARENTESIS_C DOS_PUNTOS INDENT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-3)).value;
		RESULT = new For(e, (Simbolo) a, parser.mc.addForPY(a, e));
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("for_p",23, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // var ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		parser.msVB_PY.errorSintax(eleft, eright, e, "Error sintactico en la declaracion de datos, de la instruccion for, no se esperaba el token indicado.");
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("var",22, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // var ::= ID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = parser.msVB_PY.idPY((String) e, eleft, eright);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("var",22, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // while ::= while_p estructuras_p DEDENT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		
            RESULT = parser.msVB_PY.contruirEstructuraCiloDW(e, ((While) a).getA(), 1);
            parser.mc.finWhile(((While) a).getIdEtiqueta());
            parser.mc.imprimirResto();
        
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("while",24, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // while ::= while_p estructuras_p SALTO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		
            RESULT = parser.msVB_PY.contruirEstructuraCiloDW(e, ((While) a).getA(), 1);
            parser.mc.finWhile(((While) a).getIdEtiqueta());
            parser.mc.imprimirResto();
        
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("while",24, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // while_p ::= while_n condicional DOS_PUNTOS INDENT 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-3)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-3)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).value;
		
        parser.mc.nuevoAnalisisBoolean();
        parser.mc.escribirEtiquetasInicio(false);
        parser.mc.addEtiquetasEstructuras();
        ((While) w).setA(a);
        RESULT = w;
    
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("while_p",27, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // while_n ::= WHILE 
            {
              Object RESULT =null;
		RESULT = new While(parser.mc.addWhile(), null);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("while_n",26, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // solicitud_p ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		parser.msVB_PY.errorSintax(eleft, eright, e, "Error sintactico en la instruccion de solicitud de datos, no se esperaba una cadena.");
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("solicitud_p",10, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // solicitud_p ::= error PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		parser.msVB_PY.errorSintax(eleft, eright, e, "Error sintactico en la instruccion de solicitud de datos, no se esperaba una cadena.");
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("solicitud_p",10, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // solicitud_p ::= PARENTESIS_A PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("solicitud_p",10, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // solicitud_p ::= PARENTESIS_A CADENA PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		parser.mc.imprimir(new Simbolo(null, e));
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("solicitud_p",10, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // solicitud_datos ::= CINPUT solicitud_p 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		RESULT = new Simbolo(Constantes.CHAR_VAR_VB_PY, '\b', 2);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("solicitud_datos",21, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // solicitud_datos ::= FINPUT solicitud_p 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		RESULT = new Simbolo(Constantes.FLOAT_VAR_VB_PY, 0, 3);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("solicitud_datos",21, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // solicitud_datos ::= IINPUT solicitud_p 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		RESULT = new Simbolo(Constantes.INT_VAR_VB_PY, 0, 1);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("solicitud_datos",21, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // asignacion ::= solicitud_datos 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("asignacion",20, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // asignacion ::= return_dato 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("asignacion",20, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // asignacion_variables ::= ID IGUAL asignacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		  
        if(e != null) {
            RESULT = new Simbolo(((Simbolo) e).getTipo(), ((Simbolo) e), a);
        } else { 
            RESULT = e;
        }
    
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("asignacion_variables",19, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // mensaje_terminal ::= PRINT PARENTESIS_A concatenacion PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		parser.mc.imprimirNuevaLinea(); RESULT = e;
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("mensaje_terminal",18, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // concatenacion ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		parser.msVB_PY.errorSintax(eleft, eright, e, "Error sintactico en la concatenacion de cadenas, de la instruccion PRINT.");
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("concatenacion",11, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // concatenacion ::= estruct 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		parser.mc.imprimirPrintf(0, (Simbolo) e); RESULT = e;
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("concatenacion",11, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // concatenacion ::= CADENA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		parser.mc.imprimir(new Simbolo(null, e)); RESULT = e;
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("concatenacion",11, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // concatenacion ::= concatenacion COMA concatenacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		parser.msVB_PY.concatencacion(a, e);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("concatenacion",11, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // concatenacion ::= concatenacion MAS concatenacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		parser.msVB_PY.concatencacion(a, e);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("concatenacion",11, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // condicional_not ::= operaciones_logicas 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		parser.mc.gotoEscribir(); RESULT = e;
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("condicional_not",16, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // condicional_not ::= NOT PARENTESIS_A operaciones_logicas PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		RESULT = parser.msVB_PY.comprobacionCondicional(a, true, 3, aleft, aright);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("condicional_not",16, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // condicional_and ::= condicional_not 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = a;
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("condicional_and",15, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // condicional_and ::= condicional_and and condicional_and 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = parser.msVB_PY.comprobacionCondicional(a, e, 1, cleft, cright);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("condicional_and",15, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // condicional_or ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		parser.msVB_PY.errorSintax(eleft, eright, e, "Error sintactico en las operacionaciones logicas, de la intruccion condicional.");
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("condicional_or",14, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // condicional_or ::= condicional_and 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = a;
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("condicional_or",14, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // condicional_or ::= condicional_or or condicional_or 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = parser.msVB_PY.comprobacionCondicional(a, e, 2, cleft, cright);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("condicional_or",14, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // or ::= OR 
            {
              Object RESULT =null;
		parser.mc.or(); parser.mc.condicionalOR(); if (!parser.mc.ultimoAgregadorEtiqueta()) { parser.mc.escribirEtiqueta();}
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("or",13, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // and ::= AND 
            {
              Object RESULT =null;
		parser.mc.and(); parser.mc.condicionalAND(); parser.mc.escribirEtiqueta();
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("and",12, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // condicional ::= error INDENT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		
        parser.mc.nuevoAnalisisBoolean();  
        parser.msVB_PY.errorSintax(eleft, eright, e, "Error sintactico en las operacionaciones logicas, de la intruccion condicional.");
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("condicional",9, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // condicional ::= error SALTO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		
        parser.mc.nuevoAnalisisBoolean();  
        parser.msVB_PY.errorSintax(eleft, eright, e, "Error sintactico en las operacionaciones logicas, de la intruccion condicional.");
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("condicional",9, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // condicional ::= condicional_or 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		parser.mc.nuevoAnalisisBoolean(); RESULT = e;
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("condicional",9, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // tipos_comparacion ::= CARACTER 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = new Simbolo(Constantes.CHAR_VAR_VB_PY, e);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("tipos_comparacion",8, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // tipos_comparacion ::= operaciones_aritmeticas 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("tipos_comparacion",8, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // operaciones_logicas ::= tipos_comparacion MAYOR_IGUAL tipos_comparacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = parser.msVB_PY.comprobarOperacionesLogicas(a, e, 6, cleft, cright);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",7, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // operaciones_logicas ::= tipos_comparacion MAYOR tipos_comparacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = parser.msVB_PY.comprobarOperacionesLogicas(a, e, 5, cleft, cright);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",7, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // operaciones_logicas ::= tipos_comparacion MENOR_IGUAL tipos_comparacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = parser.msVB_PY.comprobarOperacionesLogicas(a, e, 4, cleft, cright);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",7, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // operaciones_logicas ::= tipos_comparacion MENOR tipos_comparacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = parser.msVB_PY.comprobarOperacionesLogicas(a, e, 3, cleft, cright);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",7, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // operaciones_logicas ::= tipos_comparacion DIFERENTE tipos_comparacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = parser.msVB_PY.comprobarOperacionesLogicas(a, e, 2, cleft, cright);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",7, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // operaciones_logicas ::= tipos_comparacion DISTINTO tipos_comparacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = parser.msVB_PY.comprobarOperacionesLogicas(a, e, 2, cleft, cright);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",7, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // operaciones_logicas ::= tipos_comparacion IGUAL_IGUAL tipos_comparacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = parser.msVB_PY.comprobarOperacionesLogicas(a, e, 1, cleft, cright);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",7, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // estruct ::= llamada_fp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		
        if(a != null) {
            Tipo tipo = ((Simbolo) a).getTipoFuncion();
            if(tipo != null && tipo.getNombre().equals("Funcion")) {
                RESULT = a;
            } else {
                parser.msVB_PY.errorSemantico(aleft, aright, "Asignacion", "Error, los metodos no pueden asignarse.");
                RESULT = null;
            }
        }
    
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("estruct",25, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // estruct ::= REAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		float e = (float)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = new Simbolo(Constantes.FLOAT_VAR_VB_PY, e);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("estruct",25, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // estruct ::= NUMERO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = new Simbolo(Constantes.INT_VAR_VB_PY, e);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("estruct",25, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // estruct ::= ID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = parser.msVB_PY.metodoBuscarID(e.toString(), eleft, eright);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("estruct",25, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // estruct ::= PARENTESIS_A operaciones_aritmeticas PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		RESULT = e;
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("estruct",25, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // operaciones_aritmeticas ::= estruct 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("operaciones_aritmeticas",6, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // operaciones_aritmeticas ::= MENOS estruct 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = parser.msVB_PY.modificarVariables(e, eleft, eright);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("operaciones_aritmeticas",6, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // operaciones_aritmeticas ::= operaciones_aritmeticas DIV operaciones_aritmeticas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = parser.msVB_PY.realizarOperaciones(a, e, aleft, aright, eleft, eright, 4);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("operaciones_aritmeticas",6, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // operaciones_aritmeticas ::= operaciones_aritmeticas POR operaciones_aritmeticas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = parser.msVB_PY.realizarOperaciones(a, e, aleft, aright, eleft, eright, 3);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("operaciones_aritmeticas",6, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // operaciones_aritmeticas ::= operaciones_aritmeticas MOD operaciones_aritmeticas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = parser.msVB_PY.realizarOperaciones(a, e, aleft, aright, eleft, eright, 5);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("operaciones_aritmeticas",6, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // operaciones_aritmeticas ::= operaciones_aritmeticas MENOS operaciones_aritmeticas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = parser.msVB_PY.realizarOperaciones(a, e, aleft, aright, eleft, eright, 2);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("operaciones_aritmeticas",6, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // operaciones_aritmeticas ::= operaciones_aritmeticas MAS operaciones_aritmeticas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = parser.msVB_PY.realizarOperaciones(a, e, aleft, aright, eleft, eright, 1);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("operaciones_aritmeticas",6, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // return_dato ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		parser.msVB_PY.errorSintax(eleft, eright, e, "Error sintactico en los datos que se asignaran, no se esperaba el token indicado.");
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("return_dato",4, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // return_dato ::= operaciones_aritmeticas 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("return_dato",4, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // return_dato ::= CARACTER 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = new Simbolo(Constantes.CHAR_VAR_VB_PY, e);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("return_dato",4, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // return ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		parser.msVB_PY.errorSintax(eleft, eright, e, "Error sintactico en la instruccion return, no se esperaba el token indicado.");
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("return",3, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // return ::= RETURN return_dato 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		 
        if(e != null) {
            if (parser.mr.compararReturn((Simbolo) e, eleft, eright)){
                RESULT = new Simbolo(Constantes.RETURN_VAR, e);
            } else {
                RESULT = null;
            }
        } else {
            RESULT = null;
        }    
    
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("return",3, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // estructuras_def ::= 
            {
              Object RESULT =null;
		RESULT = null;
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("estructuras_def",1, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // estructuras_def ::= def estructuras_def 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		
        List<Simbolo> listaSimbolos = new ArrayList<>();
        if(a != null) {
            if(a instanceof Simbolo) {
                listaSimbolos.add((Simbolo) a);
            } else {
                listaSimbolos = (List<Simbolo>) a;
            }
        }
        if(e != null) {
            listaSimbolos.add((Simbolo) e);
        }
        RESULT = listaSimbolos;
    
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("estructuras_def",1, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= estructuras_def 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		parser.mi.setClasePY(parser.msVB_PY.clasePY(e));
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= SALTO estructuras_def 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		parser.mi.setClasePY(parser.msVB_PY.clasePY(e));
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoPython$parser.done_parsing();
          return CUP$SintacticoPython$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

