
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Jan 06 17:57:31 CST 2021
//----------------------------------------------------

package proyectofinal.ctdoa.backend.analizador.visual_basic;

import java_cup.runtime.*;
import proyectofinal.ctdoa.backend.objetos.*;
import proyectofinal.ctdoa.backend.manejadores.*;
import java.util.ArrayList;
import java.util.List;
import proyectofinal.ctdoa.frontend.gui.FrameCTDOA;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Jan 06 17:57:31 CST 2021
  */
public class SintacticoVisualBasic extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SintacticoVisualBasic() {super();}

  /** Constructor which sets the default scanner. */
  public SintacticoVisualBasic(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoVisualBasic(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\310\000\002\002\004\000\002\002\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\004\000\002\005\004" +
    "\000\002\005\004\000\002\005\004\000\002\005\004\000" +
    "\002\005\003\000\002\005\005\000\002\006\003\000\002" +
    "\006\005\000\002\006\004\000\002\006\002\000\002\004" +
    "\003\000\002\004\004\000\002\007\004\000\002\007\004" +
    "\000\002\007\004\000\002\010\003\000\002\010\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\014\005\000\002\014\005\000\002\014" +
    "\005\000\002\014\005\000\002\014\005\000\002\014\004" +
    "\000\002\014\003\000\002\071\005\000\002\071\003\000" +
    "\002\071\003\000\002\071\003\000\002\071\003\000\002" +
    "\015\005\000\002\015\005\000\002\015\005\000\002\015" +
    "\005\000\002\015\005\000\002\015\005\000\002\015\005" +
    "\000\002\016\003\000\002\016\003\000\002\030\003\000" +
    "\002\030\004\000\002\031\003\000\002\032\003\000\002" +
    "\073\005\000\002\073\003\000\002\073\003\000\002\075" +
    "\005\000\002\075\003\000\002\074\006\000\002\074\006" +
    "\000\002\074\006\000\002\074\006\000\002\074\003\000" +
    "\002\017\005\000\002\017\005\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\021\006\000\002\021" +
    "\006\000\002\021\006\000\002\021\006\000\002\021\006" +
    "\000\002\021\006\000\002\021\006\000\002\021\006\000" +
    "\002\023\006\000\002\023\006\000\002\023\006\000\002" +
    "\023\010\000\002\023\010\000\002\023\004\000\002\012" +
    "\003\000\002\012\003\000\002\003\003\000\002\003\003" +
    "\000\002\024\004\000\002\024\003\000\002\025\004\000" +
    "\002\025\005\000\002\025\005\000\002\026\005\000\002" +
    "\026\003\000\002\027\003\000\002\027\003\000\002\027" +
    "\004\000\002\033\004\000\002\033\004\000\002\033\004" +
    "\000\002\040\005\000\002\040\004\000\002\040\004\000" +
    "\002\040\003\000\002\037\003\000\002\036\005\000\002" +
    "\036\006\000\002\035\006\000\002\035\006\000\002\022" +
    "\004\000\002\022\005\000\002\041\007\000\002\042\003" +
    "\000\002\042\003\000\002\042\003\000\002\034\010\000" +
    "\002\034\010\000\002\044\006\000\002\046\004\000\002" +
    "\046\003\000\002\046\002\000\002\045\005\000\002\045" +
    "\007\000\002\045\003\000\002\051\004\000\002\052\005" +
    "\000\002\052\005\000\002\053\004\000\002\053\002\000" +
    "\002\054\006\000\002\054\006\000\002\054\005\000\002" +
    "\055\005\000\002\055\006\000\002\077\003\000\002\047" +
    "\004\000\002\056\007\000\002\056\007\000\002\056\006" +
    "\000\002\056\006\000\002\057\006\000\002\057\006\000" +
    "\002\057\005\000\002\050\004\000\002\060\004\000\002" +
    "\060\002\000\002\062\006\000\002\062\006\000\002\062" +
    "\006\000\002\061\006\000\002\061\007\000\002\061\006" +
    "\000\002\061\007\000\002\063\006\000\002\063\006\000" +
    "\002\064\004\000\002\064\003\000\002\020\005\000\002" +
    "\065\004\000\002\066\003\000\002\066\003\000\002\013" +
    "\003\000\002\013\003\000\002\101\012\000\002\101\012" +
    "\000\002\072\006\000\002\072\006\000\002\100\010\000" +
    "\002\100\010\000\002\076\006\000\002\076\006\000\002" +
    "\102\003\000\002\102\002\000\002\103\005\000\002\103" +
    "\007\000\002\103\006\000\002\103\010\000\002\103\003" +
    "\000\002\043\006\000\002\104\004\000\002\104\003\000" +
    "\002\104\003\000\002\104\002\000\002\105\004\000\002" +
    "\105\005\000\002\105\004\000\002\067\003\000\002\067" +
    "\003\000\002\067\003\000\002\067\003\000\002\067\003" +
    "\000\002\067\003\000\002\067\003\000\002\067\003\000" +
    "\002\067\003\000\002\067\003\000\002\067\003\000\002" +
    "\067\003\000\002\067\004\000\002\067\005\000\002\067" +
    "\005\000\002\070\005\000\002\070\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0174\000\016\002\ufff3\003\012\055\005\056\016\057" +
    "\011\062\ufff3\001\002\000\006\002\ufffe\062\ufffe\001\002" +
    "\000\010\003\u0175\056\016\057\011\001\002\000\006\002" +
    "\000\062\055\001\002\000\004\002\u0171\001\002\000\006" +
    "\002\uffff\062\uffff\001\002\000\004\071\u016c\001\002\000" +
    "\020\002\ufff8\003\u0162\035\u0163\056\016\057\011\062\ufff8" +
    "\071\u0161\001\002\000\036\003\110\006\062\007\111\033" +
    "\105\036\107\037\120\040\125\045\071\047\101\053\100" +
    "\064\122\065\072\066\115\071\103\001\002\000\006\002" +
    "\ufff6\062\ufff6\001\002\000\036\003\110\006\062\007\111" +
    "\033\105\036\107\037\120\040\125\045\071\047\101\053" +
    "\100\064\122\065\072\066\115\071\103\001\002\000\004" +
    "\071\017\001\002\000\006\003\020\060\021\001\002\000" +
    "\022\003\uff62\014\uff62\032\uff62\060\uff62\061\uff62\067\uff62" +
    "\070\uff62\071\uff62\001\002\000\022\003\uff63\014\uff63\032" +
    "\uff63\060\uff63\061\uff63\067\uff63\070\uff63\071\uff63\001\002" +
    "\000\012\003\024\032\026\061\uff58\071\023\001\002\000" +
    "\004\034\057\001\002\000\006\061\uff53\063\uff53\001\002" +
    "\000\004\061\047\001\002\000\004\071\044\001\002\000" +
    "\006\061\uff59\063\030\001\002\000\006\032\032\071\031" +
    "\001\002\000\004\034\042\001\002\000\004\071\033\001" +
    "\002\000\004\034\034\001\002\000\012\003\036\010\035" +
    "\011\040\012\041\001\002\000\014\020\uffeb\052\uffeb\061" +
    "\uffeb\062\uffeb\063\uffeb\001\002\000\014\020\uffe8\052\uffe8" +
    "\061\uffe8\062\uffe8\063\uffe8\001\002\000\006\061\uff54\063" +
    "\uff54\001\002\000\014\020\uffea\052\uffea\061\uffea\062\uffea" +
    "\063\uffea\001\002\000\014\020\uffe9\052\uffe9\061\uffe9\062" +
    "\uffe9\063\uffe9\001\002\000\012\003\036\010\035\011\040" +
    "\012\041\001\002\000\006\061\uff56\063\uff56\001\002\000" +
    "\004\034\045\001\002\000\012\003\036\010\035\011\040" +
    "\012\041\001\002\000\006\061\uff55\063\uff55\001\002\000" +
    "\006\003\052\034\051\001\002\000\012\003\036\010\035" +
    "\011\040\012\041\001\002\000\012\003\uffb1\010\uffb1\011" +
    "\uffb1\012\uffb1\001\002\000\012\003\uffb0\010\uffb0\011\uffb0" +
    "\012\uffb0\001\002\000\004\062\055\001\002\000\040\003" +
    "\uff61\006\uff61\007\uff61\033\uff61\036\uff61\037\uff61\040\uff61" +
    "\045\uff61\047\uff61\053\uff61\062\056\064\uff61\065\uff61\066" +
    "\uff61\071\uff61\001\002\000\064\002\ufff2\003\ufff2\006\ufff2" +
    "\007\ufff2\033\ufff2\035\ufff2\036\ufff2\037\ufff2\040\ufff2\042" +
    "\ufff2\045\ufff2\046\ufff2\047\ufff2\051\ufff2\052\ufff2\053\ufff2" +
    "\054\ufff2\055\ufff2\056\ufff2\057\ufff2\062\ufff2\064\ufff2\065" +
    "\ufff2\066\ufff2\071\ufff2\001\002\000\064\002\ufff1\003\ufff1" +
    "\006\ufff1\007\ufff1\033\ufff1\035\ufff1\036\ufff1\037\ufff1\040" +
    "\ufff1\042\ufff1\045\ufff1\046\ufff1\047\ufff1\051\ufff1\052\ufff1" +
    "\053\ufff1\054\ufff1\055\ufff1\056\ufff1\057\ufff1\062\ufff1\064" +
    "\ufff1\065\ufff1\066\ufff1\071\ufff1\001\002\000\012\003\036" +
    "\010\035\011\040\012\041\001\002\000\006\061\uff57\063" +
    "\uff57\001\002\000\006\003\u0146\071\u0145\001\002\000\006" +
    "\003\u013d\060\u013e\001\002\000\006\052\uff41\062\uff41\001" +
    "\002\000\006\052\uff49\062\uff49\001\002\000\006\052\u0114" +
    "\062\uff84\001\002\000\004\054\u0125\001\002\000\010\035" +
    "\uff73\051\u0106\052\uff73\001\002\000\036\003\110\006\062" +
    "\007\111\033\105\036\107\037\120\040\125\045\071\047" +
    "\101\053\100\064\122\065\072\066\115\071\103\001\002" +
    "\000\006\003\354\071\353\001\002\000\006\003\133\060" +
    "\134\001\002\000\006\052\uff4a\062\uff4a\001\002\000\036" +
    "\003\110\006\062\007\111\033\105\036\107\037\120\040" +
    "\125\045\071\047\101\053\100\064\122\065\072\066\115" +
    "\071\103\001\002\000\006\052\uff48\062\uff48\001\002\000" +
    "\006\052\uff43\062\uff43\001\002\000\006\052\uff3f\062\uff3f" +
    "\001\002\000\006\003\341\054\342\001\002\000\022\003" +
    "\153\005\162\014\143\026\156\060\157\067\147\070\152" +
    "\071\151\001\002\000\006\052\uff42\062\uff42\001\002\000" +
    "\010\003\020\020\332\060\021\001\002\000\004\035\327" +
    "\001\002\000\006\003\uffaf\071\uffaf\001\002\000\006\052" +
    "\uff47\062\uff47\001\002\000\020\003\326\005\320\014\143" +
    "\060\157\067\147\070\152\071\151\001\002\000\030\003" +
    "\uffae\005\320\014\143\035\317\052\uffa7\054\316\060\157" +
    "\062\055\067\147\070\152\071\151\001\002\000\006\003" +
    "\274\060\275\001\002\000\010\003\262\050\263\062\055" +
    "\001\002\000\006\052\uff46\062\uff46\001\002\000\036\003" +
    "\110\006\062\007\111\033\105\036\107\037\120\040\125" +
    "\045\071\047\101\053\100\064\122\065\072\066\115\071" +
    "\103\001\002\000\006\003\133\060\134\001\002\000\022" +
    "\003\153\005\162\014\143\026\156\060\157\067\147\070" +
    "\152\071\151\001\002\000\006\052\uff44\062\uff44\001\002" +
    "\000\022\003\uff9c\005\uff9c\014\uff9c\026\uff9c\060\uff9c\067" +
    "\uff9c\070\uff9c\071\uff9c\001\002\000\006\052\uff45\062\uff45" +
    "\001\002\000\006\003\133\060\134\001\002\000\006\052" +
    "\uff40\062\uff40\001\002\000\004\062\055\001\002\000\006" +
    "\003\126\062\055\001\002\000\004\062\055\001\002\000" +
    "\040\003\uff97\006\uff97\007\uff97\033\uff97\036\uff97\037\uff97" +
    "\040\uff97\045\uff97\047\uff97\053\uff97\062\056\064\uff97\065" +
    "\uff97\066\uff97\071\uff97\001\002\000\040\003\uff96\006\uff96" +
    "\007\uff96\033\uff96\036\uff96\037\uff96\040\uff96\045\uff96\047" +
    "\uff96\053\uff96\062\056\064\uff96\065\uff96\066\uff96\071\uff96" +
    "\001\002\000\054\003\110\006\062\007\111\033\105\035" +
    "\uff3a\036\107\037\120\040\125\042\uff3a\045\071\046\uff3a" +
    "\047\101\051\uff3a\052\uff3a\053\100\054\uff3a\062\056\064" +
    "\122\065\072\066\115\071\103\001\002\000\016\035\uff3b" +
    "\042\uff3b\046\uff3b\051\uff3b\052\uff3b\054\uff3b\001\002\000" +
    "\010\052\uff9d\061\141\062\uff9d\001\002\000\006\004\137" +
    "\061\136\001\002\000\006\052\uffa3\062\uffa3\001\002\000" +
    "\006\052\uff9f\062\uff9f\001\002\000\004\061\140\001\002" +
    "\000\006\052\uffa0\062\uffa0\001\002\000\006\052\uff9e\062" +
    "\uff9e\001\002\000\006\003\252\062\055\001\002\000\012" +
    "\060\157\067\147\070\152\071\151\001\002\000\054\003" +
    "\uffe1\013\uffe1\014\uffe1\015\uffe1\016\uffe1\017\uffe1\020\uffe1" +
    "\021\uffe1\022\uffe1\023\uffe1\024\uffe1\025\uffe1\027\uffe1\030" +
    "\uffe1\043\uffe1\044\uffe1\050\uffe1\052\uffe1\061\uffe1\062\uffe1" +
    "\063\uffe1\001\002\000\014\003\uffd2\030\246\050\uffd2\052" +
    "\uffd2\062\uffd2\001\002\000\046\003\uffd4\013\167\014\172" +
    "\015\174\016\173\017\170\020\uffd4\021\uffd4\022\uffd4\023" +
    "\uffd4\024\uffd4\025\uffd4\027\uffd4\030\uffd4\050\uffd4\052\uffd4" +
    "\061\uffd4\062\uffd4\001\002\000\056\003\uffde\013\uffde\014" +
    "\uffde\015\uffde\016\uffde\017\uffde\020\uffde\021\uffde\022\uffde" +
    "\023\uffde\024\uffde\025\uffde\027\uffde\030\uffde\031\uffde\043" +
    "\uffde\044\uffde\050\uffde\052\uffde\061\uffde\062\uffde\063\uffde" +
    "\001\002\000\016\003\uffc5\027\uffc5\030\uffc5\050\uffc5\052" +
    "\uffc5\062\uffc5\001\002\000\060\003\uffdf\013\uffdf\014\uffdf" +
    "\015\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf\023" +
    "\uffdf\024\uffdf\025\uffdf\027\uffdf\030\uffdf\031\uffdf\043\uffdf" +
    "\044\uffdf\050\uffdf\052\uffdf\060\021\061\uffdf\062\uffdf\063" +
    "\uffdf\001\002\000\056\003\uffdd\013\uffdd\014\uffdd\015\uffdd" +
    "\016\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd\024" +
    "\uffdd\025\uffdd\027\uffdd\030\uffdd\031\uffdd\043\uffdd\044\uffdd" +
    "\050\uffdd\052\uffdd\061\uffdd\062\uffdd\063\uffdd\001\002\000" +
    "\014\003\uffcc\030\uffcc\050\uffcc\052\uffcc\062\230\001\002" +
    "\000\016\003\uffca\027\uffca\030\uffca\050\uffca\052\uffca\062" +
    "\uffca\001\002\000\020\003\212\020\213\021\214\022\215" +
    "\023\217\024\216\025\220\001\002\000\006\003\202\060" +
    "\203\001\002\000\014\014\143\060\157\067\147\070\152" +
    "\071\151\001\002\000\016\003\uffcd\027\163\030\uffcd\050" +
    "\uffcd\052\uffcd\062\uffcd\001\002\000\056\003\uffdc\013\uffdc" +
    "\014\uffdc\015\uffdc\016\uffdc\017\uffdc\020\uffdc\021\uffdc\022" +
    "\uffdc\023\uffdc\024\uffdc\025\uffdc\027\uffdc\030\uffdc\031\uffdc" +
    "\043\uffdc\044\uffdc\050\uffdc\052\uffdc\061\uffdc\062\uffdc\063" +
    "\uffdc\001\002\000\034\003\uffd3\020\uffd3\021\uffd3\022\uffd3" +
    "\023\uffd3\024\uffd3\025\uffd3\027\uffd3\030\uffd3\050\uffd3\052" +
    "\uffd3\061\uffd3\062\uffd3\001\002\000\020\005\uffd0\014\uffd0" +
    "\026\uffd0\060\uffd0\067\uffd0\070\uffd0\071\uffd0\001\002\000" +
    "\020\005\162\014\143\026\156\060\157\067\147\070\152" +
    "\071\151\001\002\000\016\003\uffcb\027\163\030\uffcb\050" +
    "\uffcb\052\uffcb\062\uffcb\001\002\000\016\013\167\014\172" +
    "\015\174\016\173\017\170\061\171\001\002\000\014\014" +
    "\143\060\157\067\147\070\152\071\151\001\002\000\014" +
    "\014\143\060\157\067\147\070\152\071\151\001\002\000" +
    "\056\003\uffe0\013\uffe0\014\uffe0\015\uffe0\016\uffe0\017\uffe0" +
    "\020\uffe0\021\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0\027" +
    "\uffe0\030\uffe0\031\uffe0\043\uffe0\044\uffe0\050\uffe0\052\uffe0" +
    "\061\uffe0\062\uffe0\063\uffe0\001\002\000\014\014\143\060" +
    "\157\067\147\070\152\071\151\001\002\000\014\014\143" +
    "\060\157\067\147\070\152\071\151\001\002\000\014\014" +
    "\143\060\157\067\147\070\152\071\151\001\002\000\054" +
    "\003\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5\017\uffe5\020" +
    "\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5\027\uffe5" +
    "\030\uffe5\043\uffe5\044\uffe5\050\uffe5\052\uffe5\061\uffe5\062" +
    "\uffe5\063\uffe5\001\002\000\054\003\uffe4\013\uffe4\014\uffe4" +
    "\015\uffe4\016\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4\023" +
    "\uffe4\024\uffe4\025\uffe4\027\uffe4\030\uffe4\043\uffe4\044\uffe4" +
    "\050\uffe4\052\uffe4\061\uffe4\062\uffe4\063\uffe4\001\002\000" +
    "\054\003\uffe6\013\uffe6\014\uffe6\015\174\016\173\017\170" +
    "\020\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6\027" +
    "\uffe6\030\uffe6\043\uffe6\044\uffe6\050\uffe6\052\uffe6\061\uffe6" +
    "\062\uffe6\063\uffe6\001\002\000\054\003\uffe3\013\uffe3\014" +
    "\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3" +
    "\023\uffe3\024\uffe3\025\uffe3\027\uffe3\030\uffe3\043\uffe3\044" +
    "\uffe3\050\uffe3\052\uffe3\061\uffe3\062\uffe3\063\uffe3\001\002" +
    "\000\054\003\uffe7\013\uffe7\014\uffe7\015\174\016\173\017" +
    "\170\020\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7" +
    "\027\uffe7\030\uffe7\043\uffe7\044\uffe7\050\uffe7\052\uffe7\061" +
    "\uffe7\062\uffe7\063\uffe7\001\002\000\016\005\162\014\143" +
    "\060\157\067\147\070\152\071\151\001\002\000\016\005" +
    "\162\014\143\060\157\067\147\070\152\071\151\001\002" +
    "\000\006\003\205\061\206\001\002\000\016\003\uffc8\027" +
    "\uffc8\030\uffc8\050\uffc8\052\uffc8\062\uffc8\001\002\000\016" +
    "\003\uffc9\027\uffc9\030\uffc9\050\uffc9\052\uffc9\062\uffc9\001" +
    "\002\000\006\003\210\061\211\001\002\000\016\003\uffc6" +
    "\027\uffc6\030\uffc6\050\uffc6\052\uffc6\062\uffc6\001\002\000" +
    "\016\003\uffc7\027\uffc7\030\uffc7\050\uffc7\052\uffc7\062\uffc7" +
    "\001\002\000\016\005\162\014\143\060\157\067\147\070" +
    "\152\071\151\001\002\000\016\005\162\014\143\060\157" +
    "\067\147\070\152\071\151\001\002\000\016\005\162\014" +
    "\143\060\157\067\147\070\152\071\151\001\002\000\016" +
    "\005\162\014\143\060\157\067\147\070\152\071\151\001" +
    "\002\000\016\005\162\014\143\060\157\067\147\070\152" +
    "\071\151\001\002\000\016\005\162\014\143\060\157\067" +
    "\147\070\152\071\151\001\002\000\016\005\162\014\143" +
    "\060\157\067\147\070\152\071\151\001\002\000\020\003" +
    "\uffd6\027\uffd6\030\uffd6\050\uffd6\052\uffd6\061\uffd6\062\uffd6" +
    "\001\002\000\020\003\uffd7\027\uffd7\030\uffd7\050\uffd7\052" +
    "\uffd7\061\uffd7\062\uffd7\001\002\000\020\003\uffd8\027\uffd8" +
    "\030\uffd8\050\uffd8\052\uffd8\061\uffd8\062\uffd8\001\002\000" +
    "\020\003\uffd9\027\uffd9\030\uffd9\050\uffd9\052\uffd9\061\uffd9" +
    "\062\uffd9\001\002\000\020\003\uffda\027\uffda\030\uffda\050" +
    "\uffda\052\uffda\061\uffda\062\uffda\001\002\000\020\003\uffdb" +
    "\027\uffdb\030\uffdb\050\uffdb\052\uffdb\061\uffdb\062\uffdb\001" +
    "\002\000\020\003\uffd5\027\uffd5\030\uffd5\050\uffd5\052\uffd5" +
    "\061\uffd5\062\uffd5\001\002\000\012\003\uffd1\050\uffd1\052" +
    "\uffd1\062\uffd1\001\002\000\020\003\234\014\143\060\157" +
    "\061\uff4e\067\147\070\152\071\151\001\002\000\004\061" +
    "\244\001\002\000\022\003\237\013\167\014\172\015\174" +
    "\016\173\017\170\061\uff4f\063\235\001\002\000\004\061" +
    "\uff50\001\002\000\014\014\143\060\157\067\147\070\152" +
    "\071\151\001\002\000\006\061\uff51\063\241\001\002\000" +
    "\006\003\237\063\235\001\002\000\006\061\uff4b\063\241" +
    "\001\002\000\014\014\143\060\157\067\147\070\152\071" +
    "\151\001\002\000\020\013\167\014\172\015\174\016\173" +
    "\017\170\061\uff4c\063\uff4c\001\002\000\020\013\167\014" +
    "\172\015\174\016\173\017\170\061\uff4d\063\uff4d\001\002" +
    "\000\056\003\uff52\013\uff52\014\uff52\015\uff52\016\uff52\017" +
    "\uff52\020\uff52\021\uff52\022\uff52\023\uff52\024\uff52\025\uff52" +
    "\027\uff52\030\uff52\031\uff52\043\uff52\044\uff52\050\uff52\052" +
    "\uff52\061\uff52\062\uff52\063\uff52\001\002\000\022\003\250" +
    "\005\162\014\143\026\156\060\157\067\147\070\152\071" +
    "\151\001\002\000\022\003\uffcf\005\uffcf\014\uffcf\026\uffcf" +
    "\060\uffcf\067\uffcf\070\uffcf\071\uffcf\001\002\000\014\003" +
    "\uffce\030\246\050\uffce\052\uffce\062\uffce\001\002\000\014" +
    "\003\uffcc\030\uffcc\050\uffcc\052\uffcc\062\uffcc\001\002\000" +
    "\054\003\uffe2\013\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2" +
    "\020\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2\025\uffe2\027" +
    "\uffe2\030\uffe2\043\uffe2\044\uffe2\050\uffe2\052\uffe2\061\uffe2" +
    "\062\uffe2\063\uffe2\001\002\000\004\062\055\001\002\000" +
    "\040\003\uff9b\006\uff9b\007\uff9b\033\uff9b\036\uff9b\037\uff9b" +
    "\040\uff9b\045\uff9b\047\uff9b\053\uff9b\062\056\064\uff9b\065" +
    "\uff9b\066\uff9b\071\uff9b\001\002\000\040\003\uff9a\006\uff9a" +
    "\007\uff9a\033\uff9a\036\uff9a\037\uff9a\040\uff9a\045\uff9a\047" +
    "\uff9a\053\uff9a\062\056\064\uff9a\065\uff9a\066\uff9a\071\uff9a" +
    "\001\002\000\006\052\uffa1\062\uffa1\001\002\000\004\035" +
    "\257\001\002\000\006\003\260\037\261\001\002\000\006" +
    "\052\uff98\062\uff98\001\002\000\006\052\uff99\062\uff99\001" +
    "\002\000\040\003\110\006\062\007\111\033\105\036\107" +
    "\037\120\040\125\045\071\047\101\053\100\062\055\064" +
    "\122\065\072\066\115\071\103\001\002\000\040\003\110" +
    "\006\062\007\111\033\105\036\107\037\120\040\125\045" +
    "\071\047\101\053\100\062\055\064\122\065\072\066\115" +
    "\071\103\001\002\000\040\003\110\006\062\007\111\033" +
    "\105\036\107\037\120\040\125\045\071\047\101\053\100" +
    "\062\056\064\122\065\072\066\115\071\103\001\002\000" +
    "\010\035\uff81\051\uff81\052\uff81\001\002\000\040\003\110" +
    "\006\062\007\111\033\105\036\107\037\120\040\125\045" +
    "\071\047\101\053\100\062\056\064\122\065\072\066\115" +
    "\071\103\001\002\000\006\052\uff87\062\uff87\001\002\000" +
    "\010\035\uff83\051\uff83\052\uff83\001\002\000\040\003\110" +
    "\006\062\007\111\033\105\036\107\037\120\040\125\045" +
    "\071\047\101\053\100\062\056\064\122\065\072\066\115" +
    "\071\103\001\002\000\006\052\uff86\062\uff86\001\002\000" +
    "\010\035\uff82\051\uff82\052\uff82\001\002\000\016\003\300" +
    "\004\276\060\157\067\147\070\152\071\151\001\002\000" +
    "\016\003\300\004\276\060\157\067\147\070\152\071\151" +
    "\001\002\000\012\003\uffc2\013\uffc2\031\uffc2\061\uffc2\001" +
    "\002\000\012\003\uffc1\013\uffc1\031\uffc1\061\uffc1\001\002" +
    "\000\012\003\uffc0\013\uffc0\031\uffc0\061\uffc0\001\002\000" +
    "\012\003\304\013\303\031\302\061\305\001\002\000\016" +
    "\003\300\004\276\060\157\067\147\070\152\071\151\001" +
    "\002\000\016\003\300\004\276\060\157\067\147\070\152" +
    "\071\151\001\002\000\006\052\uffb9\062\uffb9\001\002\000" +
    "\006\052\uffbb\062\uffbb\001\002\000\012\003\uffc4\013\uffc4" +
    "\031\uffc4\061\uffc4\001\002\000\012\003\uffc3\013\uffc3\031" +
    "\uffc3\061\uffc3\001\002\000\012\003\311\013\303\031\302" +
    "\061\312\001\002\000\006\052\uffba\062\uffba\001\002\000" +
    "\006\052\uffb8\062\uffb8\001\002\000\006\052\uffef\062\uffef" +
    "\001\002\000\006\052\uff3e\062\056\001\002\000\020\013" +
    "\167\014\172\015\174\016\173\017\170\052\uffec\062\uffec" +
    "\001\002\000\014\014\143\060\157\067\147\070\152\071" +
    "\151\001\002\000\006\037\321\047\322\001\002\000\006" +
    "\052\uffed\062\uffed\001\002\000\006\052\uff3c\062\uff3c\001" +
    "\002\000\006\052\uff3d\062\uff3d\001\002\000\016\013\167" +
    "\014\172\015\174\016\173\017\170\062\055\001\002\000" +
    "\006\054\uff70\062\056\001\002\000\006\052\ufff0\062\ufff0" +
    "\001\002\000\006\052\uffee\062\uffee\001\002\000\006\003" +
    "\330\056\331\001\002\000\006\002\uff5e\062\uff5e\001\002" +
    "\000\006\002\uff5f\062\uff5f\001\002\000\026\003\336\005" +
    "\320\014\143\060\157\064\122\065\072\066\115\067\147" +
    "\070\152\071\151\001\002\000\006\052\uffa6\062\uffa6\001" +
    "\002\000\006\052\uffa5\062\uffa5\001\002\000\006\052\uffa8" +
    "\062\uffa8\001\002\000\004\062\337\001\002\000\006\052" +
    "\uffa4\062\uffa4\001\002\000\010\003\uff7d\050\uff7d\062\uff7d" +
    "\001\002\000\014\014\143\060\157\067\147\070\152\071" +
    "\151\001\002\000\014\014\143\060\157\067\147\070\152" +
    "\071\151\001\002\000\016\013\167\014\172\015\174\016" +
    "\173\017\170\062\055\001\002\000\006\054\uff72\062\056" +
    "\001\002\000\016\013\167\014\172\015\174\016\173\017" +
    "\170\062\055\001\002\000\006\054\uff71\062\056\001\002" +
    "\000\004\046\350\001\002\000\004\071\351\001\002\000" +
    "\006\052\uff8f\062\uff8f\001\002\000\006\052\uffa2\062\uffa2" +
    "\001\002\000\006\020\372\034\371\001\002\000\006\003" +
    "\uff89\043\uff89\001\002\000\006\003\357\043\356\001\002" +
    "\000\014\014\143\060\157\067\147\070\152\071\151\001" +
    "\002\000\014\014\143\060\157\067\147\070\152\071\151" +
    "\001\002\000\022\003\362\013\167\014\172\015\174\016" +
    "\173\017\170\044\361\062\uff8c\001\002\000\014\014\143" +
    "\060\157\067\147\070\152\071\151\001\002\000\004\062" +
    "\uff8d\001\002\000\004\062\055\001\002\000\040\003\uff90" +
    "\006\uff90\007\uff90\033\uff90\036\uff90\037\uff90\040\uff90\045" +
    "\uff90\047\uff90\053\uff90\062\056\064\uff90\065\uff90\066\uff90" +
    "\071\uff90\001\002\000\016\013\167\014\172\015\174\016" +
    "\173\017\170\062\uff8e\001\002\000\022\003\362\013\167" +
    "\014\172\015\174\016\173\017\170\044\361\062\uff8c\001" +
    "\002\000\004\062\055\001\002\000\040\003\uff91\006\uff91" +
    "\007\uff91\033\uff91\036\uff91\037\uff91\040\uff91\045\uff91\047" +
    "\uff91\053\uff91\062\056\064\uff91\065\uff91\066\uff91\071\uff91" +
    "\001\002\000\012\003\036\010\035\011\040\012\041\001" +
    "\002\000\014\014\143\060\157\067\147\070\152\071\151" +
    "\001\002\000\020\003\uff8b\013\167\014\172\015\174\016" +
    "\173\017\170\043\uff8b\001\002\000\004\020\375\001\002" +
    "\000\014\014\143\060\157\067\147\070\152\071\151\001" +
    "\002\000\020\003\uff8a\013\167\014\172\015\174\016\173" +
    "\017\170\043\uff8a\001\002\000\004\042\u0100\001\002\000" +
    "\010\003\u0101\037\u0102\041\u0104\001\002\000\022\003\uff92" +
    "\005\uff92\014\uff92\026\uff92\060\uff92\067\uff92\070\uff92\071" +
    "\uff92\001\002\000\022\003\uff93\005\uff93\014\uff93\026\uff93" +
    "\060\uff93\067\uff93\070\uff93\071\uff93\001\002\000\022\003" +
    "\153\005\162\014\143\026\156\060\157\067\147\070\152" +
    "\071\151\001\002\000\022\003\uff94\005\uff94\014\uff94\026" +
    "\uff94\060\uff94\067\uff94\070\uff94\071\uff94\001\002\000\006" +
    "\052\uff95\062\uff95\001\002\000\022\003\153\005\162\014" +
    "\143\026\156\060\157\067\147\070\152\071\151\001\002" +
    "\000\010\035\uff73\051\u0106\052\uff73\001\002\000\006\035" +
    "\u0115\052\u0114\001\002\000\010\003\u010a\050\u010b\062\055" +
    "\001\002\000\004\062\055\001\002\000\004\062\055\001" +
    "\002\000\040\003\110\006\062\007\111\033\105\036\107" +
    "\037\120\040\125\045\071\047\101\053\100\062\056\064" +
    "\122\065\072\066\115\071\103\001\002\000\010\035\uff76" +
    "\051\uff76\052\uff76\001\002\000\040\003\110\006\062\007" +
    "\111\033\105\036\107\037\120\040\125\045\071\047\101" +
    "\053\100\062\056\064\122\065\072\066\115\071\103\001" +
    "\002\000\010\035\uff78\051\uff78\052\uff78\001\002\000\040" +
    "\003\110\006\062\007\111\033\105\036\107\037\120\040" +
    "\125\045\071\047\101\053\100\062\056\064\122\065\072" +
    "\066\115\071\103\001\002\000\010\035\uff77\051\uff77\052" +
    "\uff77\001\002\000\004\035\u011d\001\002\000\006\003\u0118" +
    "\062\055\001\002\000\040\003\uff7e\006\uff7e\007\uff7e\033" +
    "\uff7e\036\uff7e\037\uff7e\040\uff7e\045\uff7e\047\uff7e\053\uff7e" +
    "\062\uff7e\064\uff7e\065\uff7e\066\uff7e\071\uff7e\001\002\000" +
    "\006\003\u0116\047\u0117\001\002\000\006\052\uff79\062\uff79" +
    "\001\002\000\006\052\uff7a\062\uff7a\001\002\000\004\062" +
    "\055\001\002\000\040\003\110\006\062\007\111\033\105" +
    "\036\107\037\120\040\125\045\071\047\101\053\100\062" +
    "\056\064\122\065\072\066\115\071\103\001\002\000\004" +
    "\035\uff80\001\002\000\040\003\110\006\062\007\111\033" +
    "\105\036\107\037\120\040\125\045\071\047\101\053\100" +
    "\062\056\064\122\065\072\066\115\071\103\001\002\000" +
    "\004\035\uff7f\001\002\000\006\003\u011e\047\u011f\001\002" +
    "\000\006\052\uff7b\062\uff7b\001\002\000\006\052\uff7c\062" +
    "\uff7c\001\002\000\006\035\uff74\052\uff74\001\002\000\010" +
    "\003\uff75\050\uff75\062\uff75\001\002\000\036\003\110\006" +
    "\062\007\111\033\105\036\107\037\120\040\125\045\071" +
    "\047\101\053\100\064\122\065\072\066\115\071\103\001" +
    "\002\000\006\035\u012c\054\u012b\001\002\000\006\035\uff68" +
    "\054\uff68\001\002\000\016\003\u0128\014\143\060\157\067" +
    "\147\070\152\071\151\001\002\000\016\013\167\014\172" +
    "\015\174\016\173\017\170\062\uff65\001\002\000\004\062" +
    "\055\001\002\000\004\062\uff64\001\002\000\040\003\uff67" +
    "\006\uff67\007\uff67\033\uff67\036\uff67\037\uff67\040\uff67\045" +
    "\uff67\047\uff67\053\uff67\062\056\064\uff67\065\uff67\066\uff67" +
    "\071\uff67\001\002\000\006\035\uff69\054\uff69\001\002\000" +
    "\020\003\u0134\014\143\052\u0133\060\157\067\147\070\152" +
    "\071\151\001\002\000\006\003\u0131\053\u0132\001\002\000" +
    "\004\035\u012e\001\002\000\006\003\u012f\053\u0130\001\002" +
    "\000\006\052\uff6c\062\uff6c\001\002\000\006\052\uff6e\062" +
    "\uff6e\001\002\000\006\052\uff6d\062\uff6d\001\002\000\006" +
    "\052\uff6f\062\uff6f\001\002\000\004\062\055\001\002\000" +
    "\004\062\055\001\002\000\040\003\110\006\062\007\111" +
    "\033\105\036\107\037\120\040\125\045\071\047\101\053" +
    "\100\062\056\064\122\065\072\066\115\071\103\001\002" +
    "\000\004\035\uff6a\001\002\000\040\003\110\006\062\007" +
    "\111\033\105\036\107\037\120\040\125\045\071\047\101" +
    "\053\100\062\056\064\122\065\072\066\115\071\103\001" +
    "\002\000\004\035\uff6b\001\002\000\006\035\uff66\054\uff66" +
    "\001\002\000\036\003\110\006\062\007\111\033\105\036" +
    "\107\037\120\040\125\045\071\047\101\053\100\064\122" +
    "\065\072\066\115\071\103\001\002\000\006\052\uff88\062" +
    "\uff88\001\002\000\006\052\uff85\062\uff85\001\002\000\016" +
    "\003\300\004\276\060\157\067\147\070\152\071\151\001" +
    "\002\000\016\003\300\004\276\060\157\067\147\070\152" +
    "\071\151\001\002\000\012\003\u0140\013\303\031\302\061" +
    "\u0141\001\002\000\006\052\uffbd\062\uffbd\001\002\000\006" +
    "\052\uffbf\062\uffbf\001\002\000\012\003\u0143\013\303\031" +
    "\302\061\u0144\001\002\000\006\052\uffbe\062\uffbe\001\002" +
    "\000\006\052\uffbc\062\uffbc\001\002\000\012\003\u0151\020" +
    "\332\034\051\063\u014f\001\002\000\012\003\052\034\051" +
    "\052\uffa7\062\uffa7\001\002\000\004\034\u0149\001\002\000" +
    "\006\052\uffb2\062\uffb2\001\002\000\012\003\036\010\035" +
    "\011\040\012\041\001\002\000\006\052\uffb7\062\uffb7\001" +
    "\002\000\012\003\036\010\035\011\040\012\041\001\002" +
    "\000\010\020\u014d\052\uffb6\062\uffb6\001\002\000\026\003" +
    "\336\005\320\014\143\060\157\064\122\065\072\066\115" +
    "\067\147\070\152\071\151\001\002\000\006\052\uffb4\062" +
    "\uffb4\001\002\000\004\071\u015a\001\002\000\012\003\036" +
    "\010\035\011\040\012\041\001\002\000\014\003\uffb0\010" +
    "\uffb0\011\uffb0\012\uffb0\063\u0155\001\002\000\006\034\uffad" +
    "\063\u0153\001\002\000\004\071\u0154\001\002\000\006\034" +
    "\uffaa\063\uffaa\001\002\000\004\071\u0156\001\002\000\006" +
    "\034\uffa9\063\uffa9\001\002\000\010\020\u0158\052\uffb5\062" +
    "\uffb5\001\002\000\026\003\336\005\320\014\143\060\157" +
    "\064\122\065\072\066\115\067\147\070\152\071\151\001" +
    "\002\000\006\052\uffb3\062\uffb3\001\002\000\006\034\uffab" +
    "\063\uffab\001\002\000\004\035\u015c\001\002\000\006\003" +
    "\u015e\057\u015d\001\002\000\006\002\uff5b\062\uff5b\001\002" +
    "\000\006\002\uff5a\062\uff5a\001\002\000\006\002\ufffa\062" +
    "\ufffa\001\002\000\006\002\ufffd\062\ufffd\001\002\000\006" +
    "\003\020\060\021\001\002\000\004\071\u0161\001\002\000" +
    "\004\056\u0164\001\002\000\006\002\ufff7\062\ufff7\001\002" +
    "\000\012\003\024\032\026\061\uff58\071\023\001\002\000" +
    "\004\061\u0167\001\002\000\010\003\052\034\051\062\055" +
    "\001\002\000\012\003\036\010\035\011\040\012\041\001" +
    "\002\000\040\003\uff5c\006\uff5c\007\uff5c\033\uff5c\036\uff5c" +
    "\037\uff5c\040\uff5c\045\uff5c\047\uff5c\053\uff5c\062\056\064" +
    "\uff5c\065\uff5c\066\uff5c\071\uff5c\001\002\000\004\062\055" +
    "\001\002\000\040\003\uff60\006\uff60\007\uff60\033\uff60\036" +
    "\uff60\037\uff60\040\uff60\045\uff60\047\uff60\053\uff60\062\056" +
    "\064\uff60\065\uff60\066\uff60\071\uff60\001\002\000\006\003" +
    "\020\060\021\001\002\000\012\003\024\032\026\061\uff58" +
    "\071\023\001\002\000\004\061\u016f\001\002\000\004\062" +
    "\055\001\002\000\040\003\uff5d\006\uff5d\007\uff5d\033\uff5d" +
    "\036\uff5d\037\uff5d\040\uff5d\045\uff5d\047\uff5d\053\uff5d\062" +
    "\056\064\uff5d\065\uff5d\066\uff5d\071\uff5d\001\002\000\004" +
    "\002\001\001\002\000\016\002\ufff4\003\012\055\005\056" +
    "\016\057\011\062\056\001\002\000\006\002\ufff5\062\ufff5" +
    "\001\002\000\006\002\ufffc\062\ufffc\001\002\000\010\002" +
    "\ufffb\062\ufffb\071\u0161\001\002\000\006\002\ufff9\062\ufff9" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0174\000\020\002\006\005\013\006\005\072\007\076" +
    "\003\100\012\101\014\001\001\000\002\001\001\000\012" +
    "\072\u0173\076\u0175\100\012\101\014\001\001\000\004\004" +
    "\u0171\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\072\u015f\076\u015e\100\012\101\014\001" +
    "\001\000\060\003\060\007\122\021\072\022\067\023\074" +
    "\026\105\033\063\034\073\035\112\036\113\037\115\041" +
    "\120\043\076\044\116\047\111\051\075\052\064\054\066" +
    "\056\101\061\062\062\065\067\123\070\u015a\001\001\000" +
    "\002\001\001\000\060\003\060\007\122\021\072\022\067" +
    "\023\074\026\105\033\063\034\073\035\112\036\113\037" +
    "\115\041\120\043\076\044\116\047\111\051\075\052\064" +
    "\054\066\056\101\061\062\062\065\067\123\070\103\001" +
    "\001\000\002\001\001\000\004\013\021\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\102\024\103\026\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\036\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\042\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\045\001\001\000\002\001\001\000\004\012\047" +
    "\001\001\000\004\011\052\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\053\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\057\001" +
    "\001\000\002\001\001\000\006\024\u0146\026\u0147\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\053\u013a\077\u0139\001\001\000\010\020\u0121\064\u0122" +
    "\065\u0123\001\001\000\010\050\u0108\057\u0106\060\u0107\001" +
    "\001\000\060\003\060\007\122\021\072\022\067\023\074" +
    "\026\105\033\063\034\073\035\112\036\113\037\115\041" +
    "\120\043\076\044\116\047\111\051\075\052\064\054\066" +
    "\056\101\061\062\062\065\067\123\070\376\001\001\000" +
    "\004\045\354\001\001\000\004\040\351\001\001\000\002" +
    "\001\001\000\060\003\060\007\122\021\072\022\067\023" +
    "\074\026\105\033\063\034\073\035\112\036\113\037\115" +
    "\041\120\043\076\044\116\047\111\051\075\052\064\054" +
    "\066\056\101\061\062\062\065\067\123\070\346\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\014\145\015\147\016\154\030\337" +
    "\043\160\071\143\073\144\074\153\075\157\001\001\000" +
    "\002\001\001\000\004\013\230\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\010\324\014" +
    "\314\043\160\071\143\001\001\000\014\004\313\010\312" +
    "\014\314\043\160\071\143\001\001\000\002\001\001\000" +
    "\004\004\263\001\001\000\002\001\001\000\060\003\060" +
    "\007\122\021\072\022\067\023\074\026\105\033\063\034" +
    "\073\035\112\036\113\037\115\041\120\043\076\044\116" +
    "\047\111\051\075\052\064\054\066\056\101\061\062\062" +
    "\065\067\123\070\255\001\001\000\004\040\254\001\001" +
    "\000\024\014\145\015\147\016\154\030\141\043\160\071" +
    "\143\073\144\074\153\075\157\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\040\134\001" +
    "\001\000\002\001\001\000\004\004\130\001\001\000\004" +
    "\004\126\001\001\000\004\004\127\001\001\000\002\001" +
    "\001\000\002\001\001\000\060\003\060\007\122\021\072" +
    "\022\067\023\074\026\105\033\063\034\073\035\112\036" +
    "\113\037\115\041\120\043\076\044\116\047\111\051\075" +
    "\052\064\054\066\056\101\061\062\062\065\067\123\070" +
    "\131\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\252" +
    "\001\001\000\006\043\160\071\250\001\001\000\002\001" +
    "\001\000\004\032\244\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\230\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\014\165\043\160\071" +
    "\143\001\001\000\004\031\163\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\014\145\015" +
    "\147\016\154\043\160\071\143\074\153\075\164\001\001" +
    "\000\004\031\163\001\001\000\002\001\001\000\010\014" +
    "\200\043\160\071\143\001\001\000\010\014\177\043\160" +
    "\071\143\001\001\000\002\001\001\000\010\014\176\043" +
    "\160\071\143\001\001\000\010\014\175\043\160\071\143" +
    "\001\001\000\010\014\174\043\160\071\143\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\014\145\015\206\016" +
    "\154\043\160\071\143\001\001\000\014\014\145\015\203" +
    "\016\154\043\160\071\143\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\014\145\016\226\043" +
    "\160\071\143\001\001\000\012\014\145\016\225\043\160" +
    "\071\143\001\001\000\012\014\145\016\224\043\160\071" +
    "\143\001\001\000\012\014\145\016\223\043\160\071\143" +
    "\001\001\000\012\014\145\016\222\043\160\071\143\001" +
    "\001\000\012\014\145\016\221\043\160\071\143\001\001" +
    "\000\012\014\145\016\220\043\160\071\143\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\014\232\043\160\071\143" +
    "\104\231\001\001\000\002\001\001\000\004\105\235\001" +
    "\001\000\002\001\001\000\010\014\242\043\160\071\143" +
    "\001\001\000\002\001\001\000\004\105\237\001\001\000" +
    "\002\001\001\000\010\014\241\043\160\071\143\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\014\145\015\147\016\154\043\160\071\143\073\246" +
    "\074\153\075\157\001\001\000\002\001\001\000\004\032" +
    "\244\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\253\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\060\003\060\004\270\007" +
    "\122\021\072\022\067\023\074\026\105\033\063\034\073" +
    "\035\112\036\113\037\115\041\120\043\076\044\116\047" +
    "\111\051\075\052\064\054\066\056\101\061\062\062\065" +
    "\067\271\001\001\000\060\003\060\004\265\007\122\021" +
    "\072\022\067\023\074\026\105\033\063\034\073\035\112" +
    "\036\113\037\115\041\120\043\076\044\116\047\111\051" +
    "\075\052\064\054\066\056\101\061\062\062\065\067\266" +
    "\001\001\000\060\003\060\007\122\021\072\022\067\023" +
    "\074\026\105\033\063\034\073\035\112\036\113\037\115" +
    "\041\120\043\076\044\116\047\111\051\075\052\064\054" +
    "\066\056\101\061\062\062\065\067\123\070\264\001\001" +
    "\000\002\001\001\000\060\003\060\007\122\021\072\022" +
    "\067\023\074\026\105\033\063\034\073\035\112\036\113" +
    "\037\115\041\120\043\076\044\116\047\111\051\075\052" +
    "\064\054\066\056\101\061\062\062\065\067\123\070\267" +
    "\001\001\000\002\001\001\000\002\001\001\000\060\003" +
    "\060\007\122\021\072\022\067\023\074\026\105\033\063" +
    "\034\073\035\112\036\113\037\115\041\120\043\076\044" +
    "\116\047\111\051\075\052\064\054\066\056\101\061\062" +
    "\062\065\067\123\070\272\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\017\307\043\160\071\276\001\001" +
    "\000\010\017\300\043\160\071\276\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\017\306\043\160\071\276\001\001\000\010\017" +
    "\305\043\160\071\276\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\014\322\043" +
    "\160\071\143\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\323\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\010\332\014\314\027\334\033\333\043\160\071\143" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\014\344\043\160\071\143\001\001\000\010\014" +
    "\342\043\160\071\143\001\001\000\004\004\343\001\001" +
    "\000\002\001\001\000\004\004\345\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\014\365\043\160\071\143\001\001" +
    "\000\010\014\357\043\160\071\143\001\001\000\004\046" +
    "\362\001\001\000\010\014\364\043\160\071\143\001\001" +
    "\000\002\001\001\000\004\004\363\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\046\366\001\001\000\004" +
    "\004\367\001\001\000\002\001\001\000\004\011\373\001" +
    "\001\000\010\014\372\043\160\071\143\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\014\375\043\160\071" +
    "\143\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\042\u0102\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\014\145\015\147\016\154\030\u0104\043\160\071\143" +
    "\073\144\074\153\075\157\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\014\145\015\147\016\154\030\u0120" +
    "\043\160\071\143\073\144\074\153\075\157\001\001\000" +
    "\010\050\u0108\057\u0106\060\u011f\001\001\000\006\055\u0111" +
    "\077\u0112\001\001\000\004\004\u010b\001\001\000\004\004" +
    "\u010f\001\001\000\004\004\u010d\001\001\000\060\003\060" +
    "\007\122\021\072\022\067\023\074\026\105\033\063\034" +
    "\073\035\112\036\113\037\115\041\120\043\076\044\116" +
    "\047\111\051\075\052\064\054\066\056\101\061\062\062" +
    "\065\067\123\070\u010c\001\001\000\002\001\001\000\060" +
    "\003\060\007\122\021\072\022\067\023\074\026\105\033" +
    "\063\034\073\035\112\036\113\037\115\041\120\043\076" +
    "\044\116\047\111\051\075\052\064\054\066\056\101\061" +
    "\062\062\065\067\123\070\u010e\001\001\000\002\001\001" +
    "\000\060\003\060\007\122\021\072\022\067\023\074\026" +
    "\105\033\063\034\073\035\112\036\113\037\115\041\120" +
    "\043\076\044\116\047\111\051\075\052\064\054\066\056" +
    "\101\061\062\062\065\067\123\070\u0110\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\u0118\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\u011a\001\001\000\060\003\060\007" +
    "\122\021\072\022\067\023\074\026\105\033\063\034\073" +
    "\035\112\036\113\037\115\041\120\043\076\044\116\047" +
    "\111\051\075\052\064\054\066\056\101\061\062\062\065" +
    "\067\123\070\u0119\001\001\000\002\001\001\000\060\003" +
    "\060\007\122\021\072\022\067\023\074\026\105\033\063" +
    "\034\073\035\112\036\113\037\115\041\120\043\076\044" +
    "\116\047\111\051\075\052\064\054\066\056\101\061\062" +
    "\062\065\067\123\070\u011b\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\060\003\060\007\122\021" +
    "\072\022\067\023\074\026\105\033\063\034\073\035\112" +
    "\036\113\037\115\041\120\043\076\044\116\047\111\051" +
    "\075\052\064\054\066\056\101\061\062\062\065\067\123" +
    "\070\u0138\001\001\000\010\020\u0121\063\u012c\065\u0129\001" +
    "\001\000\002\001\001\000\012\014\u0125\043\160\066\u0126" +
    "\071\143\001\001\000\002\001\001\000\004\004\u0128\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\014\u0125\043\160\066\u0126\071\143\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\004\u0136\001\001\000\004\004\u0134\001\001" +
    "\000\060\003\060\007\122\021\072\022\067\023\074\026" +
    "\105\033\063\034\073\035\112\036\113\037\115\041\120" +
    "\043\076\044\116\047\111\051\075\052\064\054\066\056" +
    "\101\061\062\062\065\067\123\070\u0135\001\001\000\002" +
    "\001\001\000\060\003\060\007\122\021\072\022\067\023" +
    "\074\026\105\033\063\034\073\035\112\036\113\037\115" +
    "\041\120\043\076\044\116\047\111\051\075\052\064\054" +
    "\066\056\101\061\062\062\065\067\123\070\u0137\001\001" +
    "\000\002\001\001\000\002\001\001\000\056\003\060\007" +
    "\122\021\072\022\067\023\074\026\105\033\063\034\073" +
    "\035\112\036\113\037\115\041\120\043\076\044\116\047" +
    "\111\051\075\052\064\054\066\056\101\061\062\062\065" +
    "\067\u013b\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\017\u0141\043\160\071\276\001\001\000\010\017\u013e" +
    "\043\160\071\276\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\012\u014f\025\u0151\001\001\000" +
    "\004\012\u014a\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\u0149\001\001\000\002\001\001\000\004\011" +
    "\u014b\001\001\000\002\001\001\000\016\010\332\014\314" +
    "\027\u014d\033\333\043\160\071\143\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\u0156\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\010\332\014\314\027\u0158\033\333\043\160\071" +
    "\143\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\u0164" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\102\u0165\103\026\001\001\000\002\001\001" +
    "\000\006\004\u0168\012\u0167\001\001\000\004\011\u0169\001" +
    "\001\000\002\001\001\000\004\004\u016a\001\001\000\002" +
    "\001\001\000\004\013\u016c\001\001\000\006\102\u016d\103" +
    "\026\001\001\000\002\001\001\000\004\004\u016f\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\005\u0172\072" +
    "\007\076\003\100\012\101\014\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoVisualBasic$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoVisualBasic$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoVisualBasic$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public ManejadorSintacticoVB_PY msVB_PY = ManejadorSintacticoVB_PY.getInstacia();
    public ManejadorInstancias mi = ManejadorInstancias.getInstance();
    public ManejadorCuartetos mc = ManejadorCuartetos.getInstancia();
    public ManejadorBuscarMetodos mbm = ManejadorBuscarMetodos.getInstancia();
    public ManejadorTablaPila mtp = ManejadorTablaPila.getInstancia();
    public boolean and = false;
    private FrameCTDOA frameCTDOA;

    public SintacticoVisualBasic(LexicoVisualBasic lexer) { 
        super(lexer);   
        msVB_PY.setContadorLineas(0);
        msVB_PY.nuevoAnalisis();
    }

    public void setFrameCTDOA(FrameCTDOA frameCTDOA) {
        this.frameCTDOA = frameCTDOA;
        this.msVB_PY.setFrameCTDOA(frameCTDOA);
    }

    public void setAccion(String tipo, String mensaje, String accion){
        frameCTDOA.addErrores("ERROR Lexico Tipo: " + tipo + "\t Mensaje: " + mensaje + "\tAcción: ERROR\n");
    }

    @Override
    public void syntax_error(Symbol s){
        try {
            msVB_PY.errorSintax(s.left, s.right, s.value, 
                "Uf, error sintactico en el codigo Visual Basic, cerca de la linea y columna indicada porfavor revisa que el token\n "
                        + "\t\tidicado corresponda a la declaracion de instruccion correspondiente. Vuelve a intentarlo."
            );
        } catch (Exception e) {
            System.out.println("Error " + e.toString());
        }
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SintacticoVisualBasic$actions {
  private final SintacticoVisualBasic parser;

  /** Constructor */
  CUP$SintacticoVisualBasic$actions(SintacticoVisualBasic parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SintacticoVisualBasic$do_action(
    int                        CUP$SintacticoVisualBasic$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoVisualBasic$parser,
    java.util.Stack            CUP$SintacticoVisualBasic$stack,
    int                        CUP$SintacticoVisualBasic$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoVisualBasic$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoVisualBasic$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // estructuras_p ::= estructuras saltos 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		RESULT = e;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("estructuras_p",54, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // estructuras_p ::= estructuras saltos estructuras_p 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = parser.msVB_PY.retornarEstructuras(e, a);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("estructuras_p",54, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // estructuras ::= error END WHILE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		parser.msVB_PY.errorSintax(eleft, eright, e, "Error en el bloque de instrucciones de la estructura, por favor revisa la entrada en la linea y columna indicada. \nEstructura esperada: << Console || While || For || Declaracion de variables || Asignacion de variables || Do || Select || If >>, recuperado hasta: << END >>");
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("estructuras",53, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // estructuras ::= error END IF 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		parser.msVB_PY.errorSintax(eleft, eright, e, "Error en el bloque de instrucciones de la estructura, por favor revisa la entrada en la linea y columna indicada. \nEstructura esperada: << Console || While || For || Declaracion de variables || Asignacion de variables || Do || Select || If >>, recuperado hasta: << END >>");
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("estructuras",53, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // estructuras ::= error saltos 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		parser.msVB_PY.errorSintax(eleft, eright, e, "Error en el bloque de instrucciones, por favor revisa la entrada en la linea y columna indicada. \nEstructura esperada: << Console || While || For || Declaracion de variables || Asignacion de variables || Do || Select || If >>");
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("estructuras",53, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // estructuras ::= llamada_fp 
            {
              Object RESULT =null;
		
        Object as = null;
        parser.mc.addYRemovePuntero(as, false);
    
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("estructuras",53, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // estructuras ::= return 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = o;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("estructuras",53, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // estructuras ::= switch 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("estructuras",53, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // estructuras ::= if_else_mult 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("estructuras",53, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // estructuras ::= if_linea 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("estructuras",53, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // estructuras ::= for 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("estructuras",53, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // estructuras ::= do_while 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("estructuras",53, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // estructuras ::= while 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("estructuras",53, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // estructuras ::= asignacion_variables 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		parser.msVB_PY.asignacionVariables(e, eleft, eright);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("estructuras",53, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // estructuras ::= declaracion_variables 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("estructuras",53, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // estructuras ::= solicitud_datos 
            {
              Object RESULT =null;

              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("estructuras",53, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // estructuras ::= mensaje_terminal 
            {
              Object RESULT =null;

              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("estructuras",53, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // param_p ::= error param_p 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		 
        RESULT = a;
        parser.msVB_PY.errorSintax(eleft, eright, e, "Error sintactico en la instruccion de llamada a una funcion, no se esperaba el token indicado para el reconocimiento de parametros. Estructura esperada: << Param, Param_n ... >>");
    
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("param_p",67, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // param_p ::= param_p COMA operaciones_aritmeticas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = parser.msVB_PY.lista(a, e);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("param_p",67, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // param_p ::= COMA operaciones_aritmeticas 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("param_p",67, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // param ::= 
            {
              Object RESULT =null;

              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("param",66, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // param ::= operaciones_aritmeticas 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("param",66, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // param ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		 
        parser.msVB_PY.errorSintax(eleft, eright, e, "Error sintactico en la instruccion de llamada a una funcion, no se esperaba el token indicado para el reconocimiento de parametros. Estructura esperada: << Param, Param_n ... >>");
    
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("param",66, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // param ::= operaciones_aritmeticas param_p 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		
        List<Simbolo> lista = new ArrayList<>();
        if (e != null) {
            lista.add((Simbolo) e);
        }
        if(a instanceof Simbolo) {
            lista.add((Simbolo) a);
        } else {
            lista.addAll((List<Simbolo>) a);
        }
        RESULT = lista;
    
    
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("param",66, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // llamada_fp ::= ID ppa param PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		RESULT = parser.mbm.buscarMetodo("VB_", a, e, aleft, aright, 1, false);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("llamada_fp",33, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // parametros_p ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		 
        RESULT = new ArrayList<>();
        parser.msVB_PY.errorSintax(eleft, eright, e, "Error sintactico en la instruccion de parametros, no se esperaba el token indicado. Se espera una estructura: << ( | byval) ID AS Tipo de dato >>.");
    
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("parametros_p",65, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // parametros_p ::= parametros_p COMA BYVAL ID AS tipo_dato 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		
        Simbolo s = parser.msVB_PY.declaraUnaVariableParametro((Tipo) e, i, ileft, iright);
        List<Simbolo> lista = new ArrayList<>();
        if(a != null) {
            if(a instanceof Simbolo) {
                lista.add((Simbolo) a);
            } else {
                lista = ((List<Simbolo>) a);
            }
        }   
        if (s != null) {
            lista.add(s);
        } RESULT = lista;
    
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("parametros_p",65, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // parametros_p ::= BYVAL ID AS tipo_dato 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = parser.msVB_PY.declaraUnaVariableParametro((Tipo) e, a, eleft, eright);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("parametros_p",65, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // parametros_p ::= parametros_p COMA ID AS tipo_dato 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		
        Simbolo s = parser.msVB_PY.declaraUnaVariableParametro((Tipo) e, i, ileft, iright);
        List<Simbolo> lista = new ArrayList<>();
        if(a != null) {
            if(a instanceof Simbolo) {
                lista.add((Simbolo) a);
            } else {
                lista = ((List<Simbolo>) a);
            }
        }   
        if (s != null) {
            lista.add(s);
        } RESULT = lista;
    
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("parametros_p",65, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // parametros_p ::= ID AS tipo_dato 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = parser.msVB_PY.declaraUnaVariableParametro((Tipo) e, a, eleft, eright);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("parametros_p",65, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // parametros ::= 
            {
              Object RESULT =null;
		RESULT = new ArrayList<>();
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("parametros",64, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // parametros ::= parametros_p 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("parametros",64, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // sub ::= sub_s estructuras_p END error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		
    parser.msVB_PY.errorSintax(xleft, xright, x, "Error sintactico en la instruccion de la estructura sub. Se esperaba el token: << sub >>, no el token indicado.");
    RESULT = parser.msVB_PY.metodos(((Procedimiento) e).getE(), a, ((Procedimiento) e).getU(), eleft, eright); 
    parser.mc.finProcedimiento(false, false);
    
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("sub",60, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // sub ::= sub_s estructuras_p END SUB 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		
    RESULT = parser.msVB_PY.metodos(((Procedimiento) e).getE(), a, ((Procedimiento) e).getU(), eleft, eright); 
    parser.mc.finProcedimiento(false, false);
    
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("sub",60, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // sub_s ::= error ID ppa parametros PARENTESIS_C saltos 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-5)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		
        parser.msVB_PY.errorSintax(xleft, xright, x, "Error sintactico en la instruccion de la estructura sub. Se esperaba el token: << sub >>, no el token indicado.");
        parser.mc.addCuartetoProcedimiento(2, i, "VB", e, null);
        RESULT = new Procedimiento(i, e);
    
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("sub_s",62, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // sub_s ::= SUB ID ppa parametros PARENTESIS_C saltos 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		
        parser.mc.addCuartetoProcedimiento(2, i, "VB", e, null);
        RESULT = new Procedimiento(i, e);
    
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("sub_s",62, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // function ::= function_s estructuras_p END error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		
    parser.msVB_PY.errorSintax(xleft, xright, x, "Error sintactico en la instruccion de la estructura function. Se esperaba el token: << function >>, no el token indicado.");
    RESULT = parser.msVB_PY.funcion(((Procedimiento) e).getE(), ((Procedimiento) e).getA(), i, ((Procedimiento) e).getObject(), ((Procedimiento) e).getU(), ileft, iright); 
    parser.mc.finProcedimiento(false, true);
    
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("function",56, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // function ::= function_s estructuras_p END FUNCTION 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		
    RESULT = parser.msVB_PY.funcion(((Procedimiento) e).getE(), ((Procedimiento) e).getA(), i, ((Procedimiento) e).getObject(), ((Procedimiento) e).getU(), ileft, iright); 
    parser.mc.finProcedimiento(false, true);
    
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("function",56, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // function_s ::= error ID ppa parametros PARENTESIS_C as tipo_dato saltos 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-7)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-7)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-7)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-6)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-6)).right;
		String u = (String)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		
        parser.msVB_PY.errorSintax(xleft, xright, x, "Error sintactico en la instruccion de la estructura function. Se esperaba el token: << function >>, no el token indicado.");
        parser.mc.addCuartetoProcedimiento(2, u, "VB", e, (Tipo) a); 
        Simbolo  s = new Simbolo((Tipo) a, null, u);
        Funcion f = new Funcion();
        f.setParametros(e);
        s.setValor(f);
        s.setTipo(new Tipo("Funcion", Constantes.FUNCION));
        s.setTipoFuncion((Tipo) a);
        RESULT = new Procedimiento(u, e, (Tipo) a, 
        parser.msVB_PY.declaraUnaVariable(s, aleft, aright));
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("function_s",63, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // function_s ::= FUNCTION ID ppa parametros PARENTESIS_C as tipo_dato saltos 
            {
              Object RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-6)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-6)).right;
		String u = (String)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		
        parser.mc.addCuartetoProcedimiento(2, u, "VB", e, (Tipo) a); 
        Simbolo  s = new Simbolo((Tipo) a, null, u);
        Funcion f = new Funcion();
        f.setParametros(e);
        s.setValor(f);
        s.setTipo(new Tipo("Funcion", Constantes.FUNCION));
        s.setTipoFuncion((Tipo) a);
        RESULT = new Procedimiento(u, e, (Tipo) a, 
        parser.msVB_PY.declaraUnaVariable(s, aleft, aright));
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("function_s",63, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // ppa ::= error 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		parser.msVB_PY.errorSintax(xleft, xright, x, "Error sintactico en la instruccion indicada. Se esperaba el token: << ( >>, no el token indicado.");
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("ppa",9, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // ppa ::= PARENTESIS_A 
            {
              Object RESULT =null;

              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("ppa",9, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // casos ::= error 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		parser.msVB_PY.errorSintax(xleft, xright, x, "Error sintactico en la instruccion de la estructura case. Se esperaba: << Identificador, numero, operacion aritmetica. >>.");
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("casos",52, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // casos ::= operaciones_aritmeticas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = a;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("casos",52, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // caso ::= case_p estructuras_p 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		
        RESULT = parser.msVB_PY.crearEstructuraCases(a, e, aleft, aright, false);
        parser.mc.finCadaCaso();
    
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("caso",51, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // case_p ::= CASE casos saltos 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		parser.mc.condicional((Simbolo) a); RESULT = a;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("case_p",14, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // cantidad_casos ::= caso 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("cantidad_casos",50, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // cantidad_casos ::= cantidad_casos caso 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		
        if(a != null) {
            if(a instanceof Simbolo) {
                List<Simbolo> agregar = new ArrayList<>();  
                agregar.add((Simbolo) a);
                if(e != null) {
                    agregar.add((Simbolo) e);
                } RESULT = agregar;
            } else {
                ((List<Simbolo>) a).add(((Simbolo) e));
            }
        } else {
            if(e != null) {
                List<Simbolo> agregar = new ArrayList<>();  
                agregar.add((Simbolo) e);
                RESULT = agregar;
            }
        }
    
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("cantidad_casos",50, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // caso_else ::= CASE error saltos estructuras_p 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		
        parser.msVB_PY.errorSintax(xleft, xright, x, "Error sintactico en la instruccion de la estructura case - default. Se esperaba el token: << else >>, no el token indicado.");
        parser.mc.etiquetaGoto();
        RESULT = parser.msVB_PY.crearEstructuraCases(null, a, aleft, aright, true);
    
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("caso_else",49, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // caso_else ::= CASE ELSE saltos estructuras_p 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		
        parser.mc.etiquetaGoto();
        RESULT = parser.msVB_PY.crearEstructuraCases(null, a, aleft, aright, true);
    
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("caso_else",49, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // switch ::= switch_p cantidad_casos caso_else END error 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		
        parser.msVB_PY.errorSintax(xleft, xright, x, "Error sintactico en la instruccion de la estructura switch. Se esperaba el token: << select >>, no el token indicado.");
        RESULT = parser.msVB_PY.crearCase(e, i, a, eleft, eright);
        parser.mc.etqFinTurno();
    
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("switch",47, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // switch ::= switch_p cantidad_casos END error 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		
        parser.msVB_PY.errorSintax(xleft, xright, x, "Error sintactico en la instruccion de la estructura switch. Se esperaba el token: << select >>, no el token indicado.");
        RESULT = parser.msVB_PY.crearCase(e, null, a, eleft, eright);
        parser.mc.etqFinTurno();
    
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("switch",47, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // switch ::= switch_p cantidad_casos caso_else END SELECT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		
        RESULT = parser.msVB_PY.crearCase(e, i, a, eleft, eright);
        parser.mc.etqFinTurno();
    
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("switch",47, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // switch ::= switch_p cantidad_casos END SELECT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		
        RESULT = parser.msVB_PY.crearCase(e, null, a, eleft, eright);
        parser.mc.etqFinTurno();
    
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("switch",47, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // switch_p ::= error CASE operaciones_aritmeticas saltos 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		
        parser.mc.setEtiquetaSwitch((Simbolo) a); RESULT = a;
        parser.msVB_PY.errorSintax(xleft, xright, x, "Error sintactico en la instruccion de la estructura case. Se esperaba el token: << select >>, no el token indicado.");
    
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("switch_p",48, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // switch_p ::= SELECT error operaciones_aritmeticas saltos 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		
        parser.msVB_PY.errorSintax(xleft, xright, x, "Error sintactico en la instruccion de la estructura case. Se esperaba el token: << case >>, no el token indicado.");
        parser.mc.setEtiquetaSwitch((Simbolo) a); RESULT = a;
    
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("switch_p",48, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // switch_p ::= SELECT CASE operaciones_aritmeticas saltos 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		parser.mc.setEtiquetaSwitch((Simbolo) a); RESULT = a;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("switch_p",48, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // else_if_p ::= 
            {
              Object RESULT =null;
		RESULT = null;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("else_if_p",46, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // else_if_p ::= elseif else_if_p 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		
        List<Simbolo> listaSimbolos = new ArrayList<>();
        if(a != null) {
            if(a instanceof Simbolo) {
                listaSimbolos.add((Simbolo) a);
            } else {
                listaSimbolos = (List<Simbolo>) a;
            }
        }
        if(e != null) {
            listaSimbolos.add((Simbolo) e);
        }
        RESULT = listaSimbolos;
    
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("else_if_p",46, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // ie ::= ELSEIF condicional 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		parser.mc.escribirEtiquetasInicio(false); parser.mc.escribirEtiquetaFin(); parser.mc.nuevoAnalisisBoolean(); RESULT = e;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("ie",38, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // elseif ::= ie saltos estructuras_p 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = parser.msVB_PY.crearEstructuraCondicional(a, e, 2); parser.mc.imprimirResto();
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("elseif",45, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // elseif ::= ie error saltos estructuras_p 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		
        parser.msVB_PY.errorSintax(xleft, xright, x, "Error sintactico en la instruccion de la estructura if else. Se esperaba el token: << then >>, no el token indicado.");
        RESULT = parser.msVB_PY.crearEstructuraCondicional(a, e, 2); parser.mc.imprimirResto();
    
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("elseif",45, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // elseif ::= ie THEN saltos estructuras_p 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = parser.msVB_PY.crearEstructuraCondicional(a, e, 2); parser.mc.imprimirResto();
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("elseif",45, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // if_else_mult ::= if_m else_if_p END error 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		
        parser.msVB_PY.errorSintax(xleft, xright, x, "Error sintactico en la instruccion de la estructura condicional. Se esperaba el token: << if >>, no el token indicado.");
        RESULT = parser.msVB_PY.construirCondicionalIf(a, e, null);
    
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("if_else_mult",44, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // if_else_mult ::= if_m else_if_p END IF 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		RESULT = parser.msVB_PY.construirCondicionalIf(a, e, null);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("if_else_mult",44, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // if_else_mult ::= if_m else_if_p else_m END error 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		
        parser.msVB_PY.errorSintax(xleft, xright, x, "Error sintactico en la instruccion de la estructura condicional. Se esperaba el token: << if >>, no el token indicado.");
        RESULT = parser.msVB_PY.construirCondicionalIf(a, e, i);
    
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("if_else_mult",44, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // if_else_mult ::= if_m else_if_p else_m END IF 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		RESULT = parser.msVB_PY.construirCondicionalIf(a, e, i);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("if_else_mult",44, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // ii ::= IF condicional 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		parser.mc.escribirEtiquetasInicio(false); parser.mc.escribirEtiquetaFin(); parser.mc.nuevoAnalisisBoolean(); RESULT = e;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("ii",37, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // ee ::= ELSE 
            {
              Object RESULT =null;
		parser.mc.escribirEtiquetasInicio(false); parser.mc.escribirEtiquetaFin(); parser.mc.nuevoAnalisisBoolean();
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("ee",61, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // else_m ::= ee error saltos estructuras_p 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		
        parser.msVB_PY.errorSintax(xleft, xright, x, "Error sintactico en la instruccion de la estructura else. Se esperaba el token: << Salto de linea >>, no el token indicado.");
        RESULT = parser.msVB_PY.crearEstructuraCondicional(a, false, 3); parser.mc.imprimirResto();
    
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("else_m",43, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // else_m ::= ee saltos estructuras_p 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = parser.msVB_PY.crearEstructuraCondicional(a, false, 3); parser.mc.imprimirResto();
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("else_m",43, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // if_m ::= ii saltos estructuras_p 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = parser.msVB_PY.crearEstructuraCondicional(a, e, 1); parser.mc.imprimirResto();
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("if_m",42, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // if_m ::= ii error saltos estructuras_p 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		
        parser.msVB_PY.errorSintax(xleft, xright, x, "Error sintactico en la instruccion de la estructura if. Se esperaba el token: << then >>, no el token indicado.");
        RESULT = parser.msVB_PY.crearEstructuraCondicional(a, e, 1); parser.mc.imprimirResto();
    
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("if_m",42, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // if_m ::= ii THEN saltos estructuras_p 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = parser.msVB_PY.crearEstructuraCondicional(a, e, 1); parser.mc.imprimirResto();
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("if_m",42, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // if_linea_p ::= 
            {
              Object RESULT =null;
		RESULT = null;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("if_linea_p",41, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // if_linea_p ::= ee estructuras 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = parser.msVB_PY.crearEstructuraCondicional(a, false, 3); parser.mc.imprimirResto();
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("if_linea_p",41, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // if_line ::= ii error estructuras 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		
        parser.msVB_PY.errorSintax(xleft, xright, x, "Error sintactico en la instruccion de la estructura if de una linea. Se esperaba el token: << then >>, no el token indicado.");
        RESULT = parser.msVB_PY.crearEstructuraCondicional(e, a, 1); parser.mc.imprimirResto();
    
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("if_line",40, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // if_line ::= ii THEN estructuras 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = parser.msVB_PY.crearEstructuraCondicional(e, a, 1); parser.mc.imprimirResto();
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("if_line",40, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // if_linea ::= if_line if_linea_p 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = parser.msVB_PY.construirCondicionalIf(a, null, e);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("if_linea",39, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // var ::= error 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		parser.msVB_PY.errorSintax(xleft, xright, x, "Error sintactico en la instruccion de la estructura for. Se esperaba la estructura: << Identificador = valor asignacion >>.");
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("var",35, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // var ::= ID AS tipo_dato IGUAL operaciones_aritmeticas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = parser.msVB_PY.comprobarAsignacionFor(i, a, aleft, aright, (Tipo) e);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("var",35, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // var ::= ID IGUAL operaciones_aritmeticas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = parser.msVB_PY.comprobarAsignacionFor(i, a, aleft, aright, null);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("var",35, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // step ::= 
            {
              Object RESULT =null;
		RESULT = null;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("step",36, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // step ::= error 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		parser.msVB_PY.errorSintax(xleft, xright, x, "Error sintactico en la instruccion de la estructura for. Se esperaba el token: << step >>, no el token indicado.");
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("step",36, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // step ::= STEP operaciones_aritmeticas 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = new Simbolo(null, i);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("step",36, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // for ::= for_p estructuras_p NEXT ID 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		String u = (String)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		
        if(((For) x).getA() != null && ((For) x).getE() != null && ((For) x).getI() != null) {
            if(parser.msVB_PY.comprobarIdFor(((For) x).getA(), u.toString(), uleft, uright)) {
                RESULT = parser.msVB_PY.contruirEstructuraCiloDW(o, true, 3);
            } else  {   
                RESULT = parser.msVB_PY.contruirEstructuraCiloDW(o, null, 3);
            } 
        } else {
            RESULT = parser.msVB_PY.contruirEstructuraCiloDW(o, null, 3);
        } 
        parser.mc.finFor(((For) x).getLista());
        parser.mc.imprimirResto();
        parser.msVB_PY.removerCualquierSimbolo(((For) x).getA());
    
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("for",34, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // for_p ::= FOR var error operaciones_aritmeticas step saltos 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		
        parser.msVB_PY.errorSintax(xleft, xright, x, "Error sintactico en la instruccion de la estructura for. Se esperaba el token: << to >>, no el token indicado.");
        RESULT = new For(a, e, i, parser.mc.addFor((Simbolo) a, (Simbolo) e, (Simbolo) i));
    
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("for_p",26, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // for_p ::= FOR var TO operaciones_aritmeticas step saltos 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		RESULT = new For(a, e, i, parser.mc.addFor((Simbolo) a, (Simbolo) e, (Simbolo) i));
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("for_p",26, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // until_while ::= error 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		parser.msVB_PY.errorSintax(xleft, xright, x, "Error sintactico en la instruccion de la estructura do while. Se esperaba el token: << while | until >>, no el token indicado.");
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("until_while",32, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // until_while ::= WHILE 
            {
              Object RESULT =null;

              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("until_while",32, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // until_while ::= UNTIL 
            {
              Object RESULT =null;

              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("until_while",32, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // do_while ::= do_while_p estructuras_p LOOP until_while condicional 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		
        RESULT = parser.msVB_PY.contruirEstructuraCiloDW(e, a, 2);
        parser.mc.escribirEtiquetasInicio(false);
        parser.mc.escribirEtiquetaFin();
        parser.mc.finDoWhile((String) i);
        parser.mc.imprimirResto();
    
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("do_while",31, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // do_while_p ::= DO error saltos 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		
        parser.msVB_PY.errorSintax(xleft, xright, x, "Error sintactico en la instruccion de la estructura do while. Se esperaba el token: << Salto de linea >>, no el token indicado.");
        RESULT = parser.mc.addDoWhile();
        parser.mc.nuevoAnalisisBoolean();
    
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("do_while_p",16, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // do_while_p ::= DO saltos 
            {
              Object RESULT =null;
		
        RESULT = parser.mc.addDoWhile();
        parser.mc.nuevoAnalisisBoolean();
    
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("do_while_p",16, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // while ::= while_p estructuras_p END error 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		
        parser.msVB_PY.errorSintax(xleft, xright, x, "Error sintactico en la instruccion de la estructura while. Se esperaba el token: << while >>, no el token indicado.");
        RESULT = parser.msVB_PY.contruirEstructuraCiloDW(e, ((While) a).getA(), 1);
        parser.mc.finWhile(((While) a).getIdEtiqueta());
        parser.mc.imprimirResto();
    
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("while",27, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // while ::= while_p estructuras_p END WHILE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		
        RESULT = parser.msVB_PY.contruirEstructuraCiloDW(e, ((While) a).getA(), 1);
        parser.mc.finWhile(((While) a).getIdEtiqueta());
        parser.mc.imprimirResto();
    
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("while",27, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // while_p ::= while_n condicional error saltos 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		 
        parser.msVB_PY.errorSintax(eleft, eright, e, "Error sintactico en la instrucion while. Se esperaba el token: << Salto de linea >>, no el token indicado.");
        parser.mc.nuevoAnalisisBoolean();
        parser.mc.escribirEtiquetasInicio(false);
        parser.mc.addEtiquetasEstructuras();
        ((While) w).setA(a); 
        RESULT = w;
    
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("while_p",28, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // while_p ::= while_n condicional saltos 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		 
        parser.mc.nuevoAnalisisBoolean();
        parser.mc.escribirEtiquetasInicio(false);
        parser.mc.addEtiquetasEstructuras();
        ((While) w).setA(a); 
        RESULT = w;
    
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("while_p",28, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // while_n ::= WHILE 
            {
              Object RESULT =null;
		RESULT = new While(parser.mc.addWhile(), null);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("while_n",29, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // p_parentesis ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		parser.msVB_PY.errorSintax(eleft, eright, e, "Error sintactico en la instruccion solicitud de datos. Se esperaba una estructura como: << ( Texto ) >>.");
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("p_parentesis",30, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // p_parentesis ::= error PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		parser.msVB_PY.errorSintax(eleft, eright, e, "Error sintactico en la instruccion solicitud de datos. Se esperaba el token: << ( >>.");
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("p_parentesis",30, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // p_parentesis ::= PARENTESIS_A PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("p_parentesis",30, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // p_parentesis ::= PARENTESIS_A CADENA PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		parser.mc.imprimir(new Simbolo(null, e ));
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("p_parentesis",30, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // solicitud_datos ::= CINPUT p_parentesis 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		RESULT = new Simbolo(Constantes.CHAR_VAR_VB_PY, '\b', 2);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("solicitud_datos",25, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // solicitud_datos ::= FINPUT p_parentesis 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		RESULT = new Simbolo(Constantes.FLOAT_VAR_VB_PY, 0, 3);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("solicitud_datos",25, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // solicitud_datos ::= IINPUT p_parentesis 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		RESULT = new Simbolo(Constantes.INT_VAR_VB_PY, 0, 1);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("solicitud_datos",25, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // asignacion ::= error SALTO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		parser.msVB_PY.errorSintax(eleft, eright, e, "Error sintactico en la instruccion de valores a asignar. Se esperaba: << Identificador, Numero, Operacion Aritmetica >>.");
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("asignacion",21, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // asignacion ::= solicitud_datos 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("asignacion",21, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // asignacion ::= return_dato 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("asignacion",21, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // asignacion_variables ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		parser.msVB_PY.errorSintax(eleft, eright, e, "Error sintactico en la instruccion asignacion de variables. Se esperaba una asignacion con la estructura << ID = Valor Asignacion >>.");
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("asignacion_variables",20, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // asignacion_variables ::= ID IGUAL asignacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		
        if(e != null) {
            RESULT = new Simbolo(((Simbolo) e).getTipo(), ((Simbolo) e), a);
        } else { 
            RESULT = e;
        }
    
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("asignacion_variables",20, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // lista_id_p ::= error COMA ID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		 
        parser.msVB_PY.errorSintax(eleft, eright, e, "Error sintactico en la declaracion de variables. Se esperaba el token: << Identificador >>, no el indicado.");
        RESULT = new Simbolo(null, null, a);
    
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("lista_id_p",19, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // lista_id_p ::= lista_id_p COMA ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		
        List<Simbolo> listaSimbolos = new ArrayList<>();
        if(a != null) {
            if(a instanceof Simbolo) {
                listaSimbolos.add((Simbolo) a);
            } else {
                    listaSimbolos = (List<Simbolo>) a;
            }
        }
        if (e != null) {
            listaSimbolos.add(new Simbolo(null, null, e));
        }
        RESULT = listaSimbolos;
    
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("lista_id_p",19, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // lista_id_p ::= COMA ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = new Simbolo(null, null, a);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("lista_id_p",19, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // lista_ids ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		
        parser.msVB_PY.errorSintax(eleft, eright, e, "Error sintactico en la declaracion de variables. Se esperaba el token: << Identificador >>, no el indicado.");
        RESULT = new ArrayList<>();
    
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("lista_ids",18, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // lista_ids ::= ID lista_id_p 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		
        List<Simbolo> listaSimbolos = new ArrayList<>();
        if(a != null) {
            if(a instanceof Simbolo) {
                listaSimbolos.add((Simbolo) a);
            } else {
                    listaSimbolos = (List<Simbolo>) a;
            }
        }
        if (e != null) {
            listaSimbolos.add(new Simbolo(null, null, e));
        }
        RESULT = listaSimbolos;
    
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("lista_ids",18, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // dim ::= error 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		parser.msVB_PY.errorSintax(ileft, iright, i, "Error sintactico la instruccion declaracion de variables. Se esperaba el token << DIM >>.");
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("dim",1, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // dim ::= DIM 
            {
              Object RESULT =null;

              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("dim",1, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // as ::= error 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		parser.msVB_PY.errorSintax(ileft, iright, i, "Error sintactico la instruccion declaracion de variables. Se esperaba el token << AS >>.");
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("as",8, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // as ::= AS 
            {
              Object RESULT =null;

              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("as",8, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // declaracion_variables ::= dim asignacion_variables 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = parser.msVB_PY.declaraUnaVariable(a, aleft, aright);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("declaracion_variables",17, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // declaracion_variables ::= dim ID as tipo_dato IGUAL asignacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = parser.msVB_PY.declaraUnaVariableAsignacion((Tipo) e, i, a, aleft, aright);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("declaracion_variables",17, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // declaracion_variables ::= dim error as tipo_dato IGUAL asignacion 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		parser.msVB_PY.errorSintax(xleft, xright, x, "Error sintactico la instruccion declaracion de variables. Se esperaba el token << Identificador >>.");
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("declaracion_variables",17, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // declaracion_variables ::= dim ID as tipo_dato 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = parser.msVB_PY.declaraUnaVariable(new Simbolo((Tipo) e, null, a), aleft, aright);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("declaracion_variables",17, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // declaracion_variables ::= dim error as tipo_dato 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		parser.msVB_PY.errorSintax(ileft, iright, i, "Error sintactico la instruccion declaracion de variables. Se esperaba el token << Identificador >>.");
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("declaracion_variables",17, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // declaracion_variables ::= dim lista_ids AS tipo_dato 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = parser.msVB_PY.declararVariasVariables((List<Simbolo>) e, (Tipo) a, eleft, eright);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("declaracion_variables",17, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // mensaje_terminal ::= CONSOLA_LINEA error concatenacion PARENTESIS_C 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		
        parser.mc.imprimirNuevaLinea(); RESULT = e;
        parser.msVB_PY.errorSintax(ileft, iright, i, "Error sintactico en la intruccion de mensaje terminal. Se esperaba el token: << ( >>");
    
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("mensaje_terminal",15, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // mensaje_terminal ::= CONSOLA_LINEA PARENTESIS_A concatenacion error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		
        parser.mc.imprimirNuevaLinea(); RESULT = e;
        parser.msVB_PY.errorSintax(ileft, iright, i, "Error sintactico en la intruccion de mensaje terminal. Se esperaba el token: << ) >>");
    
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("mensaje_terminal",15, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // mensaje_terminal ::= CONSOLA_LINEA error concatenacion error 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		
        parser.mc.imprimirNuevaLinea(); RESULT = e;
        parser.msVB_PY.errorSintax(oleft, oright, o, "Error sintactico en la intruccion de mensaje terminal. Se esperaba el token: << ( >>");
        parser.msVB_PY.errorSintax(ileft, iright, i, "Error sintactico en la intruccion de mensaje terminal. Se esperaba el token: << ) >>");
    
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("mensaje_terminal",15, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // mensaje_terminal ::= CONSOLA_LINEA PARENTESIS_A concatenacion PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		parser.mc.imprimirNuevaLinea(); RESULT = e;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("mensaje_terminal",15, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // mensaje_terminal ::= CONSOLA error concatenacion PARENTESIS_C 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		
        parser.msVB_PY.errorSintax(oleft, oright, o, "Error sintactico en la intruccion de mensaje terminal. Se esperaba el token: << ( >>");
        RESULT = e;
    
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("mensaje_terminal",15, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // mensaje_terminal ::= CONSOLA PARENTESIS_A concatenacion error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		
        parser.msVB_PY.errorSintax(ileft, iright, i, "Error sintactico en la intruccion de mensaje terminal. Se esperaba el token: << ) >>");
        RESULT = e;
    
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("mensaje_terminal",15, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // mensaje_terminal ::= CONSOLA error concatenacion error 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		
        parser.msVB_PY.errorSintax(oleft, oright, o, "Error sintactico en la intruccion de mensaje terminal. Se esperaba el token: << ( >>");
        parser.msVB_PY.errorSintax(ileft, iright, i, "Error sintactico en la intruccion de mensaje terminal. Se esperaba el token: << ) >>");
        RESULT = e;
    
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("mensaje_terminal",15, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // mensaje_terminal ::= CONSOLA PARENTESIS_A concatenacion PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		RESULT = e;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("mensaje_terminal",15, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // concatenacion ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		parser.msVB_PY.errorSintax(eleft, eright, e, "Error sintactico en la concatenacion de cadenas, de la instruccion de imprimir mensajes en la terminal. Se esperaba una concatenacion de cadenas.");
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("concatenacion",13, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // concatenacion ::= estruct 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		parser.mc.imprimirPrintf(0, (Simbolo) e, -1); RESULT = e;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("concatenacion",13, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // concatenacion ::= CADENA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		parser.mc.imprimir(new Simbolo(null, "\"" + e + "\"")); RESULT = e;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("concatenacion",13, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // concatenacion ::= concatenacion AMPERSAND concatenacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		parser.msVB_PY.concatencacion(a, e);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("concatenacion",13, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // concatenacion ::= concatenacion MAS concatenacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		parser.msVB_PY.concatencacion(a, e);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("concatenacion",13, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // condicional_not ::= operaciones_logicas 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		parser.mc.gotoEscribir(); RESULT = e;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("condicional_not",58, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // condicional_not ::= NOT error operaciones_logicas error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		
        parser.msVB_PY.errorSintax(eleft, eright, e, "Error sintactico en las operacionaciones logicas, de la intruccion condicional not. Se esperaba el token: << ( >>");
        parser.msVB_PY.errorSintax(ileft, iright, i, "Error sintactico en las operacionaciones logicas, de la intruccion condicional not. Se esperaba el token: << ) >>");
        parser.mc.gotoEscribir(); RESULT = parser.msVB_PY.comprobacionCondicional(a, true, 3, aleft, aright);
    
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("condicional_not",58, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // condicional_not ::= NOT error operaciones_logicas PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		
        parser.msVB_PY.errorSintax(eleft, eright, e, "Error sintactico en las operacionaciones logicas, de la intruccion condicional not. Se esperaba el token: << ( >>");
        parser.mc.gotoEscribir(); RESULT = parser.msVB_PY.comprobacionCondicional(a, true, 3, aleft, aright);
    
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("condicional_not",58, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // condicional_not ::= NOT PARENTESIS_A operaciones_logicas error 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		
        parser.msVB_PY.errorSintax(eleft, eright, e, "Error sintactico en las operacionaciones logicas, de la intruccion condicional not. Se esperaba el token: << ) >>");
        parser.mc.gotoEscribir(); RESULT = parser.msVB_PY.comprobacionCondicional(a, true, 3, aleft, aright);
    
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("condicional_not",58, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // condicional_not ::= NOT PARENTESIS_A operaciones_logicas PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		parser.mc.gotoEscribir(); RESULT = parser.msVB_PY.comprobacionCondicional(a, true, 3, aleft, aright);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("condicional_not",58, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // condicional_and ::= condicional_not 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = a;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("condicional_and",59, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // condicional_and ::= condicional_and and condicional_and 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = parser.msVB_PY.comprobacionCondicional(a, e, 1, cleft, cright);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("condicional_and",59, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // condicional_or ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		parser.msVB_PY.errorSintax(eleft, eright, e, "Error sintactico en las operacionaciones logicas, de la instruccion condicional. Se esperaba una operacion condicional como: << OP1 OperadorComparacion OP2 >>");
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("condicional_or",57, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // condicional_or ::= condicional_and 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = a;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("condicional_or",57, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // condicional_or ::= condicional_or or condicional_or 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = parser.msVB_PY.comprobacionCondicional(a, e, 2, cleft, cright);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("condicional_or",57, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // or ::= OR 
            {
              Object RESULT =null;
		parser.mc.or(); parser.mc.condicionalOR(); if (!parser.mc.ultimoAgregadorEtiqueta()) {parser.mc.escribirEtiqueta();}
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("or",24, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // and ::= AND 
            {
              Object RESULT =null;
		parser.mc.and(); parser.mc.condicionalAND(); parser.mc.escribirEtiqueta();
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("and",23, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // condicional ::= error SALTO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		
        parser.mc.nuevoAnalisisBoolean();  
        parser.msVB_PY.errorSintax(eleft, eright, e, "Error sintactico en las operacionaciones logicas, de la instruccion condicional. Se esperaba una operacion condicional como: << OP1 OperadorComparacion OP2 >>");
    
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("condicional",22, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // condicional ::= condicional_or 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		parser.mc.nuevoAnalisisBoolean(); RESULT = e;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("condicional",22, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // tipos_comparacion ::= CARACTER 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = new Simbolo(Constantes.CHAR_VAR_VB_PY, e);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("tipos_comparacion",12, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // tipos_comparacion ::= operaciones_aritmeticas 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("tipos_comparacion",12, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // operaciones_logicas ::= tipos_comparacion error tipos_comparacion 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		parser.msVB_PY.errorSintax(aleft, aright, a, "Error sintactico en la instruccion de operaciones de comparacion. Se esperaba algun token como: << <, >, <=, >=, <>, = >>");
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",11, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // operaciones_logicas ::= tipos_comparacion MAYOR_IGUAL tipos_comparacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = parser.msVB_PY.comprobarOperacionesLogicas(a, e, 6, cleft, cright);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",11, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // operaciones_logicas ::= tipos_comparacion MAYOR tipos_comparacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = parser.msVB_PY.comprobarOperacionesLogicas(a, e, 5, cleft, cright);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",11, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // operaciones_logicas ::= tipos_comparacion MENOR_IGUAL tipos_comparacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = parser.msVB_PY.comprobarOperacionesLogicas(a, e, 4, cleft, cright);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",11, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // operaciones_logicas ::= tipos_comparacion MENOR tipos_comparacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = parser.msVB_PY.comprobarOperacionesLogicas(a, e, 3, cleft, cright);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",11, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // operaciones_logicas ::= tipos_comparacion DISTINTO tipos_comparacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = parser.msVB_PY.comprobarOperacionesLogicas(a, e, 2, cleft, cright);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",11, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // operaciones_logicas ::= tipos_comparacion IGUAL tipos_comparacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = parser.msVB_PY.comprobarOperacionesLogicas(a, e, 1, cleft, cright);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",11, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // estruct ::= llamada_fp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		
        if(a != null) {
            Tipo tipo = ((Simbolo) a).getTipoFuncion();
            if(tipo != null && tipo.getNombre().equals("Funcion")) {
                RESULT = a;
            } else {
                parser.msVB_PY.errorSemantico(aleft, aright, "Asignacion", "Error, los metodos no pueden asignarse.");
                RESULT = null;
            }
        }
    
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("estruct",55, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // estruct ::= REAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		float e = (float)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = new Simbolo(Constantes.FLOAT_VAR_VB_PY, e);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("estruct",55, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // estruct ::= NUMERO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = new Simbolo(Constantes.INT_VAR_VB_PY, e);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("estruct",55, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // estruct ::= ID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = parser.msVB_PY.metodoBuscarID(e.toString(), eleft, eright);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("estruct",55, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // estruct ::= PARENTESIS_A operaciones_aritmeticas PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		RESULT = e;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("estruct",55, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // operaciones_aritmeticas ::= estruct 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("operaciones_aritmeticas",10, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // operaciones_aritmeticas ::= MENOS estruct 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = parser.msVB_PY.modificarVariables(e, eleft, eright);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("operaciones_aritmeticas",10, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // operaciones_aritmeticas ::= operaciones_aritmeticas MODULO operaciones_aritmeticas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = parser.msVB_PY.realizarOperaciones(a, e, aleft, aright, eleft, eright, 5);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("operaciones_aritmeticas",10, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // operaciones_aritmeticas ::= operaciones_aritmeticas DIV operaciones_aritmeticas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = parser.msVB_PY.realizarOperaciones(a, e, aleft, aright, eleft, eright, 4);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("operaciones_aritmeticas",10, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // operaciones_aritmeticas ::= operaciones_aritmeticas POR operaciones_aritmeticas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = parser.msVB_PY.realizarOperaciones(a, e, aleft, aright, eleft, eright, 3);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("operaciones_aritmeticas",10, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // operaciones_aritmeticas ::= operaciones_aritmeticas MENOS operaciones_aritmeticas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = parser.msVB_PY.realizarOperaciones(a, e, aleft, aright, eleft, eright, 2);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("operaciones_aritmeticas",10, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // operaciones_aritmeticas ::= operaciones_aritmeticas MAS operaciones_aritmeticas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = parser.msVB_PY.realizarOperaciones(a, e, aleft, aright, eleft, eright, 1);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("operaciones_aritmeticas",10, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // tipo_dato ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		  
        RESULT = Constantes.INT_VAR_VB_PY;
        parser.msVB_PY.errorSintax(eleft, eright, e, "Error sintactico en el tipo de dato de una variable. Se esperaba el token: << INTEGER >>, << DECIMAL >> o << CHAR >>.");
    
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("tipo_dato",7, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // tipo_dato ::= CHAR 
            {
              Object RESULT =null;
		RESULT = Constantes.CHAR_VAR_VB_PY;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("tipo_dato",7, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // tipo_dato ::= DECIMAL 
            {
              Object RESULT =null;
		RESULT = Constantes.FLOAT_VAR_VB_PY;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("tipo_dato",7, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // tipo_dato ::= INTEGER 
            {
              Object RESULT =null;
		RESULT = Constantes.INT_VAR_VB_PY;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("tipo_dato",7, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // return_dato ::= operaciones_aritmeticas 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("return_dato",6, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // return_dato ::= CARACTER 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = new Simbolo(Constantes.CHAR_VAR_VB_PY, e);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("return_dato",6, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // return ::= RETURN error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		parser.msVB_PY.errorSintax(eleft, eright, e, "Error en la sintaxis de la instruccion return. Se esperaba: << Operacion aritmetica, identificador o numero >>.");
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("return",5, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // return ::= error return_dato 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		 
        parser.msVB_PY.errorSintax(aleft, aright, a, "Error en la sintaxis de la instruccion return. Se esperaba el token << RETURN >>");
        if(e != null) {
            parser.mc.returnCuarteto((Simbolo) e);
            RESULT = new Simbolo(Constantes.RETURN_VAR, e);
        } else {
            RESULT = null;
        }    
    
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("return",5, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // return ::= RETURN return_dato 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		 
        if(e != null) {
            parser.mc.returnCuarteto((Simbolo) e);
            RESULT = new Simbolo(Constantes.RETURN_VAR, e);
        } else {
            RESULT = null;
        }    
    
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("return",5, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // saltos ::= saltos SALTO 
            {
              Object RESULT =null;

              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("saltos",2, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // saltos ::= SALTO 
            {
              Object RESULT =null;

              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("saltos",2, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // estructura_fs_p ::= 
            {
              Object RESULT =null;

              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("estructura_fs_p",4, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // estructura_fs_p ::= estructura_fs_p saltos 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		 RESULT = a;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("estructura_fs_p",4, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // estructura_fs_p ::= estructura_fs_p saltos estructura_fs 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		 RESULT = parser.msVB_PY.lista(a, e);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("estructura_fs_p",4, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // estructura_fs_p ::= estructura_fs 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		 RESULT = e;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("estructura_fs_p",4, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // estructura_fs ::= error END FUNCTION 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		parser.msVB_PY.errorSintax(eleft, eright, e, "Error en la sintaxis de la declaracion de un procedimiento. Se espera la estructura: <<  ( Public | ) ( Function | Sub ) Instrucciones END ( Sub | Function ) >>");
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("estructura_fs",3, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // estructura_fs ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		parser.msVB_PY.errorSintax(eleft, eright, e, "Error en la sintaxis de la declaracion de un procedimiento. Se espera la estructura: <<  ( Public | ) ( Function | Sub ) Instrucciones END ( Sub | Function ) >>");
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("estructura_fs",3, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // estructura_fs ::= PUBLIC sub 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("estructura_fs",3, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // estructura_fs ::= error sub 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		
        parser.msVB_PY.errorSintax(aleft, aright, a, "Error en la sintaxis de la declaracion de un metodo. Se esperaba el token << PUBLIC >> o << >>");
        RESULT = e;
    
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("estructura_fs",3, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // estructura_fs ::= PUBLIC error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		parser.msVB_PY.errorSintax(eleft, eright, e, "Error en la sintaxis de la declaracion de metodos o funciones. Se esperaba el token << FUNCTION >> o << SUB >>");
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("estructura_fs",3, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // estructura_fs ::= PUBLIC function 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("estructura_fs",3, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // estructura_fs ::= error function 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		
        parser.msVB_PY.errorSintax(aleft, aright, a, "Error en la sintaxis de la declaracion de una funcion. Se esperaba el token << PUBLIC >> o << >>");
        RESULT = e;
    
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("estructura_fs",3, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // estructura_fs ::= sub 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("estructura_fs",3, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // estructura_fs ::= function 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("estructura_fs",3, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= estructura_fs_p 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		parser.mi.setClaseVB(parser.msVB_PY.claseVB(e));
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoVisualBasic$parser.done_parsing();
          return CUP$SintacticoVisualBasic$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

