
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Nov 10 03:26:43 CST 2020
//----------------------------------------------------

package proyectofinal.ctdoa.backend.analizador.visual_basic;

import java_cup.runtime.*;
import proyectofinal.ctdoa.backend.objetos.*;
import proyectofinal.ctdoa.backend.manejadores.*;
import java.util.ArrayList;
import java.util.List;
import proyectofinal.ctdoa.frontend.gui.FrameCTDOA;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Nov 10 03:26:43 CST 2020
  */
public class SintacticoVisualBasic extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SintacticoVisualBasic() {super();}

  /** Constructor which sets the default scanner. */
  public SintacticoVisualBasic(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoVisualBasic(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\232\000\002\002\004\000\002\002\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\004\000\002\004\004" +
    "\000\002\004\004\000\002\004\005\000\002\005\003\000" +
    "\002\005\005\000\002\005\004\000\002\005\002\000\002" +
    "\003\003\000\002\003\004\000\002\006\004\000\002\007" +
    "\003\000\002\007\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\011\005\000" +
    "\002\011\005\000\002\011\005\000\002\011\005\000\002" +
    "\011\005\000\002\011\004\000\002\011\003\000\002\066" +
    "\005\000\002\066\003\000\002\066\003\000\002\066\003" +
    "\000\002\066\003\000\002\012\005\000\002\012\005\000" +
    "\002\012\005\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\013\003\000\002\013\003\000\002\025" +
    "\003\000\002\025\004\000\002\026\003\000\002\027\003" +
    "\000\002\070\005\000\002\070\003\000\002\070\003\000" +
    "\002\072\005\000\002\072\003\000\002\071\006\000\002" +
    "\071\003\000\002\014\005\000\002\014\005\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\016\006" +
    "\000\002\016\006\000\002\020\006\000\002\020\006\000" +
    "\002\020\010\000\002\020\004\000\002\021\004\000\002" +
    "\021\003\000\002\022\004\000\002\022\005\000\002\022" +
    "\005\000\002\023\005\000\002\023\003\000\002\024\003" +
    "\000\002\024\003\000\002\024\004\000\002\030\004\000" +
    "\002\030\004\000\002\030\004\000\002\035\005\000\002" +
    "\035\004\000\002\035\004\000\002\035\003\000\002\034" +
    "\003\000\002\033\005\000\002\032\006\000\002\017\004" +
    "\000\002\036\007\000\002\037\003\000\002\037\003\000" +
    "\002\031\010\000\002\041\006\000\002\043\004\000\002" +
    "\043\002\000\002\042\005\000\002\042\007\000\002\046" +
    "\004\000\002\047\005\000\002\050\004\000\002\050\002" +
    "\000\002\051\006\000\002\051\005\000\002\052\005\000" +
    "\002\074\003\000\002\044\004\000\002\053\007\000\002" +
    "\053\006\000\002\054\006\000\002\054\005\000\002\045" +
    "\004\000\002\055\004\000\002\055\002\000\002\057\006" +
    "\000\002\056\006\000\002\056\007\000\002\060\006\000" +
    "\002\061\004\000\002\061\003\000\002\015\005\000\002" +
    "\062\004\000\002\063\003\000\002\076\012\000\002\067" +
    "\006\000\002\075\010\000\002\073\006\000\002\077\003" +
    "\000\002\077\002\000\002\100\005\000\002\100\007\000" +
    "\002\100\006\000\002\100\010\000\002\100\003\000\002" +
    "\040\006\000\002\101\004\000\002\101\003\000\002\101" +
    "\003\000\002\101\002\000\002\102\004\000\002\102\005" +
    "\000\002\102\004\000\002\064\003\000\002\064\003\000" +
    "\002\064\003\000\002\064\003\000\002\064\003\000\002" +
    "\064\003\000\002\064\003\000\002\064\003\000\002\064" +
    "\003\000\002\064\003\000\002\064\003\000\002\064\003" +
    "\000\002\064\004\000\002\064\005\000\002\064\005\000" +
    "\002\065\005\000\002\065\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0127\000\016\002\ufff6\003\012\056\005\057\016\060" +
    "\011\063\ufff6\001\002\000\006\002\ufffe\063\ufffe\001\002" +
    "\000\006\057\016\060\011\001\002\000\006\002\000\063" +
    "\051\001\002\000\004\002\u0125\001\002\000\006\002\uffff" +
    "\063\uffff\001\002\000\004\072\u0120\001\002\000\006\036" +
    "\u011e\060\u011d\001\002\000\036\003\103\006\055\007\104" +
    "\034\100\037\102\040\113\041\120\046\064\050\074\054" +
    "\073\065\115\066\065\067\110\072\076\001\002\000\006" +
    "\002\ufff9\063\ufff9\001\002\000\036\003\103\006\055\007" +
    "\104\034\100\037\102\040\113\041\120\046\064\050\074" +
    "\054\073\065\115\066\065\067\110\072\076\001\002\000" +
    "\004\072\017\001\002\000\004\061\020\001\002\000\012" +
    "\003\023\033\024\062\uff86\072\021\001\002\000\004\035" +
    "\053\001\002\000\004\062\045\001\002\000\006\062\uff81" +
    "\064\uff81\001\002\000\004\072\042\001\002\000\006\062" +
    "\uff87\064\026\001\002\000\006\033\030\072\027\001\002" +
    "\000\004\035\040\001\002\000\004\072\031\001\002\000" +
    "\004\035\032\001\002\000\012\003\034\010\033\011\036" +
    "\012\037\001\002\000\014\020\ufff0\053\ufff0\062\ufff0\063" +
    "\ufff0\064\ufff0\001\002\000\014\020\uffed\053\uffed\062\uffed" +
    "\063\uffed\064\uffed\001\002\000\006\062\uff82\064\uff82\001" +
    "\002\000\014\020\uffef\053\uffef\062\uffef\063\uffef\064\uffef" +
    "\001\002\000\014\020\uffee\053\uffee\062\uffee\063\uffee\064" +
    "\uffee\001\002\000\012\003\034\010\033\011\036\012\037" +
    "\001\002\000\006\062\uff84\064\uff84\001\002\000\004\035" +
    "\043\001\002\000\012\003\034\010\033\011\036\012\037" +
    "\001\002\000\006\062\uff83\064\uff83\001\002\000\004\035" +
    "\046\001\002\000\012\003\034\010\033\011\036\012\037" +
    "\001\002\000\004\063\051\001\002\000\040\003\uff8b\006" +
    "\uff8b\007\uff8b\034\uff8b\037\uff8b\040\uff8b\041\uff8b\046\uff8b" +
    "\050\uff8b\054\uff8b\063\052\065\uff8b\066\uff8b\067\uff8b\072" +
    "\uff8b\001\002\000\064\002\ufff5\003\ufff5\006\ufff5\007\ufff5" +
    "\034\ufff5\036\ufff5\037\ufff5\040\ufff5\041\ufff5\043\ufff5\046" +
    "\ufff5\047\ufff5\050\ufff5\052\ufff5\053\ufff5\054\ufff5\055\ufff5" +
    "\056\ufff5\057\ufff5\060\ufff5\063\ufff5\065\ufff5\066\ufff5\067" +
    "\ufff5\072\ufff5\001\002\000\064\002\ufff4\003\ufff4\006\ufff4" +
    "\007\ufff4\034\ufff4\036\ufff4\037\ufff4\040\ufff4\041\ufff4\043" +
    "\ufff4\046\ufff4\047\ufff4\050\ufff4\052\ufff4\053\ufff4\054\ufff4" +
    "\055\ufff4\056\ufff4\057\ufff4\060\ufff4\063\ufff4\065\ufff4\066" +
    "\ufff4\067\ufff4\072\ufff4\001\002\000\012\003\034\010\033" +
    "\011\036\012\037\001\002\000\006\062\uff85\064\uff85\001" +
    "\002\000\004\061\u0117\001\002\000\006\053\uff6f\063\uff6f" +
    "\001\002\000\006\053\uff77\063\uff77\001\002\000\006\053" +
    "\371\063\uffa1\001\002\000\004\055\u0105\001\002\000\010" +
    "\036\uff95\052\356\053\uff95\001\002\000\036\003\103\006" +
    "\055\007\104\034\100\037\102\040\113\041\120\046\064" +
    "\050\074\054\073\065\115\066\065\067\110\072\076\001" +
    "\002\000\004\072\332\001\002\000\006\003\124\061\125" +
    "\001\002\000\006\053\uff78\063\uff78\001\002\000\036\003" +
    "\103\006\055\007\104\034\100\037\102\040\113\041\120" +
    "\046\064\050\074\054\073\065\115\066\065\067\110\072" +
    "\076\001\002\000\006\053\uff76\063\uff76\001\002\000\006" +
    "\053\uff71\063\uff71\001\002\000\006\053\uff6d\063\uff6d\001" +
    "\002\000\004\055\323\001\002\000\022\003\143\005\153" +
    "\014\134\027\147\061\150\070\141\071\145\072\142\001" +
    "\002\000\006\053\uff70\063\uff70\001\002\000\006\020\301" +
    "\061\213\001\002\000\004\036\320\001\002\000\006\003" +
    "\271\072\270\001\002\000\006\053\uff75\063\uff75\001\002" +
    "\000\016\005\267\014\134\061\150\070\141\071\145\072" +
    "\142\001\002\000\010\036\262\053\uffbc\063\051\001\002" +
    "\000\004\061\247\001\002\000\006\051\241\063\051\001" +
    "\002\000\006\053\uff74\063\uff74\001\002\000\036\003\103" +
    "\006\055\007\104\034\100\037\102\040\113\041\120\046" +
    "\064\050\074\054\073\065\115\066\065\067\110\072\076" +
    "\001\002\000\006\003\124\061\125\001\002\000\022\003" +
    "\143\005\153\014\134\027\147\061\150\070\141\071\145" +
    "\072\142\001\002\000\006\053\uff72\063\uff72\001\002\000" +
    "\022\003\uffb1\005\uffb1\014\uffb1\027\uffb1\061\uffb1\070\uffb1" +
    "\071\uffb1\072\uffb1\001\002\000\006\053\uff73\063\uff73\001" +
    "\002\000\006\003\124\061\125\001\002\000\006\053\uff6e" +
    "\063\uff6e\001\002\000\004\063\051\001\002\000\004\063" +
    "\051\001\002\000\040\003\uffae\006\uffae\007\uffae\034\uffae" +
    "\037\uffae\040\uffae\041\uffae\046\uffae\050\uffae\054\uffae\063" +
    "\052\065\uffae\066\uffae\067\uffae\072\uffae\001\002\000\054" +
    "\003\103\006\055\007\104\034\100\036\uff68\037\102\040" +
    "\113\041\120\043\uff68\046\064\047\uff68\050\074\052\uff68" +
    "\053\uff68\054\073\055\uff68\063\052\065\115\066\065\067" +
    "\110\072\076\001\002\000\016\036\uff69\043\uff69\047\uff69" +
    "\052\uff69\053\uff69\055\uff69\001\002\000\010\053\uffb2\062" +
    "\132\063\uffb2\001\002\000\006\004\130\062\127\001\002" +
    "\000\006\053\uffb8\063\uffb8\001\002\000\006\053\uffb4\063" +
    "\uffb4\001\002\000\004\062\131\001\002\000\006\053\uffb5" +
    "\063\uffb5\001\002\000\006\053\uffb3\063\uffb3\001\002\000" +
    "\004\063\051\001\002\000\012\061\150\070\141\071\145" +
    "\072\142\001\002\000\054\003\uffe6\013\uffe6\014\uffe6\015" +
    "\uffe6\016\uffe6\017\uffe6\020\uffe6\022\uffe6\023\uffe6\024\uffe6" +
    "\025\uffe6\026\uffe6\030\uffe6\031\uffe6\044\uffe6\045\uffe6\051" +
    "\uffe6\053\uffe6\062\uffe6\063\uffe6\064\uffe6\001\002\000\012" +
    "\031\230\051\uffd8\053\uffd8\063\uffd8\001\002\000\044\013" +
    "\160\014\163\015\165\016\164\017\161\020\uffda\022\uffda" +
    "\023\uffda\024\uffda\025\uffda\026\uffda\030\uffda\031\uffda\051" +
    "\uffda\053\uffda\062\uffda\063\uffda\001\002\000\014\030\uffce" +
    "\031\uffce\051\uffce\053\uffce\063\uffce\001\002\000\056\003" +
    "\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3" +
    "\022\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3\030\uffe3\031" +
    "\uffe3\032\uffe3\044\uffe3\045\uffe3\051\uffe3\053\uffe3\062\uffe3" +
    "\063\uffe3\064\uffe3\001\002\000\060\003\uffe4\013\uffe4\014" +
    "\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4\022\uffe4\023\uffe4" +
    "\024\uffe4\025\uffe4\026\uffe4\030\uffe4\031\uffe4\032\uffe4\044" +
    "\uffe4\045\uffe4\051\uffe4\053\uffe4\061\213\062\uffe4\063\uffe4" +
    "\064\uffe4\001\002\000\012\031\uffd2\051\uffd2\053\uffd2\063" +
    "\212\001\002\000\014\030\uffd0\031\uffd0\051\uffd0\053\uffd0" +
    "\063\uffd0\001\002\000\056\003\uffe2\013\uffe2\014\uffe2\015" +
    "\uffe2\016\uffe2\017\uffe2\020\uffe2\022\uffe2\023\uffe2\024\uffe2" +
    "\025\uffe2\026\uffe2\030\uffe2\031\uffe2\032\uffe2\044\uffe2\045" +
    "\uffe2\051\uffe2\053\uffe2\062\uffe2\063\uffe2\064\uffe2\001\002" +
    "\000\016\020\176\022\177\023\200\024\202\025\201\026" +
    "\203\001\002\000\004\061\173\001\002\000\014\014\134" +
    "\061\150\070\141\071\145\072\142\001\002\000\056\003" +
    "\uffe1\013\uffe1\014\uffe1\015\uffe1\016\uffe1\017\uffe1\020\uffe1" +
    "\022\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1\030\uffe1\031" +
    "\uffe1\032\uffe1\044\uffe1\045\uffe1\051\uffe1\053\uffe1\062\uffe1" +
    "\063\uffe1\064\uffe1\001\002\000\014\030\154\031\uffd3\051" +
    "\uffd3\053\uffd3\063\uffd3\001\002\000\032\020\uffd9\022\uffd9" +
    "\023\uffd9\024\uffd9\025\uffd9\026\uffd9\030\uffd9\031\uffd9\051" +
    "\uffd9\053\uffd9\062\uffd9\063\uffd9\001\002\000\020\005\uffd6" +
    "\014\uffd6\027\uffd6\061\uffd6\070\uffd6\071\uffd6\072\uffd6\001" +
    "\002\000\020\005\153\014\134\027\147\061\150\070\141" +
    "\071\145\072\142\001\002\000\014\030\154\031\uffd1\051" +
    "\uffd1\053\uffd1\063\uffd1\001\002\000\016\013\160\014\163" +
    "\015\165\016\164\017\161\062\162\001\002\000\014\014" +
    "\134\061\150\070\141\071\145\072\142\001\002\000\014" +
    "\014\134\061\150\070\141\071\145\072\142\001\002\000" +
    "\056\003\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5\017\uffe5" +
    "\020\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5\030" +
    "\uffe5\031\uffe5\032\uffe5\044\uffe5\045\uffe5\051\uffe5\053\uffe5" +
    "\062\uffe5\063\uffe5\064\uffe5\001\002\000\014\014\134\061" +
    "\150\070\141\071\145\072\142\001\002\000\014\014\134" +
    "\061\150\070\141\071\145\072\142\001\002\000\014\014" +
    "\134\061\150\070\141\071\145\072\142\001\002\000\054" +
    "\003\uffea\013\uffea\014\uffea\015\uffea\016\uffea\017\uffea\020" +
    "\uffea\022\uffea\023\uffea\024\uffea\025\uffea\026\uffea\030\uffea" +
    "\031\uffea\044\uffea\045\uffea\051\uffea\053\uffea\062\uffea\063" +
    "\uffea\064\uffea\001\002\000\054\003\uffe9\013\uffe9\014\uffe9" +
    "\015\uffe9\016\uffe9\017\uffe9\020\uffe9\022\uffe9\023\uffe9\024" +
    "\uffe9\025\uffe9\026\uffe9\030\uffe9\031\uffe9\044\uffe9\045\uffe9" +
    "\051\uffe9\053\uffe9\062\uffe9\063\uffe9\064\uffe9\001\002\000" +
    "\054\003\uffeb\013\uffeb\014\uffeb\015\165\016\164\017\161" +
    "\020\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb\030" +
    "\uffeb\031\uffeb\044\uffeb\045\uffeb\051\uffeb\053\uffeb\062\uffeb" +
    "\063\uffeb\064\uffeb\001\002\000\054\003\uffe8\013\uffe8\014" +
    "\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8\022\uffe8\023\uffe8" +
    "\024\uffe8\025\uffe8\026\uffe8\030\uffe8\031\uffe8\044\uffe8\045" +
    "\uffe8\051\uffe8\053\uffe8\062\uffe8\063\uffe8\064\uffe8\001\002" +
    "\000\054\003\uffec\013\uffec\014\uffec\015\165\016\164\017" +
    "\161\020\uffec\022\uffec\023\uffec\024\uffec\025\uffec\026\uffec" +
    "\030\uffec\031\uffec\044\uffec\045\uffec\051\uffec\053\uffec\062" +
    "\uffec\063\uffec\064\uffec\001\002\000\016\005\153\014\134" +
    "\061\150\070\141\071\145\072\142\001\002\000\004\062" +
    "\175\001\002\000\014\030\uffcf\031\uffcf\051\uffcf\053\uffcf" +
    "\063\uffcf\001\002\000\016\005\153\014\134\061\150\070" +
    "\141\071\145\072\142\001\002\000\016\005\153\014\134" +
    "\061\150\070\141\071\145\072\142\001\002\000\016\005" +
    "\153\014\134\061\150\070\141\071\145\072\142\001\002" +
    "\000\016\005\153\014\134\061\150\070\141\071\145\072" +
    "\142\001\002\000\016\005\153\014\134\061\150\070\141" +
    "\071\145\072\142\001\002\000\016\005\153\014\134\061" +
    "\150\070\141\071\145\072\142\001\002\000\016\030\uffdb" +
    "\031\uffdb\051\uffdb\053\uffdb\062\uffdb\063\uffdb\001\002\000" +
    "\016\030\uffdc\031\uffdc\051\uffdc\053\uffdc\062\uffdc\063\uffdc" +
    "\001\002\000\016\030\uffdd\031\uffdd\051\uffdd\053\uffdd\062" +
    "\uffdd\063\uffdd\001\002\000\016\030\uffde\031\uffde\051\uffde" +
    "\053\uffde\062\uffde\063\uffde\001\002\000\016\030\uffdf\031" +
    "\uffdf\051\uffdf\053\uffdf\062\uffdf\063\uffdf\001\002\000\016" +
    "\030\uffe0\031\uffe0\051\uffe0\053\uffe0\062\uffe0\063\uffe0\001" +
    "\002\000\010\051\uffd7\053\uffd7\063\uffd7\001\002\000\020" +
    "\003\216\014\134\061\150\062\uff7c\070\141\071\145\072" +
    "\142\001\002\000\004\062\226\001\002\000\022\003\221" +
    "\013\160\014\163\015\165\016\164\017\161\062\uff7d\064" +
    "\217\001\002\000\004\062\uff7e\001\002\000\014\014\134" +
    "\061\150\070\141\071\145\072\142\001\002\000\006\062" +
    "\uff7f\064\223\001\002\000\006\003\221\064\217\001\002" +
    "\000\006\062\uff79\064\223\001\002\000\014\014\134\061" +
    "\150\070\141\071\145\072\142\001\002\000\020\013\160" +
    "\014\163\015\165\016\164\017\161\062\uff7a\064\uff7a\001" +
    "\002\000\020\013\160\014\163\015\165\016\164\017\161" +
    "\062\uff7b\064\uff7b\001\002\000\056\003\uff80\013\uff80\014" +
    "\uff80\015\uff80\016\uff80\017\uff80\020\uff80\022\uff80\023\uff80" +
    "\024\uff80\025\uff80\026\uff80\030\uff80\031\uff80\032\uff80\044" +
    "\uff80\045\uff80\051\uff80\053\uff80\062\uff80\063\uff80\064\uff80" +
    "\001\002\000\022\003\232\005\153\014\134\027\147\061" +
    "\150\070\141\071\145\072\142\001\002\000\022\003\uffd5" +
    "\005\uffd5\014\uffd5\027\uffd5\061\uffd5\070\uffd5\071\uffd5\072" +
    "\uffd5\001\002\000\012\031\230\051\uffd4\053\uffd4\063\uffd4" +
    "\001\002\000\012\031\uffd2\051\uffd2\053\uffd2\063\uffd2\001" +
    "\002\000\054\003\uffe7\013\uffe7\014\uffe7\015\uffe7\016\uffe7" +
    "\017\uffe7\020\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7\026" +
    "\uffe7\030\uffe7\031\uffe7\044\uffe7\045\uffe7\051\uffe7\053\uffe7" +
    "\062\uffe7\063\uffe7\064\uffe7\001\002\000\040\003\uffb0\006" +
    "\uffb0\007\uffb0\034\uffb0\037\uffb0\040\uffb0\041\uffb0\046\uffb0" +
    "\050\uffb0\054\uffb0\063\052\065\uffb0\066\uffb0\067\uffb0\072" +
    "\uffb0\001\002\000\006\053\uffb6\063\uffb6\001\002\000\004" +
    "\036\237\001\002\000\004\040\240\001\002\000\006\053" +
    "\uffaf\063\uffaf\001\002\000\040\003\103\006\055\007\104" +
    "\034\100\037\102\040\113\041\120\046\064\050\074\054" +
    "\073\063\051\065\115\066\065\067\110\072\076\001\002" +
    "\000\040\003\103\006\055\007\104\034\100\037\102\040" +
    "\113\041\120\046\064\050\074\054\073\063\052\065\115" +
    "\066\065\067\110\072\076\001\002\000\010\036\uff9f\052" +
    "\uff9f\053\uff9f\001\002\000\040\003\103\006\055\007\104" +
    "\034\100\037\102\040\113\041\120\046\064\050\074\054" +
    "\073\063\052\065\115\066\065\067\110\072\076\001\002" +
    "\000\006\053\uffa3\063\uffa3\001\002\000\010\036\uffa0\052" +
    "\uffa0\053\uffa0\001\002\000\016\003\252\004\250\061\150" +
    "\070\141\071\145\072\142\001\002\000\010\013\uffcb\032" +
    "\uffcb\062\uffcb\001\002\000\010\013\uffca\032\uffca\062\uffca" +
    "\001\002\000\010\013\uffc9\032\uffc9\062\uffc9\001\002\000" +
    "\010\013\255\032\254\062\256\001\002\000\016\003\252" +
    "\004\250\061\150\070\141\071\145\072\142\001\002\000" +
    "\016\003\252\004\250\061\150\070\141\071\145\072\142" +
    "\001\002\000\006\053\uffc7\063\uffc7\001\002\000\010\013" +
    "\uffcd\032\uffcd\062\uffcd\001\002\000\010\013\uffcc\032\uffcc" +
    "\062\uffcc\001\002\000\006\053\uff6c\063\052\001\002\000" +
    "\006\040\263\050\264\001\002\000\006\053\uff6a\063\uff6a" +
    "\001\002\000\006\053\uff6b\063\uff6b\001\002\000\006\053" +
    "\ufff3\063\ufff3\001\002\000\020\013\160\014\163\015\165" +
    "\016\164\017\161\053\ufff1\063\ufff1\001\002\000\006\053" +
    "\ufff2\063\ufff2\001\002\000\012\003\300\020\301\035\277" +
    "\064\276\001\002\000\010\035\uffc1\053\uffbc\063\uffbc\001" +
    "\002\000\004\035\274\001\002\000\006\053\uffc3\063\uffc3" +
    "\001\002\000\012\003\034\010\033\011\036\012\037\001" +
    "\002\000\006\053\uffc6\063\uffc6\001\002\000\004\072\317" +
    "\001\002\000\012\003\034\010\033\011\036\012\037\001" +
    "\002\000\004\064\312\001\002\000\026\003\310\005\267" +
    "\014\134\061\150\065\115\066\065\067\110\070\141\071" +
    "\145\072\142\001\002\000\006\035\uffc2\064\303\001\002" +
    "\000\004\072\304\001\002\000\006\035\uffbf\064\uffbf\001" +
    "\002\000\006\053\uffbb\063\uffbb\001\002\000\006\053\uffba" +
    "\063\uffba\001\002\000\006\053\uffbd\063\uffbd\001\002\000" +
    "\004\063\311\001\002\000\006\053\uffb9\063\uffb9\001\002" +
    "\000\004\072\313\001\002\000\006\035\uffbe\064\uffbe\001" +
    "\002\000\010\020\315\053\uffc5\063\uffc5\001\002\000\026" +
    "\003\310\005\267\014\134\061\150\065\115\066\065\067" +
    "\110\070\141\071\145\072\142\001\002\000\006\053\uffc4" +
    "\063\uffc4\001\002\000\006\035\uffc0\064\uffc0\001\002\000" +
    "\004\057\321\001\002\000\006\002\uff8a\063\uff8a\001\002" +
    "\000\006\051\uff9c\063\uff9c\001\002\000\014\014\134\061" +
    "\150\070\141\071\145\072\142\001\002\000\016\013\160" +
    "\014\163\015\165\016\164\017\161\063\051\001\002\000" +
    "\006\055\uff94\063\052\001\002\000\004\047\327\001\002" +
    "\000\004\072\330\001\002\000\006\053\uffa9\063\uffa9\001" +
    "\002\000\006\053\uffb7\063\uffb7\001\002\000\006\020\343" +
    "\035\342\001\002\000\004\044\334\001\002\000\014\014" +
    "\134\061\150\070\141\071\145\072\142\001\002\000\020" +
    "\013\160\014\163\015\165\016\164\017\161\045\336\063" +
    "\uffa7\001\002\000\014\014\134\061\150\070\141\071\145" +
    "\072\142\001\002\000\004\063\051\001\002\000\040\003" +
    "\uffaa\006\uffaa\007\uffaa\034\uffaa\037\uffaa\040\uffaa\041\uffaa" +
    "\046\uffaa\050\uffaa\054\uffaa\063\052\065\uffaa\066\uffaa\067" +
    "\uffaa\072\uffaa\001\002\000\016\013\160\014\163\015\165" +
    "\016\164\017\161\063\uffa8\001\002\000\012\003\034\010" +
    "\033\011\036\012\037\001\002\000\014\014\134\061\150" +
    "\070\141\071\145\072\142\001\002\000\016\013\160\014" +
    "\163\015\165\016\164\017\161\044\uffa6\001\002\000\004" +
    "\020\346\001\002\000\014\014\134\061\150\070\141\071" +
    "\145\072\142\001\002\000\016\013\160\014\163\015\165" +
    "\016\164\017\161\044\uffa5\001\002\000\004\043\351\001" +
    "\002\000\006\040\352\042\354\001\002\000\022\003\uffab" +
    "\005\uffab\014\uffab\027\uffab\061\uffab\070\uffab\071\uffab\072" +
    "\uffab\001\002\000\022\003\143\005\153\014\134\027\147" +
    "\061\150\070\141\071\145\072\142\001\002\000\022\003" +
    "\uffac\005\uffac\014\uffac\027\uffac\061\uffac\070\uffac\071\uffac" +
    "\072\uffac\001\002\000\006\053\uffad\063\uffad\001\002\000" +
    "\022\003\143\005\153\014\134\027\147\061\150\070\141" +
    "\071\145\072\142\001\002\000\010\036\uff95\052\356\053" +
    "\uff95\001\002\000\006\036\372\053\371\001\002\000\006" +
    "\051\362\063\051\001\002\000\004\063\051\001\002\000" +
    "\040\003\103\006\055\007\104\034\100\037\102\040\113" +
    "\041\120\046\064\050\074\054\073\063\052\065\115\066" +
    "\065\067\110\072\076\001\002\000\010\036\uff98\052\uff98" +
    "\053\uff98\001\002\000\040\003\103\006\055\007\104\034" +
    "\100\037\102\040\113\041\120\046\064\050\074\054\073" +
    "\063\052\065\115\066\065\067\110\072\076\001\002\000" +
    "\010\036\uff99\052\uff99\053\uff99\001\002\000\004\063\051" +
    "\001\002\000\004\036\374\001\002\000\040\003\uff9d\006" +
    "\uff9d\007\uff9d\034\uff9d\037\uff9d\040\uff9d\041\uff9d\046\uff9d" +
    "\050\uff9d\054\uff9d\063\uff9d\065\uff9d\066\uff9d\067\uff9d\072" +
    "\uff9d\001\002\000\004\050\373\001\002\000\006\053\uff9a" +
    "\063\uff9a\001\002\000\004\050\375\001\002\000\006\053" +
    "\uff9b\063\uff9b\001\002\000\040\003\103\006\055\007\104" +
    "\034\100\037\102\040\113\041\120\046\064\050\074\054" +
    "\073\063\052\065\115\066\065\067\110\072\076\001\002" +
    "\000\004\036\uff9e\001\002\000\006\036\uff96\053\uff96\001" +
    "\002\000\006\051\uff97\063\uff97\001\002\000\036\003\103" +
    "\006\055\007\104\034\100\037\102\040\113\041\120\046" +
    "\064\050\074\054\073\065\115\066\065\067\110\072\076" +
    "\001\002\000\006\036\u010a\055\u010c\001\002\000\006\036" +
    "\uff8f\055\uff8f\001\002\000\014\014\134\061\150\070\141" +
    "\071\145\072\142\001\002\000\004\063\051\001\002\000" +
    "\016\013\160\014\163\015\165\016\164\017\161\063\uff8c" +
    "\001\002\000\040\003\uff8e\006\uff8e\007\uff8e\034\uff8e\037" +
    "\uff8e\040\uff8e\041\uff8e\046\uff8e\050\uff8e\054\uff8e\063\052" +
    "\065\uff8e\066\uff8e\067\uff8e\072\uff8e\001\002\000\006\036" +
    "\uff90\055\uff90\001\002\000\004\054\u0112\001\002\000\004" +
    "\036\u0110\001\002\000\016\014\134\053\u010d\061\150\070" +
    "\141\071\145\072\142\001\002\000\004\063\051\001\002" +
    "\000\040\003\103\006\055\007\104\034\100\037\102\040" +
    "\113\041\120\046\064\050\074\054\073\063\052\065\115" +
    "\066\065\067\110\072\076\001\002\000\004\036\uff91\001" +
    "\002\000\004\054\u0111\001\002\000\006\053\uff92\063\uff92" +
    "\001\002\000\006\053\uff93\063\uff93\001\002\000\006\036" +
    "\uff8d\055\uff8d\001\002\000\036\003\103\006\055\007\104" +
    "\034\100\037\102\040\113\041\120\046\064\050\074\054" +
    "\073\065\115\066\065\067\110\072\076\001\002\000\006" +
    "\053\uffa4\063\uffa4\001\002\000\006\053\uffa2\063\uffa2\001" +
    "\002\000\016\003\252\004\250\061\150\070\141\071\145" +
    "\072\142\001\002\000\010\013\255\032\254\062\u0119\001" +
    "\002\000\006\053\uffc8\063\uffc8\001\002\000\004\036\u011b" +
    "\001\002\000\004\060\u011c\001\002\000\006\002\uff88\063" +
    "\uff88\001\002\000\006\002\ufffb\063\ufffb\001\002\000\004" +
    "\057\u011f\001\002\000\006\002\ufffa\063\ufffa\001\002\000" +
    "\004\061\u0121\001\002\000\012\003\023\033\024\062\uff86" +
    "\072\021\001\002\000\004\062\u0123\001\002\000\004\063" +
    "\051\001\002\000\040\003\uff89\006\uff89\007\uff89\034\uff89" +
    "\037\uff89\040\uff89\041\uff89\046\uff89\050\uff89\054\uff89\063" +
    "\052\065\uff89\066\uff89\067\uff89\072\uff89\001\002\000\004" +
    "\002\001\001\002\000\016\002\ufff7\003\012\056\005\057" +
    "\016\060\011\063\052\001\002\000\006\002\ufff8\063\ufff8" +
    "\001\002\000\006\002\ufffd\063\ufffd\001\002\000\006\002" +
    "\ufffc\063\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0127\000\020\002\006\004\013\005\005\067\007\073" +
    "\003\075\012\076\014\001\001\000\002\001\001\000\012" +
    "\067\u0127\073\u0128\075\012\076\014\001\001\000\004\003" +
    "\u0125\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\056\006\115\016\065\017" +
    "\062\020\067\023\100\030\056\031\066\032\105\033\106" +
    "\034\110\036\113\040\071\041\111\044\104\046\070\047" +
    "\057\051\061\053\074\056\055\057\060\064\116\065\u0119" +
    "\001\001\000\002\001\001\000\056\006\115\016\065\017" +
    "\062\020\067\023\100\030\056\031\066\032\105\033\106" +
    "\034\110\036\113\040\071\041\111\044\104\046\070\047" +
    "\057\051\061\053\074\056\055\057\060\064\116\065\076" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\077" +
    "\021\100\024\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\034\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\046\001\001\000\004\003" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\050\u0114\074\u0113\001\001\000\010\015\u0101\061\u0102\062" +
    "\u0103\001\001\000\010\045\360\054\356\055\357\001\001" +
    "\000\056\006\115\016\065\017\062\020\067\023\100\030" +
    "\056\031\066\032\105\033\106\034\110\036\113\040\071" +
    "\041\111\044\104\046\070\047\057\051\061\053\074\056" +
    "\055\057\060\064\116\065\347\001\001\000\004\042\332" +
    "\001\001\000\004\035\330\001\001\000\002\001\001\000" +
    "\056\006\115\016\065\017\062\020\067\023\100\030\056" +
    "\031\066\032\105\033\106\034\110\036\113\040\071\041" +
    "\111\044\104\046\070\047\057\051\061\053\074\056\055" +
    "\057\060\064\116\065\325\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\011\136\012\137\013\145\025\321\040\150\066\134\070" +
    "\135\071\143\072\151\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\021\271\023\272\001" +
    "\001\000\002\001\001\000\012\007\264\011\265\040\150" +
    "\066\134\001\001\000\004\003\260\001\001\000\002\001" +
    "\001\000\004\003\241\001\001\000\002\001\001\000\056" +
    "\006\115\016\065\017\062\020\067\023\100\030\056\031" +
    "\066\032\105\033\106\034\110\036\113\040\071\041\111" +
    "\044\104\046\070\047\057\051\061\053\074\056\055\057" +
    "\060\064\116\065\235\001\001\000\004\035\234\001\001" +
    "\000\024\011\136\012\137\013\145\025\132\040\150\066" +
    "\134\070\135\071\143\072\151\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\035\125\001" +
    "\001\000\002\001\001\000\004\003\121\001\001\000\004" +
    "\003\120\001\001\000\002\001\001\000\056\006\115\016" +
    "\065\017\062\020\067\023\100\030\056\031\066\032\105" +
    "\033\106\034\110\036\113\040\071\041\111\044\104\046" +
    "\070\047\057\051\061\053\074\056\055\057\060\064\116" +
    "\065\122\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\233\001\001\000\006\040\150\066\232\001\001\000\002" +
    "\001\001\000\004\027\226\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\011\156\040\150\066\134" +
    "\001\001\000\002\001\001\000\004\026\154\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\011\136\012\137" +
    "\013\145\040\150\066\134\071\143\072\155\001\001\000" +
    "\004\026\154\001\001\000\002\001\001\000\010\011\171" +
    "\040\150\066\134\001\001\000\010\011\170\040\150\066" +
    "\134\001\001\000\002\001\001\000\010\011\167\040\150" +
    "\066\134\001\001\000\010\011\166\040\150\066\134\001" +
    "\001\000\010\011\165\040\150\066\134\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\011\136\012\173\013\145" +
    "\040\150\066\134\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\011\136\013\210\040\150\066\134\001\001" +
    "\000\012\011\136\013\207\040\150\066\134\001\001\000" +
    "\012\011\136\013\206\040\150\066\134\001\001\000\012" +
    "\011\136\013\205\040\150\066\134\001\001\000\012\011" +
    "\136\013\204\040\150\066\134\001\001\000\012\011\136" +
    "\013\203\040\150\066\134\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\011" +
    "\214\040\150\066\134\101\213\001\001\000\002\001\001" +
    "\000\004\102\217\001\001\000\002\001\001\000\010\011" +
    "\224\040\150\066\134\001\001\000\002\001\001\000\004" +
    "\102\221\001\001\000\002\001\001\000\010\011\223\040" +
    "\150\066\134\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\011\136\012\137\013\145\040" +
    "\150\066\134\070\230\071\143\072\151\001\001\000\002" +
    "\001\001\000\004\027\226\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\056\003" +
    "\243\006\115\016\065\017\062\020\067\023\100\030\056" +
    "\031\066\032\105\033\106\034\110\036\113\040\071\041" +
    "\111\044\104\046\070\047\057\051\061\053\074\056\055" +
    "\057\060\064\244\001\001\000\056\006\115\016\065\017" +
    "\062\020\067\023\100\030\056\031\066\032\105\033\106" +
    "\034\110\036\113\040\071\041\111\044\104\046\070\047" +
    "\057\051\061\053\074\056\055\057\060\064\116\065\242" +
    "\001\001\000\002\001\001\000\056\006\115\016\065\017" +
    "\062\020\067\023\100\030\056\031\066\032\105\033\106" +
    "\034\110\036\113\040\071\041\111\044\104\046\070\047" +
    "\057\051\061\053\074\056\055\057\060\064\116\065\245" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\014" +
    "\252\040\150\066\250\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\014" +
    "\257\040\150\066\250\001\001\000\010\014\256\040\150" +
    "\066\250\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\022\301\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\274\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\313\001\001\000\002\001\001\000\016\007\304\011" +
    "\265\024\306\030\305\040\150\066\134\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\007\304\011\265\024\315\030\305" +
    "\040\150\066\134\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\011\323\040\150\066\134\001\001\000\004\003" +
    "\324\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\011\334\040\150\066\134" +
    "\001\001\000\004\043\336\001\001\000\010\011\340\040" +
    "\150\066\134\001\001\000\004\003\337\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\344\001\001\000" +
    "\010\011\343\040\150\066\134\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\011\346\040\150\066\134\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\037\352" +
    "\001\001\000\002\001\001\000\024\011\136\012\137\013" +
    "\145\025\354\040\150\066\134\070\135\071\143\072\151" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\011" +
    "\136\012\137\013\145\025\u0100\040\150\066\134\070\135" +
    "\071\143\072\151\001\001\000\010\045\360\054\356\055" +
    "\377\001\001\000\006\052\367\074\366\001\001\000\004" +
    "\003\362\001\001\000\004\003\364\001\001\000\056\006" +
    "\115\016\065\017\062\020\067\023\100\030\056\031\066" +
    "\032\105\033\106\034\110\036\113\040\071\041\111\044" +
    "\104\046\070\047\057\051\061\053\074\056\055\057\060" +
    "\064\116\065\363\001\001\000\002\001\001\000\056\006" +
    "\115\016\065\017\062\020\067\023\100\030\056\031\066" +
    "\032\105\033\106\034\110\036\113\040\071\041\111\044" +
    "\104\046\070\047\057\051\061\053\074\056\055\057\060" +
    "\064\116\065\365\001\001\000\002\001\001\000\004\003" +
    "\375\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\056\006\115\016\065\017\062\020\067\023\100" +
    "\030\056\031\066\032\105\033\106\034\110\036\113\040" +
    "\071\041\111\044\104\046\070\047\057\051\061\053\074" +
    "\056\055\057\060\064\116\065\376\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\056\006\115" +
    "\016\065\017\062\020\067\023\100\030\056\031\066\032" +
    "\105\033\106\034\110\036\113\040\071\041\111\044\104" +
    "\046\070\047\057\051\061\053\074\056\055\057\060\064" +
    "\116\065\u0112\001\001\000\010\015\u0101\060\u010a\062\u0108" +
    "\001\001\000\002\001\001\000\012\011\u0106\040\150\063" +
    "\u0105\066\134\001\001\000\004\003\u0107\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\011\u0106\040\150\063\u0105" +
    "\066\134\001\001\000\004\003\u010d\001\001\000\056\006" +
    "\115\016\065\017\062\020\067\023\100\030\056\031\066" +
    "\032\105\033\106\034\110\036\113\040\071\041\111\044" +
    "\104\046\070\047\057\051\061\053\074\056\055\057\060" +
    "\064\116\065\u010e\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\054\006\115\016\065\017\062\020\067\023\100\030" +
    "\056\031\066\032\105\033\106\034\110\036\113\040\071" +
    "\041\111\044\104\046\070\047\057\051\061\053\074\056" +
    "\055\057\060\064\u0115\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\014\u0117\040\150\066\250\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\077\u0121" +
    "\100\024\001\001\000\002\001\001\000\004\003\u0123\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\004\u0126" +
    "\067\007\073\003\075\012\076\014\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoVisualBasic$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoVisualBasic$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoVisualBasic$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public ManejadorSintacticoVB_PY msVB_PY = ManejadorSintacticoVB_PY.getInstacia();
    public ManejadorInstancias mi = ManejadorInstancias.getInstance();
    public ManejadorCuartetos mc = ManejadorCuartetos.getInstancia();
    public ManejadorBuscarMetodos mbm = ManejadorBuscarMetodos.getInstancia();
    public ManejadorTablaPila mtp = ManejadorTablaPila.getInstancia();
    public boolean and = false;
    private FrameCTDOA frameCTDOA;

    public SintacticoVisualBasic(LexicoVisualBasic lexer) { 
        super(lexer);   
        msVB_PY.setContadorLineas(0);
        msVB_PY.nuevoAnalisis();
    }

    public void setFrameCTDOA(FrameCTDOA frameCTDOA) {
        this.frameCTDOA = frameCTDOA;
        this.msVB_PY.setFrameCTDOA(frameCTDOA);
    }

    public void setAccion(String tipo, String mensaje, String accion){
        frameCTDOA.addErrores("ERROR Lexico Tipo: " + tipo + "\t Mensaje: " + mensaje + "\tAcción: ERROR\n");
    }

    @Override
    public void syntax_error(Symbol s){
        try {
            msVB_PY.errorSintax(s.left, s.right, s.value, 
                "Uf, error sintactico cerca de la linea y columna indicada porfavor revisa que el token\n "
                        + "\t\tidicado corresponda a la declaracion de instruccion correspondiente. Vuelve a intentarlo."
            );
        } catch (Exception e) {
            System.out.println("Error " + e.toString());
        }
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SintacticoVisualBasic$actions {
  private final SintacticoVisualBasic parser;

  /** Constructor */
  CUP$SintacticoVisualBasic$actions(SintacticoVisualBasic parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SintacticoVisualBasic$do_action(
    int                        CUP$SintacticoVisualBasic$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoVisualBasic$parser,
    java.util.Stack            CUP$SintacticoVisualBasic$stack,
    int                        CUP$SintacticoVisualBasic$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoVisualBasic$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoVisualBasic$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // estructuras_p ::= estructuras saltos 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		RESULT = e;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("estructuras_p",51, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // estructuras_p ::= estructuras saltos estructuras_p 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = parser.msVB_PY.retornarEstructuras(e, a);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("estructuras_p",51, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // estructuras ::= error END WHILE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		parser.msVB_PY.errorSintax(eleft, eright, e, "Error en el bloque de instrucciones de la estructura, por favor revisa la entrada en la linea y columna indicada.");
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("estructuras",50, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // estructuras ::= error END IF 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		parser.msVB_PY.errorSintax(eleft, eright, e, "Error en el bloque de instrucciones de la estructura, por favor revisa la entrada en la linea y columna indicada.");
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("estructuras",50, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // estructuras ::= error saltos 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		parser.msVB_PY.errorSintax(eleft, eright, e, "Error en el bloque de instrucciones, por favor revisa la entrada en la linea y columna indicada.");
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("estructuras",50, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // estructuras ::= llamada_fp 
            {
              Object RESULT =null;
		
        Object as = null;
        parser.mc.addYRemovePuntero(as, false);
    
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("estructuras",50, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // estructuras ::= return 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = o;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("estructuras",50, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // estructuras ::= switch 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("estructuras",50, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // estructuras ::= if_else_mult 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("estructuras",50, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // estructuras ::= if_linea 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("estructuras",50, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // estructuras ::= for 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("estructuras",50, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // estructuras ::= do_while 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("estructuras",50, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // estructuras ::= while 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("estructuras",50, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // estructuras ::= asignacion_variables 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		parser.msVB_PY.asignacionVariables(e, eleft, eright);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("estructuras",50, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // estructuras ::= declaracion_variables 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("estructuras",50, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // estructuras ::= solicitud_datos 
            {
              Object RESULT =null;

              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("estructuras",50, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // estructuras ::= mensaje_terminal 
            {
              Object RESULT =null;

              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("estructuras",50, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // param_p ::= error param_p 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		 
        RESULT = a;
        parser.msVB_PY.errorSintax(eleft, eright, e, "Error sintactico en la instruccion de llamada a una funcion, no se esperaba el token indicado para el reconocimiento de parametros.");
    
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("param_p",64, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // param_p ::= param_p COMA operaciones_aritmeticas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = parser.msVB_PY.lista(a, e);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("param_p",64, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // param_p ::= COMA operaciones_aritmeticas 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("param_p",64, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // param ::= 
            {
              Object RESULT =null;

              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("param",63, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // param ::= operaciones_aritmeticas 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("param",63, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // param ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		 
        parser.msVB_PY.errorSintax(eleft, eright, e, "Error sintactico en la instruccion de llamada a una funcion, no se esperaba el token indicado para el reconocimiento de parametros.");
    
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("param",63, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // param ::= operaciones_aritmeticas param_p 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		
        List<Simbolo> lista = new ArrayList<>();
        if (e != null) {
            lista.add((Simbolo) e);
        }
        if(a instanceof Simbolo) {
            lista.add((Simbolo) a);
        } else {
            lista.addAll((List<Simbolo>) a);
        }
        RESULT = lista;
    
    
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("param",63, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // llamada_fp ::= ID PARENTESIS_A param PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		RESULT = parser.mbm.buscarMetodo("VB_", a, e, aleft, aright, 1, false);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("llamada_fp",30, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // parametros_p ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		 
        RESULT = new ArrayList<>();
        parser.msVB_PY.errorSintax(eleft, eright, e, "Error sintactico en la instruccion de parametros, no se esperaba el token indicado.");
    
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("parametros_p",62, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // parametros_p ::= parametros_p COMA BYVAL ID AS tipo_dato 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		
        Simbolo s = parser.msVB_PY.declaraUnaVariableParametro((Tipo) e, i, ileft, iright);
        List<Simbolo> lista = new ArrayList<>();
        if(a != null) {
            if(a instanceof Simbolo) {
                lista.add((Simbolo) a);
            } else {
                lista = ((List<Simbolo>) a);
            }
        }   
        if (s != null) {
            lista.add(s);
        } RESULT = lista;
    
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("parametros_p",62, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // parametros_p ::= BYVAL ID AS tipo_dato 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = parser.msVB_PY.declaraUnaVariableParametro((Tipo) e, a, eleft, eright);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("parametros_p",62, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // parametros_p ::= parametros_p COMA ID AS tipo_dato 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		
        Simbolo s = parser.msVB_PY.declaraUnaVariableParametro((Tipo) e, i, ileft, iright);
        List<Simbolo> lista = new ArrayList<>();
        if(a != null) {
            if(a instanceof Simbolo) {
                lista.add((Simbolo) a);
            } else {
                lista = ((List<Simbolo>) a);
            }
        }   
        if (s != null) {
            lista.add(s);
        } RESULT = lista;
    
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("parametros_p",62, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // parametros_p ::= ID AS tipo_dato 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = parser.msVB_PY.declaraUnaVariableParametro((Tipo) e, a, eleft, eright);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("parametros_p",62, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // parametros ::= 
            {
              Object RESULT =null;
		RESULT = new ArrayList<>();
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("parametros",61, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // parametros ::= parametros_p 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("parametros",61, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // sub ::= sub_s estructuras_p END SUB 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		
    RESULT = parser.msVB_PY.metodos(((Procedimiento) e).getE(), a, ((Procedimiento) e).getU(), eleft, eright); 
    parser.mc.finProcedimiento(false, false);
    
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("sub",57, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // sub_s ::= SUB ID PARENTESIS_A parametros PARENTESIS_C saltos 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		
        parser.mc.addCuartetoProcedimiento(2, i, "VB", e, null);
        RESULT = new Procedimiento(i, e);
    
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("sub_s",59, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // function ::= function_s estructuras_p END FUNCTION 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		
    RESULT = parser.msVB_PY.funcion(((Procedimiento) e).getE(), ((Procedimiento) e).getA(), i, ((Procedimiento) e).getObject(), ((Procedimiento) e).getU(), ileft, iright); 
    parser.mc.finProcedimiento(false, true);
    
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("function",53, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // function_s ::= FUNCTION ID PARENTESIS_A parametros PARENTESIS_C AS tipo_dato saltos 
            {
              Object RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-6)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-6)).right;
		String u = (String)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		
        parser.mc.addCuartetoProcedimiento(2, u, "VB", e, (Tipo) a); 
        Simbolo  s = new Simbolo((Tipo) a, null, u);
        Funcion f = new Funcion();
        f.setParametros(e);
        s.setValor(f);
        s.setTipo(new Tipo("Funcion", Constantes.FUNCION));
        s.setTipoFuncion((Tipo) a);
        RESULT = new Procedimiento(u, e, (Tipo) a, 
        parser.msVB_PY.declaraUnaVariable(s, aleft, aright));
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("function_s",60, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // casos ::= operaciones_aritmeticas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = a;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("casos",49, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // caso ::= case_p estructuras_p 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		
        RESULT = parser.msVB_PY.crearEstructuraCases(a, e, aleft, aright, false);
        parser.mc.finCadaCaso();
    
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("caso",48, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // case_p ::= CASE casos saltos 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		parser.mc.condicional((Simbolo) a); RESULT = a;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("case_p",11, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // cantidad_casos ::= caso 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("cantidad_casos",47, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // cantidad_casos ::= cantidad_casos caso 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		
        if(a != null) {
            if(a instanceof Simbolo) {
                List<Simbolo> agregar = new ArrayList<>();  
                agregar.add((Simbolo) a);
                if(e != null) {
                    agregar.add((Simbolo) e);
                } RESULT = agregar;
            } else {
                ((List<Simbolo>) a).add(((Simbolo) e));
            }
        } else {
            if(e != null) {
                List<Simbolo> agregar = new ArrayList<>();  
                agregar.add((Simbolo) e);
                RESULT = agregar;
            }
        }
    
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("cantidad_casos",47, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // caso_else ::= CASE ELSE saltos estructuras_p 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		
        parser.mc.etiquetaGoto();
        RESULT = parser.msVB_PY.crearEstructuraCases(null, a, aleft, aright, true);
    
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("caso_else",46, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // switch ::= switch_p cantidad_casos caso_else END SELECT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		
        RESULT = parser.msVB_PY.crearCase(e, i, a, eleft, eright);
        parser.mc.etqFinTurno();
    
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("switch",44, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // switch ::= switch_p cantidad_casos END SELECT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		
        RESULT = parser.msVB_PY.crearCase(e, null, a, eleft, eright);
        parser.mc.etqFinTurno();
    
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("switch",44, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // switch_p ::= SELECT CASE operaciones_aritmeticas saltos 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		parser.mc.setEtiquetaSwitch((Simbolo) a); RESULT = a;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("switch_p",45, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // else_if_p ::= 
            {
              Object RESULT =null;
		RESULT = null;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("else_if_p",43, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // else_if_p ::= elseif else_if_p 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		
        List<Simbolo> listaSimbolos = new ArrayList<>();
        if(a != null) {
            if(a instanceof Simbolo) {
                listaSimbolos.add((Simbolo) a);
            } else {
                listaSimbolos = (List<Simbolo>) a;
            }
        }
        if(e != null) {
            listaSimbolos.add((Simbolo) e);
        }
        RESULT = listaSimbolos;
    
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("else_if_p",43, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ie ::= ELSEIF condicional 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		parser.mc.escribirEtiquetasInicio(false); parser.mc.escribirEtiquetaFin(); parser.mc.nuevoAnalisisBoolean(); RESULT = e;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("ie",35, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // elseif ::= ie saltos estructuras_p 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = parser.msVB_PY.crearEstructuraCondicional(a, e, 2); parser.mc.imprimirResto();
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("elseif",42, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // elseif ::= ie THEN saltos estructuras_p 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = parser.msVB_PY.crearEstructuraCondicional(a, e, 2); parser.mc.imprimirResto();
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("elseif",42, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // if_else_mult ::= if_m else_if_p END IF 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		RESULT = parser.msVB_PY.construirCondicionalIf(a, e, null);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("if_else_mult",41, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // if_else_mult ::= if_m else_if_p else_m END IF 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		RESULT = parser.msVB_PY.construirCondicionalIf(a, e, i);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("if_else_mult",41, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ii ::= IF condicional 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		parser.mc.escribirEtiquetasInicio(false); parser.mc.escribirEtiquetaFin(); parser.mc.nuevoAnalisisBoolean(); RESULT = e;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("ii",34, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ee ::= ELSE 
            {
              Object RESULT =null;
		parser.mc.escribirEtiquetasInicio(false); parser.mc.escribirEtiquetaFin(); parser.mc.nuevoAnalisisBoolean();
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("ee",58, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // else_m ::= ee saltos estructuras_p 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = parser.msVB_PY.crearEstructuraCondicional(a, false, 3); parser.mc.imprimirResto();
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("else_m",40, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // if_m ::= ii saltos estructuras_p 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = parser.msVB_PY.crearEstructuraCondicional(a, e, 1); parser.mc.imprimirResto();
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("if_m",39, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // if_m ::= ii THEN saltos estructuras_p 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = parser.msVB_PY.crearEstructuraCondicional(a, e, 1); parser.mc.imprimirResto();
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("if_m",39, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // if_linea_p ::= 
            {
              Object RESULT =null;
		RESULT = null;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("if_linea_p",38, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // if_linea_p ::= ee estructuras 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = parser.msVB_PY.crearEstructuraCondicional(a, false, 3); parser.mc.imprimirResto();
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("if_linea_p",38, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // if_line ::= ii THEN estructuras 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = parser.msVB_PY.crearEstructuraCondicional(e, a, 1); parser.mc.imprimirResto();
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("if_line",37, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // if_linea ::= if_line if_linea_p 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = parser.msVB_PY.construirCondicionalIf(a, null, e);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("if_linea",36, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // var ::= ID AS tipo_dato IGUAL operaciones_aritmeticas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = parser.msVB_PY.comprobarAsignacionFor(i, a, aleft, aright, (Tipo) e);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("var",32, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // var ::= ID IGUAL operaciones_aritmeticas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = parser.msVB_PY.comprobarAsignacionFor(i, a, aleft, aright, null);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("var",32, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // step ::= 
            {
              Object RESULT =null;
		RESULT = null;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("step",33, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // step ::= STEP operaciones_aritmeticas 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = new Simbolo(null, i);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("step",33, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // for ::= for_p estructuras_p NEXT ID 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		String u = (String)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		
        if(((For) x).getA() != null && ((For) x).getE() != null && ((For) x).getI() != null) {
            if(parser.msVB_PY.comprobarIdFor(((For) x).getA(), u.toString(), uleft, uright)) {
                RESULT = parser.msVB_PY.contruirEstructuraCiloDW(o, true, 3);
            } else  {   
                RESULT = parser.msVB_PY.contruirEstructuraCiloDW(o, null, 3);
            } 
        } else {
            RESULT = parser.msVB_PY.contruirEstructuraCiloDW(o, null, 3);
        } 
        parser.mc.finFor(((For) x).getLista());
        parser.mc.imprimirResto();
        parser.msVB_PY.removerCualquierSimbolo(((For) x).getA());
    
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("for",31, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // for_p ::= FOR var TO operaciones_aritmeticas step saltos 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		RESULT = new For(a, e, i, parser.mc.addFor((Simbolo) a, (Simbolo) e, (Simbolo) i));
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("for_p",23, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // until_while ::= WHILE 
            {
              Object RESULT =null;

              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("until_while",29, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // until_while ::= UNTIL 
            {
              Object RESULT =null;

              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("until_while",29, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // do_while ::= do_while_p estructuras_p LOOP until_while condicional 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		
        RESULT = parser.msVB_PY.contruirEstructuraCiloDW(e, a, 2);
        parser.mc.escribirEtiquetasInicio(false);
        parser.mc.escribirEtiquetaFin();
        parser.mc.finDoWhile((String) i);
        parser.mc.imprimirResto();
    
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("do_while",28, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // do_while_p ::= DO saltos 
            {
              Object RESULT =null;
		
        RESULT = parser.mc.addDoWhile();
        parser.mc.nuevoAnalisisBoolean();
    
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("do_while_p",13, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // while ::= while_p estructuras_p END WHILE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		
        RESULT = parser.msVB_PY.contruirEstructuraCiloDW(e, ((While) a).getA(), 1);
        parser.mc.finWhile(((While) a).getIdEtiqueta());
        parser.mc.imprimirResto();
    
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("while",24, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // while_p ::= while_n condicional saltos 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		 
        parser.mc.nuevoAnalisisBoolean();
        parser.mc.escribirEtiquetasInicio(false);
        parser.mc.addEtiquetasEstructuras();
        ((While) w).setA(a); 
        RESULT = w;
    
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("while_p",25, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // while_n ::= WHILE 
            {
              Object RESULT =null;
		RESULT = new While(parser.mc.addWhile(), null);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("while_n",26, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // p_parentesis ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		parser.msVB_PY.errorSintax(eleft, eright, e, "Error sintactico en la instruccion de solicitud de datos, no se esperaba una cadena.");
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("p_parentesis",27, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // p_parentesis ::= error PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		parser.msVB_PY.errorSintax(eleft, eright, e, "Error sintactico en la instruccion de solicitud de datos, no se esperaba una cadena.");
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("p_parentesis",27, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // p_parentesis ::= PARENTESIS_A PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("p_parentesis",27, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // p_parentesis ::= PARENTESIS_A CADENA PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		parser.mc.imprimir(new Simbolo(null, e ));
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("p_parentesis",27, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // solicitud_datos ::= CINPUT p_parentesis 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		RESULT = new Simbolo(Constantes.CHAR_VAR_VB_PY, '\b', 2);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("solicitud_datos",22, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // solicitud_datos ::= FINPUT p_parentesis 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		RESULT = new Simbolo(Constantes.FLOAT_VAR_VB_PY, 0, 3);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("solicitud_datos",22, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // solicitud_datos ::= IINPUT p_parentesis 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		RESULT = new Simbolo(Constantes.INT_VAR_VB_PY, 0, 1);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("solicitud_datos",22, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // asignacion ::= error SALTO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		parser.msVB_PY.errorSintax(eleft, eright, e, "Error sintactico en los datos a asignar, no se esperaba el token indicado.");
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("asignacion",18, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // asignacion ::= solicitud_datos 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("asignacion",18, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // asignacion ::= return_dato 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("asignacion",18, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // asignacion_variables ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		 parser.msVB_PY.errorSintax(eleft, eright, e, "Error sintactico en la asignacion de variables, no se esperaba el token indicado.");
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("asignacion_variables",17, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // asignacion_variables ::= ID IGUAL asignacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		
        if(e != null) {
            RESULT = new Simbolo(((Simbolo) e).getTipo(), ((Simbolo) e), a);
        } else { 
            RESULT = e;
        }
    
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("asignacion_variables",17, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // lista_id_p ::= error COMA ID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		 
        parser.msVB_PY.errorSintax(eleft, eright, e, "Error sintactico en la declaracion de variables, se esperaba una coma, no el token indicado.");
        RESULT = new Simbolo(null, null, a);
    
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("lista_id_p",16, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // lista_id_p ::= lista_id_p COMA ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		
        List<Simbolo> listaSimbolos = new ArrayList<>();
        if(a != null) {
            if(a instanceof Simbolo) {
                listaSimbolos.add((Simbolo) a);
            } else {
                    listaSimbolos = (List<Simbolo>) a;
            }
        }
        if (e != null) {
            listaSimbolos.add(new Simbolo(null, null, e));
        }
        RESULT = listaSimbolos;
    
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("lista_id_p",16, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // lista_id_p ::= COMA ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = new Simbolo(null, null, a);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("lista_id_p",16, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // lista_ids ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		
        parser.msVB_PY.errorSintax(eleft, eright, e, "Error sintactico en la declaracion de variables, se esperaba una coma, no el token indicado.");
        RESULT = new ArrayList<>();
    
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("lista_ids",15, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // lista_ids ::= ID lista_id_p 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		
        List<Simbolo> listaSimbolos = new ArrayList<>();
        if(a != null) {
            if(a instanceof Simbolo) {
                listaSimbolos.add((Simbolo) a);
            } else {
                    listaSimbolos = (List<Simbolo>) a;
            }
        }
        if (e != null) {
            listaSimbolos.add(new Simbolo(null, null, e));
        }
        RESULT = listaSimbolos;
    
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("lista_ids",15, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // declaracion_variables ::= DIM asignacion_variables 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = parser.msVB_PY.declaraUnaVariable(a, aleft, aright);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("declaracion_variables",14, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // declaracion_variables ::= DIM ID AS tipo_dato IGUAL asignacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = parser.msVB_PY.declaraUnaVariableAsignacion((Tipo) e, i, a, aleft, aright);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("declaracion_variables",14, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // declaracion_variables ::= DIM ID AS tipo_dato 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = parser.msVB_PY.declaraUnaVariable(new Simbolo((Tipo) e, null, a), aleft, aright);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("declaracion_variables",14, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // declaracion_variables ::= DIM lista_ids AS tipo_dato 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = parser.msVB_PY.declararVariasVariables((List<Simbolo>) e, (Tipo) a, eleft, eright);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("declaracion_variables",14, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // mensaje_terminal ::= CONSOLA_LINEA PARENTESIS_A concatenacion PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		parser.mc.imprimirNuevaLinea(); RESULT = e;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("mensaje_terminal",12, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // mensaje_terminal ::= CONSOLA PARENTESIS_A concatenacion PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		RESULT = e;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("mensaje_terminal",12, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // concatenacion ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		parser.msVB_PY.errorSintax(eleft, eright, e, "Error sintactico en la concatenacion de cadenas, de la instruccion Console.Write.");
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("concatenacion",10, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // concatenacion ::= estruct 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		parser.mc.imprimirPrintf(0, (Simbolo) e); RESULT = e;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("concatenacion",10, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // concatenacion ::= CADENA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		parser.mc.imprimir(new Simbolo(null, "\"" + e + "\"")); RESULT = e;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("concatenacion",10, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // concatenacion ::= concatenacion AMPERSAND concatenacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		parser.msVB_PY.concatencacion(a, e);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("concatenacion",10, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // concatenacion ::= concatenacion MAS concatenacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		parser.msVB_PY.concatencacion(a, e);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("concatenacion",10, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // condicional_not ::= operaciones_logicas 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		parser.mc.gotoEscribir(); RESULT = e;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("condicional_not",55, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // condicional_not ::= NOT PARENTESIS_A operaciones_logicas PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		parser.mc.gotoEscribir(); RESULT = parser.msVB_PY.comprobacionCondicional(a, true, 3, aleft, aright);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("condicional_not",55, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // condicional_and ::= condicional_not 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = a;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("condicional_and",56, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // condicional_and ::= condicional_and and condicional_and 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = parser.msVB_PY.comprobacionCondicional(a, e, 1, cleft, cright);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("condicional_and",56, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // condicional_or ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		parser.msVB_PY.errorSintax(eleft, eright, e, "Error sintactico en las operacionaciones logicas, de la intruccion condicional.");
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("condicional_or",54, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // condicional_or ::= condicional_and 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = a;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("condicional_or",54, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // condicional_or ::= condicional_or or condicional_or 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = parser.msVB_PY.comprobacionCondicional(a, e, 2, cleft, cright);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("condicional_or",54, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // or ::= OR 
            {
              Object RESULT =null;
		parser.mc.or(); parser.mc.condicionalOR(); if (!parser.mc.ultimoAgregadorEtiqueta()) {parser.mc.escribirEtiqueta();}
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("or",21, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // and ::= AND 
            {
              Object RESULT =null;
		parser.mc.and(); parser.mc.condicionalAND(); parser.mc.escribirEtiqueta();
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("and",20, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // condicional ::= error SALTO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		
        parser.mc.nuevoAnalisisBoolean();  
        parser.msVB_PY.errorSintax(eleft, eright, e, "Error sintactico en las operacionaciones logicas, de la intruccion condicional.");
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("condicional",19, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // condicional ::= condicional_or 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		parser.mc.nuevoAnalisisBoolean(); RESULT = e;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("condicional",19, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // tipos_comparacion ::= CARACTER 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = new Simbolo(Constantes.CHAR_VAR_VB_PY, e);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("tipos_comparacion",9, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // tipos_comparacion ::= operaciones_aritmeticas 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("tipos_comparacion",9, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // operaciones_logicas ::= tipos_comparacion MAYOR_IGUAL tipos_comparacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = parser.msVB_PY.comprobarOperacionesLogicas(a, e, 6, cleft, cright);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",8, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // operaciones_logicas ::= tipos_comparacion MAYOR tipos_comparacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = parser.msVB_PY.comprobarOperacionesLogicas(a, e, 5, cleft, cright);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",8, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // operaciones_logicas ::= tipos_comparacion MENOR_IGUAL tipos_comparacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = parser.msVB_PY.comprobarOperacionesLogicas(a, e, 4, cleft, cright);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",8, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // operaciones_logicas ::= tipos_comparacion MENOR tipos_comparacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = parser.msVB_PY.comprobarOperacionesLogicas(a, e, 3, cleft, cright);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",8, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // operaciones_logicas ::= tipos_comparacion DISTINTO tipos_comparacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = parser.msVB_PY.comprobarOperacionesLogicas(a, e, 2, cleft, cright);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",8, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // operaciones_logicas ::= tipos_comparacion IGUAL tipos_comparacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = parser.msVB_PY.comprobarOperacionesLogicas(a, e, 1, cleft, cright);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",8, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // estruct ::= llamada_fp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		
        if(a != null) {
            Tipo tipo = ((Simbolo) a).getTipoFuncion();
            if(tipo != null && tipo.getNombre().equals("Funcion")) {
                RESULT = a;
            } else {
                parser.msVB_PY.errorSemantico(aleft, aright, "Asignacion", "Error, los metodos no pueden asignarse.");
                RESULT = null;
            }
        }
    
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("estruct",52, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // estruct ::= REAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		float e = (float)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = new Simbolo(Constantes.FLOAT_VAR_VB_PY, e);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("estruct",52, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // estruct ::= NUMERO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = new Simbolo(Constantes.INT_VAR_VB_PY, e);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("estruct",52, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // estruct ::= ID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = parser.msVB_PY.metodoBuscarID(e.toString(), eleft, eright);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("estruct",52, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // estruct ::= PARENTESIS_A operaciones_aritmeticas PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		RESULT = e;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("estruct",52, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // operaciones_aritmeticas ::= estruct 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("operaciones_aritmeticas",7, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // operaciones_aritmeticas ::= MENOS estruct 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = parser.msVB_PY.modificarVariables(e, eleft, eright);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("operaciones_aritmeticas",7, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // operaciones_aritmeticas ::= operaciones_aritmeticas MODULO operaciones_aritmeticas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = parser.msVB_PY.realizarOperaciones(a, e, aleft, aright, eleft, eright, 5);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("operaciones_aritmeticas",7, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // operaciones_aritmeticas ::= operaciones_aritmeticas DIV operaciones_aritmeticas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = parser.msVB_PY.realizarOperaciones(a, e, aleft, aright, eleft, eright, 4);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("operaciones_aritmeticas",7, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // operaciones_aritmeticas ::= operaciones_aritmeticas POR operaciones_aritmeticas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = parser.msVB_PY.realizarOperaciones(a, e, aleft, aright, eleft, eright, 3);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("operaciones_aritmeticas",7, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // operaciones_aritmeticas ::= operaciones_aritmeticas MENOS operaciones_aritmeticas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = parser.msVB_PY.realizarOperaciones(a, e, aleft, aright, eleft, eright, 2);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("operaciones_aritmeticas",7, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // operaciones_aritmeticas ::= operaciones_aritmeticas MAS operaciones_aritmeticas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = parser.msVB_PY.realizarOperaciones(a, e, aleft, aright, eleft, eright, 1);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("operaciones_aritmeticas",7, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // tipo_dato ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		  
        RESULT = Constantes.INT_VAR_VB_PY;
        parser.msVB_PY.errorSintax(eleft, eright, e, "Error sintactico en el tipo de dato de una variable, no se esperaba el token indicado.");
    
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("tipo_dato",6, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // tipo_dato ::= CHAR 
            {
              Object RESULT =null;
		RESULT = Constantes.CHAR_VAR_VB_PY;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("tipo_dato",6, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // tipo_dato ::= DECIMAL 
            {
              Object RESULT =null;
		RESULT = Constantes.FLOAT_VAR_VB_PY;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("tipo_dato",6, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // tipo_dato ::= INTEGER 
            {
              Object RESULT =null;
		RESULT = Constantes.INT_VAR_VB_PY;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("tipo_dato",6, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // return_dato ::= operaciones_aritmeticas 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("return_dato",5, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // return_dato ::= CARACTER 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = new Simbolo(Constantes.CHAR_VAR_VB_PY, e);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("return_dato",5, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // return ::= RETURN return_dato 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		 
        if(e != null) {
            parser.mc.returnCuarteto((Simbolo) e);
            RESULT = new Simbolo(Constantes.RETURN_VAR, e);
        } else {
            RESULT = null;
        }    
    
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("return",4, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // saltos ::= saltos SALTO 
            {
              Object RESULT =null;

              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("saltos",1, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // saltos ::= SALTO 
            {
              Object RESULT =null;

              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("saltos",1, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // estructura_fs_p ::= 
            {
              Object RESULT =null;

              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("estructura_fs_p",3, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // estructura_fs_p ::= estructura_fs_p saltos 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		 RESULT = a;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("estructura_fs_p",3, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // estructura_fs_p ::= estructura_fs_p saltos estructura_fs 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		 RESULT = parser.msVB_PY.lista(a, e);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("estructura_fs_p",3, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // estructura_fs_p ::= estructura_fs 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		 RESULT = e;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("estructura_fs_p",3, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // estructura_fs ::= error END FUNCTION 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		parser.msVB_PY.errorSintax(eleft, eright, e, "Error en el bloque de instrucciones, por favor revisa la entrada en la linea y columna indicada.");
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("estructura_fs",2, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // estructura_fs ::= error SUB 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		parser.msVB_PY.errorSintax(eleft, eright, e, "Error en el bloque de instrucciones, por favor revisa la entrada en la linea y columna indicada.");
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("estructura_fs",2, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // estructura_fs ::= PUBLIC sub 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("estructura_fs",2, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // estructura_fs ::= PUBLIC function 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("estructura_fs",2, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // estructura_fs ::= sub 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("estructura_fs",2, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // estructura_fs ::= function 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("estructura_fs",2, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= estructura_fs_p 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		parser.mi.setClaseVB(parser.msVB_PY.claseVB(e));
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoVisualBasic$parser.done_parsing();
          return CUP$SintacticoVisualBasic$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

